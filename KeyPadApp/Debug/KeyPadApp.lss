
KeyPadApp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001d50  00001de4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800062  00800062  00001de6  2**0
                  ALLOC
  3 .stab         000022a4  00000000  00000000  00001de8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e45  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fd 06 	jmp	0xdfa	; 0xdfa <__vector_10>
      2c:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 36       	cpi	r26, 0x6E	; 110
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <main>
      8a:	0c 94 a6 0e 	jmp	0x1d4c	; 0x1d4c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_u8SetPinVal>:
#include "dio_interface.h"
#include "dio_private.h"


uint8_t DIO_u8SetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinState)     
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <DIO_u8SetPinVal+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <DIO_u8SetPinVal+0x8>
      9a:	00 d0       	rcall	.+0      	; 0x9c <DIO_u8SetPinVal+0xa>
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	8a 83       	std	Y+2, r24	; 0x02
      a2:	6b 83       	std	Y+3, r22	; 0x03
      a4:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState = u8_DIO_OK;
      a6:	82 e0       	ldi	r24, 0x02	; 2
      a8:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
      aa:	8b 81       	ldd	r24, Y+3	; 0x03
      ac:	88 30       	cpi	r24, 0x08	; 8
      ae:	08 f0       	brcs	.+2      	; 0xb2 <DIO_u8SetPinVal+0x20>
      b0:	ee c0       	rjmp	.+476    	; 0x28e <DIO_u8SetPinVal+0x1fc>
	{
		switch(u8_PortNum)
      b2:	8a 81       	ldd	r24, Y+2	; 0x02
      b4:	28 2f       	mov	r18, r24
      b6:	30 e0       	ldi	r19, 0x00	; 0
      b8:	3e 83       	std	Y+6, r19	; 0x06
      ba:	2d 83       	std	Y+5, r18	; 0x05
      bc:	8d 81       	ldd	r24, Y+5	; 0x05
      be:	9e 81       	ldd	r25, Y+6	; 0x06
      c0:	89 30       	cpi	r24, 0x09	; 9
      c2:	91 05       	cpc	r25, r1
      c4:	09 f4       	brne	.+2      	; 0xc8 <DIO_u8SetPinVal+0x36>
      c6:	4a c0       	rjmp	.+148    	; 0x15c <DIO_u8SetPinVal+0xca>
      c8:	2d 81       	ldd	r18, Y+5	; 0x05
      ca:	3e 81       	ldd	r19, Y+6	; 0x06
      cc:	2a 30       	cpi	r18, 0x0A	; 10
      ce:	31 05       	cpc	r19, r1
      d0:	34 f4       	brge	.+12     	; 0xde <DIO_u8SetPinVal+0x4c>
      d2:	8d 81       	ldd	r24, Y+5	; 0x05
      d4:	9e 81       	ldd	r25, Y+6	; 0x06
      d6:	88 30       	cpi	r24, 0x08	; 8
      d8:	91 05       	cpc	r25, r1
      da:	71 f0       	breq	.+28     	; 0xf8 <DIO_u8SetPinVal+0x66>
      dc:	d5 c0       	rjmp	.+426    	; 0x288 <DIO_u8SetPinVal+0x1f6>
      de:	2d 81       	ldd	r18, Y+5	; 0x05
      e0:	3e 81       	ldd	r19, Y+6	; 0x06
      e2:	2a 30       	cpi	r18, 0x0A	; 10
      e4:	31 05       	cpc	r19, r1
      e6:	09 f4       	brne	.+2      	; 0xea <DIO_u8SetPinVal+0x58>
      e8:	6b c0       	rjmp	.+214    	; 0x1c0 <DIO_u8SetPinVal+0x12e>
      ea:	8d 81       	ldd	r24, Y+5	; 0x05
      ec:	9e 81       	ldd	r25, Y+6	; 0x06
      ee:	8b 30       	cpi	r24, 0x0B	; 11
      f0:	91 05       	cpc	r25, r1
      f2:	09 f4       	brne	.+2      	; 0xf6 <DIO_u8SetPinVal+0x64>
      f4:	97 c0       	rjmp	.+302    	; 0x224 <DIO_u8SetPinVal+0x192>
      f6:	c8 c0       	rjmp	.+400    	; 0x288 <DIO_u8SetPinVal+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinState == u8_DIO_PIN_LOW)
      f8:	8c 81       	ldd	r24, Y+4	; 0x04
      fa:	88 23       	and	r24, r24
      fc:	a9 f4       	brne	.+42     	; 0x128 <DIO_u8SetPinVal+0x96>
								{
									CLR_BIT(Ru8_PORTA,u8_PinNum) ;
      fe:	ab e3       	ldi	r26, 0x3B	; 59
     100:	b0 e0       	ldi	r27, 0x00	; 0
     102:	eb e3       	ldi	r30, 0x3B	; 59
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 81       	ld	r24, Z
     108:	48 2f       	mov	r20, r24
     10a:	8b 81       	ldd	r24, Y+3	; 0x03
     10c:	28 2f       	mov	r18, r24
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	02 2e       	mov	r0, r18
     116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_u8SetPinVal+0x8a>
     118:	88 0f       	add	r24, r24
     11a:	99 1f       	adc	r25, r25
     11c:	0a 94       	dec	r0
     11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_u8SetPinVal+0x86>
     120:	80 95       	com	r24
     122:	84 23       	and	r24, r20
     124:	8c 93       	st	X, r24
     126:	b5 c0       	rjmp	.+362    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
     128:	8c 81       	ldd	r24, Y+4	; 0x04
     12a:	81 30       	cpi	r24, 0x01	; 1
     12c:	a1 f4       	brne	.+40     	; 0x156 <DIO_u8SetPinVal+0xc4>
								{
									SET_BIT(Ru8_PORTA,u8_PinNum) ;
     12e:	ab e3       	ldi	r26, 0x3B	; 59
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	eb e3       	ldi	r30, 0x3B	; 59
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	80 81       	ld	r24, Z
     138:	48 2f       	mov	r20, r24
     13a:	8b 81       	ldd	r24, Y+3	; 0x03
     13c:	28 2f       	mov	r18, r24
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	02 2e       	mov	r0, r18
     146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_u8SetPinVal+0xba>
     148:	88 0f       	add	r24, r24
     14a:	99 1f       	adc	r25, r25
     14c:	0a 94       	dec	r0
     14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_u8SetPinVal+0xb6>
     150:	84 2b       	or	r24, r20
     152:	8c 93       	st	X, r24
     154:	9e c0       	rjmp	.+316    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     156:	83 e0       	ldi	r24, 0x03	; 3
     158:	89 83       	std	Y+1, r24	; 0x01
     15a:	9b c0       	rjmp	.+310    	; 0x292 <DIO_u8SetPinVal+0x200>
								}

							   break;
							   
			case u8_DIO_PORTB:	if(u8_PinState == u8_DIO_PIN_LOW)
     15c:	8c 81       	ldd	r24, Y+4	; 0x04
     15e:	88 23       	and	r24, r24
     160:	a9 f4       	brne	.+42     	; 0x18c <DIO_u8SetPinVal+0xfa>
								{
									CLR_BIT(Ru8_PORTB,u8_PinNum) ;
     162:	a8 e3       	ldi	r26, 0x38	; 56
     164:	b0 e0       	ldi	r27, 0x00	; 0
     166:	e8 e3       	ldi	r30, 0x38	; 56
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	48 2f       	mov	r20, r24
     16e:	8b 81       	ldd	r24, Y+3	; 0x03
     170:	28 2f       	mov	r18, r24
     172:	30 e0       	ldi	r19, 0x00	; 0
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	02 2e       	mov	r0, r18
     17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_u8SetPinVal+0xee>
     17c:	88 0f       	add	r24, r24
     17e:	99 1f       	adc	r25, r25
     180:	0a 94       	dec	r0
     182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_u8SetPinVal+0xea>
     184:	80 95       	com	r24
     186:	84 23       	and	r24, r20
     188:	8c 93       	st	X, r24
     18a:	83 c0       	rjmp	.+262    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
     18c:	8c 81       	ldd	r24, Y+4	; 0x04
     18e:	81 30       	cpi	r24, 0x01	; 1
     190:	a1 f4       	brne	.+40     	; 0x1ba <DIO_u8SetPinVal+0x128>
								{
									SET_BIT(Ru8_PORTB,u8_PinNum) ;
     192:	a8 e3       	ldi	r26, 0x38	; 56
     194:	b0 e0       	ldi	r27, 0x00	; 0
     196:	e8 e3       	ldi	r30, 0x38	; 56
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	48 2f       	mov	r20, r24
     19e:	8b 81       	ldd	r24, Y+3	; 0x03
     1a0:	28 2f       	mov	r18, r24
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	02 2e       	mov	r0, r18
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_u8SetPinVal+0x11e>
     1ac:	88 0f       	add	r24, r24
     1ae:	99 1f       	adc	r25, r25
     1b0:	0a 94       	dec	r0
     1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_u8SetPinVal+0x11a>
     1b4:	84 2b       	or	r24, r20
     1b6:	8c 93       	st	X, r24
     1b8:	6c c0       	rjmp	.+216    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     1ba:	83 e0       	ldi	r24, 0x03	; 3
     1bc:	89 83       	std	Y+1, r24	; 0x01
     1be:	69 c0       	rjmp	.+210    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinState == u8_DIO_PIN_LOW)
     1c0:	8c 81       	ldd	r24, Y+4	; 0x04
     1c2:	88 23       	and	r24, r24
     1c4:	a9 f4       	brne	.+42     	; 0x1f0 <DIO_u8SetPinVal+0x15e>
								{
									CLR_BIT(Ru8_PORTC,u8_PinNum) ;
     1c6:	a5 e3       	ldi	r26, 0x35	; 53
     1c8:	b0 e0       	ldi	r27, 0x00	; 0
     1ca:	e5 e3       	ldi	r30, 0x35	; 53
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	48 2f       	mov	r20, r24
     1d2:	8b 81       	ldd	r24, Y+3	; 0x03
     1d4:	28 2f       	mov	r18, r24
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	81 e0       	ldi	r24, 0x01	; 1
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	02 2e       	mov	r0, r18
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_u8SetPinVal+0x152>
     1e0:	88 0f       	add	r24, r24
     1e2:	99 1f       	adc	r25, r25
     1e4:	0a 94       	dec	r0
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_u8SetPinVal+0x14e>
     1e8:	80 95       	com	r24
     1ea:	84 23       	and	r24, r20
     1ec:	8c 93       	st	X, r24
     1ee:	51 c0       	rjmp	.+162    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
     1f0:	8c 81       	ldd	r24, Y+4	; 0x04
     1f2:	81 30       	cpi	r24, 0x01	; 1
     1f4:	a1 f4       	brne	.+40     	; 0x21e <DIO_u8SetPinVal+0x18c>
								{
									SET_BIT(Ru8_PORTC,u8_PinNum) ;
     1f6:	a5 e3       	ldi	r26, 0x35	; 53
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	e5 e3       	ldi	r30, 0x35	; 53
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	48 2f       	mov	r20, r24
     202:	8b 81       	ldd	r24, Y+3	; 0x03
     204:	28 2f       	mov	r18, r24
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	02 2e       	mov	r0, r18
     20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_u8SetPinVal+0x182>
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	0a 94       	dec	r0
     216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_u8SetPinVal+0x17e>
     218:	84 2b       	or	r24, r20
     21a:	8c 93       	st	X, r24
     21c:	3a c0       	rjmp	.+116    	; 0x292 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     21e:	83 e0       	ldi	r24, 0x03	; 3
     220:	89 83       	std	Y+1, r24	; 0x01
     222:	37 c0       	rjmp	.+110    	; 0x292 <DIO_u8SetPinVal+0x200>
								}

								break;
								
			case u8_DIO_PORTD: if(u8_PinState == u8_DIO_PIN_LOW)
     224:	8c 81       	ldd	r24, Y+4	; 0x04
     226:	88 23       	and	r24, r24
     228:	a9 f4       	brne	.+42     	; 0x254 <DIO_u8SetPinVal+0x1c2>
							   {
									CLR_BIT(Ru8_PORTD,u8_PinNum) ;
     22a:	a2 e3       	ldi	r26, 0x32	; 50
     22c:	b0 e0       	ldi	r27, 0x00	; 0
     22e:	e2 e3       	ldi	r30, 0x32	; 50
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	80 81       	ld	r24, Z
     234:	48 2f       	mov	r20, r24
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	28 2f       	mov	r18, r24
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	02 2e       	mov	r0, r18
     242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_u8SetPinVal+0x1b6>
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	0a 94       	dec	r0
     24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_u8SetPinVal+0x1b2>
     24c:	80 95       	com	r24
     24e:	84 23       	and	r24, r20
     250:	8c 93       	st	X, r24
     252:	1f c0       	rjmp	.+62     	; 0x292 <DIO_u8SetPinVal+0x200>
							   }
							   else if(u8_PinState == u8_DIO_PIN_HIGH)
     254:	8c 81       	ldd	r24, Y+4	; 0x04
     256:	81 30       	cpi	r24, 0x01	; 1
     258:	a1 f4       	brne	.+40     	; 0x282 <DIO_u8SetPinVal+0x1f0>
							   {
									SET_BIT(Ru8_PORTD,u8_PinNum) ;
     25a:	a2 e3       	ldi	r26, 0x32	; 50
     25c:	b0 e0       	ldi	r27, 0x00	; 0
     25e:	e2 e3       	ldi	r30, 0x32	; 50
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	48 2f       	mov	r20, r24
     266:	8b 81       	ldd	r24, Y+3	; 0x03
     268:	28 2f       	mov	r18, r24
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	02 2e       	mov	r0, r18
     272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_u8SetPinVal+0x1e6>
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	0a 94       	dec	r0
     27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_u8SetPinVal+0x1e2>
     27c:	84 2b       	or	r24, r20
     27e:	8c 93       	st	X, r24
     280:	08 c0       	rjmp	.+16     	; 0x292 <DIO_u8SetPinVal+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
     282:	83 e0       	ldi	r24, 0x03	; 3
     284:	89 83       	std	Y+1, r24	; 0x01
     286:	05 c0       	rjmp	.+10     	; 0x292 <DIO_u8SetPinVal+0x200>
							   }
								break;
								
			default          : u8_ErrorState = u8_DIO_NOK ; 
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	89 83       	std	Y+1, r24	; 0x01
     28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_u8SetPinVal+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
     292:	89 81       	ldd	r24, Y+1	; 0x01
}
     294:	26 96       	adiw	r28, 0x06	; 6
     296:	0f b6       	in	r0, 0x3f	; 63
     298:	f8 94       	cli
     29a:	de bf       	out	0x3e, r29	; 62
     29c:	0f be       	out	0x3f, r0	; 63
     29e:	cd bf       	out	0x3d, r28	; 61
     2a0:	cf 91       	pop	r28
     2a2:	df 91       	pop	r29
     2a4:	08 95       	ret

000002a6 <DIO_u8SetPinDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPinDir(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinDir)      
{
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <DIO_u8SetPinDir+0x6>
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <DIO_u8SetPinDir+0x8>
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <DIO_u8SetPinDir+0xa>
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	8a 83       	std	Y+2, r24	; 0x02
     2b6:	6b 83       	std	Y+3, r22	; 0x03
     2b8:	4c 83       	std	Y+4, r20	; 0x04
	
	uint8_t u8_ErrorState = u8_DIO_OK;
     2ba:	82 e0       	ldi	r24, 0x02	; 2
     2bc:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     2be:	8b 81       	ldd	r24, Y+3	; 0x03
     2c0:	88 30       	cpi	r24, 0x08	; 8
     2c2:	08 f0       	brcs	.+2      	; 0x2c6 <DIO_u8SetPinDir+0x20>
     2c4:	ee c0       	rjmp	.+476    	; 0x4a2 <DIO_u8SetPinDir+0x1fc>
	{
		switch(u8_PortNum)
     2c6:	8a 81       	ldd	r24, Y+2	; 0x02
     2c8:	28 2f       	mov	r18, r24
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	3e 83       	std	Y+6, r19	; 0x06
     2ce:	2d 83       	std	Y+5, r18	; 0x05
     2d0:	8d 81       	ldd	r24, Y+5	; 0x05
     2d2:	9e 81       	ldd	r25, Y+6	; 0x06
     2d4:	89 30       	cpi	r24, 0x09	; 9
     2d6:	91 05       	cpc	r25, r1
     2d8:	09 f4       	brne	.+2      	; 0x2dc <DIO_u8SetPinDir+0x36>
     2da:	4a c0       	rjmp	.+148    	; 0x370 <DIO_u8SetPinDir+0xca>
     2dc:	2d 81       	ldd	r18, Y+5	; 0x05
     2de:	3e 81       	ldd	r19, Y+6	; 0x06
     2e0:	2a 30       	cpi	r18, 0x0A	; 10
     2e2:	31 05       	cpc	r19, r1
     2e4:	34 f4       	brge	.+12     	; 0x2f2 <DIO_u8SetPinDir+0x4c>
     2e6:	8d 81       	ldd	r24, Y+5	; 0x05
     2e8:	9e 81       	ldd	r25, Y+6	; 0x06
     2ea:	88 30       	cpi	r24, 0x08	; 8
     2ec:	91 05       	cpc	r25, r1
     2ee:	71 f0       	breq	.+28     	; 0x30c <DIO_u8SetPinDir+0x66>
     2f0:	d5 c0       	rjmp	.+426    	; 0x49c <DIO_u8SetPinDir+0x1f6>
     2f2:	2d 81       	ldd	r18, Y+5	; 0x05
     2f4:	3e 81       	ldd	r19, Y+6	; 0x06
     2f6:	2a 30       	cpi	r18, 0x0A	; 10
     2f8:	31 05       	cpc	r19, r1
     2fa:	09 f4       	brne	.+2      	; 0x2fe <DIO_u8SetPinDir+0x58>
     2fc:	6b c0       	rjmp	.+214    	; 0x3d4 <DIO_u8SetPinDir+0x12e>
     2fe:	8d 81       	ldd	r24, Y+5	; 0x05
     300:	9e 81       	ldd	r25, Y+6	; 0x06
     302:	8b 30       	cpi	r24, 0x0B	; 11
     304:	91 05       	cpc	r25, r1
     306:	09 f4       	brne	.+2      	; 0x30a <DIO_u8SetPinDir+0x64>
     308:	97 c0       	rjmp	.+302    	; 0x438 <DIO_u8SetPinDir+0x192>
     30a:	c8 c0       	rjmp	.+400    	; 0x49c <DIO_u8SetPinDir+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     30c:	8c 81       	ldd	r24, Y+4	; 0x04
     30e:	81 30       	cpi	r24, 0x01	; 1
     310:	a1 f4       	brne	.+40     	; 0x33a <DIO_u8SetPinDir+0x94>
							   {
									SET_BIT(Ru8_DDRA,u8_PinNum) ;
     312:	aa e3       	ldi	r26, 0x3A	; 58
     314:	b0 e0       	ldi	r27, 0x00	; 0
     316:	ea e3       	ldi	r30, 0x3A	; 58
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	48 2f       	mov	r20, r24
     31e:	8b 81       	ldd	r24, Y+3	; 0x03
     320:	28 2f       	mov	r18, r24
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	02 2e       	mov	r0, r18
     32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_u8SetPinDir+0x8a>
     32c:	88 0f       	add	r24, r24
     32e:	99 1f       	adc	r25, r25
     330:	0a 94       	dec	r0
     332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_u8SetPinDir+0x86>
     334:	84 2b       	or	r24, r20
     336:	8c 93       	st	X, r24
     338:	b6 c0       	rjmp	.+364    	; 0x4a6 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     33a:	8c 81       	ldd	r24, Y+4	; 0x04
     33c:	88 23       	and	r24, r24
     33e:	a9 f4       	brne	.+42     	; 0x36a <DIO_u8SetPinDir+0xc4>
							   {
									CLR_BIT(Ru8_DDRA,u8_PinNum) ;
     340:	aa e3       	ldi	r26, 0x3A	; 58
     342:	b0 e0       	ldi	r27, 0x00	; 0
     344:	ea e3       	ldi	r30, 0x3A	; 58
     346:	f0 e0       	ldi	r31, 0x00	; 0
     348:	80 81       	ld	r24, Z
     34a:	48 2f       	mov	r20, r24
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	28 2f       	mov	r18, r24
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	02 2e       	mov	r0, r18
     358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_u8SetPinDir+0xb8>
     35a:	88 0f       	add	r24, r24
     35c:	99 1f       	adc	r25, r25
     35e:	0a 94       	dec	r0
     360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_u8SetPinDir+0xb4>
     362:	80 95       	com	r24
     364:	84 23       	and	r24, r20
     366:	8c 93       	st	X, r24
     368:	9e c0       	rjmp	.+316    	; 0x4a6 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	89 83       	std	Y+1, r24	; 0x01
     36e:	9b c0       	rjmp	.+310    	; 0x4a6 <DIO_u8SetPinDir+0x200>
							   }
							   break;
	
			case u8_DIO_PORTB: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     370:	8c 81       	ldd	r24, Y+4	; 0x04
     372:	81 30       	cpi	r24, 0x01	; 1
     374:	a1 f4       	brne	.+40     	; 0x39e <DIO_u8SetPinDir+0xf8>
							   {
									SET_BIT(Ru8_DDRB,u8_PinNum) ;
     376:	a7 e3       	ldi	r26, 0x37	; 55
     378:	b0 e0       	ldi	r27, 0x00	; 0
     37a:	e7 e3       	ldi	r30, 0x37	; 55
     37c:	f0 e0       	ldi	r31, 0x00	; 0
     37e:	80 81       	ld	r24, Z
     380:	48 2f       	mov	r20, r24
     382:	8b 81       	ldd	r24, Y+3	; 0x03
     384:	28 2f       	mov	r18, r24
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	02 2e       	mov	r0, r18
     38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_u8SetPinDir+0xee>
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	0a 94       	dec	r0
     396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_u8SetPinDir+0xea>
     398:	84 2b       	or	r24, r20
     39a:	8c 93       	st	X, r24
     39c:	84 c0       	rjmp	.+264    	; 0x4a6 <DIO_u8SetPinDir+0x200>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     39e:	8c 81       	ldd	r24, Y+4	; 0x04
     3a0:	88 23       	and	r24, r24
     3a2:	a9 f4       	brne	.+42     	; 0x3ce <DIO_u8SetPinDir+0x128>
							   {
									CLR_BIT(Ru8_DDRB,u8_PinNum) ;
     3a4:	a7 e3       	ldi	r26, 0x37	; 55
     3a6:	b0 e0       	ldi	r27, 0x00	; 0
     3a8:	e7 e3       	ldi	r30, 0x37	; 55
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	80 81       	ld	r24, Z
     3ae:	48 2f       	mov	r20, r24
     3b0:	8b 81       	ldd	r24, Y+3	; 0x03
     3b2:	28 2f       	mov	r18, r24
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	02 2e       	mov	r0, r18
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_u8SetPinDir+0x11c>
     3be:	88 0f       	add	r24, r24
     3c0:	99 1f       	adc	r25, r25
     3c2:	0a 94       	dec	r0
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_u8SetPinDir+0x118>
     3c6:	80 95       	com	r24
     3c8:	84 23       	and	r24, r20
     3ca:	8c 93       	st	X, r24
     3cc:	6c c0       	rjmp	.+216    	; 0x4a6 <DIO_u8SetPinDir+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
     3ce:	83 e0       	ldi	r24, 0x03	; 3
     3d0:	89 83       	std	Y+1, r24	; 0x01
     3d2:	69 c0       	rjmp	.+210    	; 0x4a6 <DIO_u8SetPinDir+0x200>
							   }
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     3d4:	8c 81       	ldd	r24, Y+4	; 0x04
     3d6:	81 30       	cpi	r24, 0x01	; 1
     3d8:	a1 f4       	brne	.+40     	; 0x402 <DIO_u8SetPinDir+0x15c>
							    {
									SET_BIT(Ru8_DDRC,u8_PinNum) ;
     3da:	a4 e3       	ldi	r26, 0x34	; 52
     3dc:	b0 e0       	ldi	r27, 0x00	; 0
     3de:	e4 e3       	ldi	r30, 0x34	; 52
     3e0:	f0 e0       	ldi	r31, 0x00	; 0
     3e2:	80 81       	ld	r24, Z
     3e4:	48 2f       	mov	r20, r24
     3e6:	8b 81       	ldd	r24, Y+3	; 0x03
     3e8:	28 2f       	mov	r18, r24
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	02 2e       	mov	r0, r18
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_u8SetPinDir+0x152>
     3f4:	88 0f       	add	r24, r24
     3f6:	99 1f       	adc	r25, r25
     3f8:	0a 94       	dec	r0
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_u8SetPinDir+0x14e>
     3fc:	84 2b       	or	r24, r20
     3fe:	8c 93       	st	X, r24
     400:	52 c0       	rjmp	.+164    	; 0x4a6 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     402:	8c 81       	ldd	r24, Y+4	; 0x04
     404:	88 23       	and	r24, r24
     406:	a9 f4       	brne	.+42     	; 0x432 <DIO_u8SetPinDir+0x18c>
								{
									CLR_BIT(Ru8_DDRC,u8_PinNum) ;
     408:	a4 e3       	ldi	r26, 0x34	; 52
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	e4 e3       	ldi	r30, 0x34	; 52
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	48 2f       	mov	r20, r24
     414:	8b 81       	ldd	r24, Y+3	; 0x03
     416:	28 2f       	mov	r18, r24
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	02 2e       	mov	r0, r18
     420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_u8SetPinDir+0x180>
     422:	88 0f       	add	r24, r24
     424:	99 1f       	adc	r25, r25
     426:	0a 94       	dec	r0
     428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_u8SetPinDir+0x17c>
     42a:	80 95       	com	r24
     42c:	84 23       	and	r24, r20
     42e:	8c 93       	st	X, r24
     430:	3a c0       	rjmp	.+116    	; 0x4a6 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	89 83       	std	Y+1, r24	; 0x01
     436:	37 c0       	rjmp	.+110    	; 0x4a6 <DIO_u8SetPinDir+0x200>
								}
								break;
		
			case u8_DIO_PORTD: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     438:	8c 81       	ldd	r24, Y+4	; 0x04
     43a:	81 30       	cpi	r24, 0x01	; 1
     43c:	a1 f4       	brne	.+40     	; 0x466 <DIO_u8SetPinDir+0x1c0>
							    {
									SET_BIT(Ru8_DDRD,u8_PinNum) ;
     43e:	a1 e3       	ldi	r26, 0x31	; 49
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e1 e3       	ldi	r30, 0x31	; 49
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	48 2f       	mov	r20, r24
     44a:	8b 81       	ldd	r24, Y+3	; 0x03
     44c:	28 2f       	mov	r18, r24
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 2e       	mov	r0, r18
     456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_u8SetPinDir+0x1b6>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	0a 94       	dec	r0
     45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_u8SetPinDir+0x1b2>
     460:	84 2b       	or	r24, r20
     462:	8c 93       	st	X, r24
     464:	20 c0       	rjmp	.+64     	; 0x4a6 <DIO_u8SetPinDir+0x200>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     466:	8c 81       	ldd	r24, Y+4	; 0x04
     468:	88 23       	and	r24, r24
     46a:	a9 f4       	brne	.+42     	; 0x496 <DIO_u8SetPinDir+0x1f0>
								{
									CLR_BIT(Ru8_DDRD,u8_PinNum) ;
     46c:	a1 e3       	ldi	r26, 0x31	; 49
     46e:	b0 e0       	ldi	r27, 0x00	; 0
     470:	e1 e3       	ldi	r30, 0x31	; 49
     472:	f0 e0       	ldi	r31, 0x00	; 0
     474:	80 81       	ld	r24, Z
     476:	48 2f       	mov	r20, r24
     478:	8b 81       	ldd	r24, Y+3	; 0x03
     47a:	28 2f       	mov	r18, r24
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	02 2e       	mov	r0, r18
     484:	02 c0       	rjmp	.+4      	; 0x48a <DIO_u8SetPinDir+0x1e4>
     486:	88 0f       	add	r24, r24
     488:	99 1f       	adc	r25, r25
     48a:	0a 94       	dec	r0
     48c:	e2 f7       	brpl	.-8      	; 0x486 <DIO_u8SetPinDir+0x1e0>
     48e:	80 95       	com	r24
     490:	84 23       	and	r24, r20
     492:	8c 93       	st	X, r24
     494:	08 c0       	rjmp	.+16     	; 0x4a6 <DIO_u8SetPinDir+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     496:	83 e0       	ldi	r24, 0x03	; 3
     498:	89 83       	std	Y+1, r24	; 0x01
     49a:	05 c0       	rjmp	.+10     	; 0x4a6 <DIO_u8SetPinDir+0x200>
								}
								break;
			
			default          : u8_ErrorState = u8_DIO_NOK ; 
     49c:	83 e0       	ldi	r24, 0x03	; 3
     49e:	89 83       	std	Y+1, r24	; 0x01
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_u8SetPinDir+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
     4a6:	89 81       	ldd	r24, Y+1	; 0x01
}
     4a8:	26 96       	adiw	r28, 0x06	; 6
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
     4b4:	cf 91       	pop	r28
     4b6:	df 91       	pop	r29
     4b8:	08 95       	ret

000004ba <DIO_u8SetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortVal(uint8_t u8_PortNum,uint8_t u8_PortState)
{
     4ba:	df 93       	push	r29
     4bc:	cf 93       	push	r28
     4be:	00 d0       	rcall	.+0      	; 0x4c0 <DIO_u8SetPortVal+0x6>
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <DIO_u8SetPortVal+0x8>
     4c2:	0f 92       	push	r0
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	8a 83       	std	Y+2, r24	; 0x02
     4ca:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	89 83       	std	Y+1, r24	; 0x01

		switch(u8_PortNum)
     4d0:	8a 81       	ldd	r24, Y+2	; 0x02
     4d2:	28 2f       	mov	r18, r24
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	3d 83       	std	Y+5, r19	; 0x05
     4d8:	2c 83       	std	Y+4, r18	; 0x04
     4da:	8c 81       	ldd	r24, Y+4	; 0x04
     4dc:	9d 81       	ldd	r25, Y+5	; 0x05
     4de:	89 30       	cpi	r24, 0x09	; 9
     4e0:	91 05       	cpc	r25, r1
     4e2:	d9 f0       	breq	.+54     	; 0x51a <DIO_u8SetPortVal+0x60>
     4e4:	2c 81       	ldd	r18, Y+4	; 0x04
     4e6:	3d 81       	ldd	r19, Y+5	; 0x05
     4e8:	2a 30       	cpi	r18, 0x0A	; 10
     4ea:	31 05       	cpc	r19, r1
     4ec:	34 f4       	brge	.+12     	; 0x4fa <DIO_u8SetPortVal+0x40>
     4ee:	8c 81       	ldd	r24, Y+4	; 0x04
     4f0:	9d 81       	ldd	r25, Y+5	; 0x05
     4f2:	88 30       	cpi	r24, 0x08	; 8
     4f4:	91 05       	cpc	r25, r1
     4f6:	61 f0       	breq	.+24     	; 0x510 <DIO_u8SetPortVal+0x56>
     4f8:	1f c0       	rjmp	.+62     	; 0x538 <DIO_u8SetPortVal+0x7e>
     4fa:	2c 81       	ldd	r18, Y+4	; 0x04
     4fc:	3d 81       	ldd	r19, Y+5	; 0x05
     4fe:	2a 30       	cpi	r18, 0x0A	; 10
     500:	31 05       	cpc	r19, r1
     502:	81 f0       	breq	.+32     	; 0x524 <DIO_u8SetPortVal+0x6a>
     504:	8c 81       	ldd	r24, Y+4	; 0x04
     506:	9d 81       	ldd	r25, Y+5	; 0x05
     508:	8b 30       	cpi	r24, 0x0B	; 11
     50a:	91 05       	cpc	r25, r1
     50c:	81 f0       	breq	.+32     	; 0x52e <DIO_u8SetPortVal+0x74>
     50e:	14 c0       	rjmp	.+40     	; 0x538 <DIO_u8SetPortVal+0x7e>
		{
			case u8_DIO_PORTA: Ru8_PORTA = u8_PortState ;  break ;			   
     510:	eb e3       	ldi	r30, 0x3B	; 59
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	80 83       	st	Z, r24
     518:	11 c0       	rjmp	.+34     	; 0x53c <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTB: Ru8_PORTB = u8_PortState ;  break ;	
     51a:	e8 e3       	ldi	r30, 0x38	; 56
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	80 83       	st	Z, r24
     522:	0c c0       	rjmp	.+24     	; 0x53c <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTC: Ru8_PORTC = u8_PortState ;  break ;	
     524:	e5 e3       	ldi	r30, 0x35	; 53
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	8b 81       	ldd	r24, Y+3	; 0x03
     52a:	80 83       	st	Z, r24
     52c:	07 c0       	rjmp	.+14     	; 0x53c <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTD: Ru8_PORTD = u8_PortState ;  break ;	
     52e:	e2 e3       	ldi	r30, 0x32	; 50
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	8b 81       	ldd	r24, Y+3	; 0x03
     534:	80 83       	st	Z, r24
     536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_u8SetPortVal+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
     538:	83 e0       	ldi	r24, 0x03	; 3
     53a:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
     53c:	89 81       	ldd	r24, Y+1	; 0x01
}
     53e:	0f 90       	pop	r0
     540:	0f 90       	pop	r0
     542:	0f 90       	pop	r0
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	cf 91       	pop	r28
     54a:	df 91       	pop	r29
     54c:	08 95       	ret

0000054e <DIO_u8SetPortDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortDir(uint8_t u8_PortNum,uint8_t u8_PortDir)
{
     54e:	df 93       	push	r29
     550:	cf 93       	push	r28
     552:	00 d0       	rcall	.+0      	; 0x554 <DIO_u8SetPortDir+0x6>
     554:	00 d0       	rcall	.+0      	; 0x556 <DIO_u8SetPortDir+0x8>
     556:	0f 92       	push	r0
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	8a 83       	std	Y+2, r24	; 0x02
     55e:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	89 83       	std	Y+1, r24	; 0x01
		switch(u8_PortNum)
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	28 2f       	mov	r18, r24
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	3d 83       	std	Y+5, r19	; 0x05
     56c:	2c 83       	std	Y+4, r18	; 0x04
     56e:	8c 81       	ldd	r24, Y+4	; 0x04
     570:	9d 81       	ldd	r25, Y+5	; 0x05
     572:	89 30       	cpi	r24, 0x09	; 9
     574:	91 05       	cpc	r25, r1
     576:	d9 f0       	breq	.+54     	; 0x5ae <DIO_u8SetPortDir+0x60>
     578:	2c 81       	ldd	r18, Y+4	; 0x04
     57a:	3d 81       	ldd	r19, Y+5	; 0x05
     57c:	2a 30       	cpi	r18, 0x0A	; 10
     57e:	31 05       	cpc	r19, r1
     580:	34 f4       	brge	.+12     	; 0x58e <DIO_u8SetPortDir+0x40>
     582:	8c 81       	ldd	r24, Y+4	; 0x04
     584:	9d 81       	ldd	r25, Y+5	; 0x05
     586:	88 30       	cpi	r24, 0x08	; 8
     588:	91 05       	cpc	r25, r1
     58a:	61 f0       	breq	.+24     	; 0x5a4 <DIO_u8SetPortDir+0x56>
     58c:	1f c0       	rjmp	.+62     	; 0x5cc <DIO_u8SetPortDir+0x7e>
     58e:	2c 81       	ldd	r18, Y+4	; 0x04
     590:	3d 81       	ldd	r19, Y+5	; 0x05
     592:	2a 30       	cpi	r18, 0x0A	; 10
     594:	31 05       	cpc	r19, r1
     596:	81 f0       	breq	.+32     	; 0x5b8 <DIO_u8SetPortDir+0x6a>
     598:	8c 81       	ldd	r24, Y+4	; 0x04
     59a:	9d 81       	ldd	r25, Y+5	; 0x05
     59c:	8b 30       	cpi	r24, 0x0B	; 11
     59e:	91 05       	cpc	r25, r1
     5a0:	81 f0       	breq	.+32     	; 0x5c2 <DIO_u8SetPortDir+0x74>
     5a2:	14 c0       	rjmp	.+40     	; 0x5cc <DIO_u8SetPortDir+0x7e>
		{
			case u8_DIO_PORTA: Ru8_DDRA = u8_PortDir ;     break ;			   
     5a4:	ea e3       	ldi	r30, 0x3A	; 58
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	8b 81       	ldd	r24, Y+3	; 0x03
     5aa:	80 83       	st	Z, r24
     5ac:	11 c0       	rjmp	.+34     	; 0x5d0 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTB: Ru8_DDRB = u8_PortDir ;     break ;	
     5ae:	e7 e3       	ldi	r30, 0x37	; 55
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	8b 81       	ldd	r24, Y+3	; 0x03
     5b4:	80 83       	st	Z, r24
     5b6:	0c c0       	rjmp	.+24     	; 0x5d0 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTC: Ru8_DDRC = u8_PortDir ;     break ;	
     5b8:	e4 e3       	ldi	r30, 0x34	; 52
     5ba:	f0 e0       	ldi	r31, 0x00	; 0
     5bc:	8b 81       	ldd	r24, Y+3	; 0x03
     5be:	80 83       	st	Z, r24
     5c0:	07 c0       	rjmp	.+14     	; 0x5d0 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTD: Ru8_DDRD = u8_PortDir ;     break ;	
     5c2:	e1 e3       	ldi	r30, 0x31	; 49
     5c4:	f0 e0       	ldi	r31, 0x00	; 0
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	80 83       	st	Z, r24
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_u8SetPortDir+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
     5cc:	83 e0       	ldi	r24, 0x03	; 3
     5ce:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
     5d0:	89 81       	ldd	r24, Y+1	; 0x01
}
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	cf 91       	pop	r28
     5de:	df 91       	pop	r29
     5e0:	08 95       	ret

000005e2 <DIO_u8GetPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t* pu8_ReturnedPinVal)      
{
     5e2:	df 93       	push	r29
     5e4:	cf 93       	push	r28
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	27 97       	sbiw	r28, 0x07	; 7
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	8a 83       	std	Y+2, r24	; 0x02
     5f8:	6b 83       	std	Y+3, r22	; 0x03
     5fa:	5d 83       	std	Y+5, r21	; 0x05
     5fc:	4c 83       	std	Y+4, r20	; 0x04
		uint8_t u8_ErrorState = u8_DIO_OK;
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	88 30       	cpi	r24, 0x08	; 8
     606:	08 f0       	brcs	.+2      	; 0x60a <DIO_u8GetPinVal+0x28>
     608:	74 c0       	rjmp	.+232    	; 0x6f2 <DIO_u8GetPinVal+0x110>
		{
			switch(u8_PortNum)
     60a:	8a 81       	ldd	r24, Y+2	; 0x02
     60c:	28 2f       	mov	r18, r24
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	3f 83       	std	Y+7, r19	; 0x07
     612:	2e 83       	std	Y+6, r18	; 0x06
     614:	4e 81       	ldd	r20, Y+6	; 0x06
     616:	5f 81       	ldd	r21, Y+7	; 0x07
     618:	49 30       	cpi	r20, 0x09	; 9
     61a:	51 05       	cpc	r21, r1
     61c:	59 f1       	breq	.+86     	; 0x674 <DIO_u8GetPinVal+0x92>
     61e:	8e 81       	ldd	r24, Y+6	; 0x06
     620:	9f 81       	ldd	r25, Y+7	; 0x07
     622:	8a 30       	cpi	r24, 0x0A	; 10
     624:	91 05       	cpc	r25, r1
     626:	34 f4       	brge	.+12     	; 0x634 <DIO_u8GetPinVal+0x52>
     628:	2e 81       	ldd	r18, Y+6	; 0x06
     62a:	3f 81       	ldd	r19, Y+7	; 0x07
     62c:	28 30       	cpi	r18, 0x08	; 8
     62e:	31 05       	cpc	r19, r1
     630:	69 f0       	breq	.+26     	; 0x64c <DIO_u8GetPinVal+0x6a>
     632:	5c c0       	rjmp	.+184    	; 0x6ec <DIO_u8GetPinVal+0x10a>
     634:	4e 81       	ldd	r20, Y+6	; 0x06
     636:	5f 81       	ldd	r21, Y+7	; 0x07
     638:	4a 30       	cpi	r20, 0x0A	; 10
     63a:	51 05       	cpc	r21, r1
     63c:	79 f1       	breq	.+94     	; 0x69c <DIO_u8GetPinVal+0xba>
     63e:	8e 81       	ldd	r24, Y+6	; 0x06
     640:	9f 81       	ldd	r25, Y+7	; 0x07
     642:	8b 30       	cpi	r24, 0x0B	; 11
     644:	91 05       	cpc	r25, r1
     646:	09 f4       	brne	.+2      	; 0x64a <DIO_u8GetPinVal+0x68>
     648:	3d c0       	rjmp	.+122    	; 0x6c4 <DIO_u8GetPinVal+0xe2>
     64a:	50 c0       	rjmp	.+160    	; 0x6ec <DIO_u8GetPinVal+0x10a>
			{
				case u8_DIO_PORTA: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINA,u8_PinNum)  ; break ;
     64c:	e9 e3       	ldi	r30, 0x39	; 57
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 81       	ld	r24, Z
     652:	28 2f       	mov	r18, r24
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	8b 81       	ldd	r24, Y+3	; 0x03
     658:	88 2f       	mov	r24, r24
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	a9 01       	movw	r20, r18
     65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_u8GetPinVal+0x82>
     660:	55 95       	asr	r21
     662:	47 95       	ror	r20
     664:	8a 95       	dec	r24
     666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_u8GetPinVal+0x7e>
     668:	ca 01       	movw	r24, r20
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	ec 81       	ldd	r30, Y+4	; 0x04
     66e:	fd 81       	ldd	r31, Y+5	; 0x05
     670:	80 83       	st	Z, r24
     672:	41 c0       	rjmp	.+130    	; 0x6f6 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTB: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINB,u8_PinNum)  ; break ;
     674:	e6 e3       	ldi	r30, 0x36	; 54
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	28 2f       	mov	r18, r24
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	8b 81       	ldd	r24, Y+3	; 0x03
     680:	88 2f       	mov	r24, r24
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	a9 01       	movw	r20, r18
     686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_u8GetPinVal+0xaa>
     688:	55 95       	asr	r21
     68a:	47 95       	ror	r20
     68c:	8a 95       	dec	r24
     68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_u8GetPinVal+0xa6>
     690:	ca 01       	movw	r24, r20
     692:	81 70       	andi	r24, 0x01	; 1
     694:	ec 81       	ldd	r30, Y+4	; 0x04
     696:	fd 81       	ldd	r31, Y+5	; 0x05
     698:	80 83       	st	Z, r24
     69a:	2d c0       	rjmp	.+90     	; 0x6f6 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTC: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINC,u8_PinNum)  ; break ;
     69c:	e3 e3       	ldi	r30, 0x33	; 51
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	28 2f       	mov	r18, r24
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	8b 81       	ldd	r24, Y+3	; 0x03
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	a9 01       	movw	r20, r18
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_u8GetPinVal+0xd2>
     6b0:	55 95       	asr	r21
     6b2:	47 95       	ror	r20
     6b4:	8a 95       	dec	r24
     6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_u8GetPinVal+0xce>
     6b8:	ca 01       	movw	r24, r20
     6ba:	81 70       	andi	r24, 0x01	; 1
     6bc:	ec 81       	ldd	r30, Y+4	; 0x04
     6be:	fd 81       	ldd	r31, Y+5	; 0x05
     6c0:	80 83       	st	Z, r24
     6c2:	19 c0       	rjmp	.+50     	; 0x6f6 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTD: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PIND,u8_PinNum)  ; break ;
     6c4:	e0 e3       	ldi	r30, 0x30	; 48
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	28 2f       	mov	r18, r24
     6cc:	30 e0       	ldi	r19, 0x00	; 0
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	88 2f       	mov	r24, r24
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	a9 01       	movw	r20, r18
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_u8GetPinVal+0xfa>
     6d8:	55 95       	asr	r21
     6da:	47 95       	ror	r20
     6dc:	8a 95       	dec	r24
     6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_u8GetPinVal+0xf6>
     6e0:	ca 01       	movw	r24, r20
     6e2:	81 70       	andi	r24, 0x01	; 1
     6e4:	ec 81       	ldd	r30, Y+4	; 0x04
     6e6:	fd 81       	ldd	r31, Y+5	; 0x05
     6e8:	80 83       	st	Z, r24
     6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <DIO_u8GetPinVal+0x114>
				default          : u8_ErrorState = u8_DIO_NOK; 							 break ; 
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	89 83       	std	Y+1, r24	; 0x01
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <DIO_u8GetPinVal+0x114>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
     6f2:	83 e0       	ldi	r24, 0x03	; 3
     6f4:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     6f8:	27 96       	adiw	r28, 0x07	; 7
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	f8 94       	cli
     6fe:	de bf       	out	0x3e, r29	; 62
     700:	0f be       	out	0x3f, r0	; 63
     702:	cd bf       	out	0x3d, r28	; 61
     704:	cf 91       	pop	r28
     706:	df 91       	pop	r29
     708:	08 95       	ret

0000070a <DIO_u8GetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPortVal(uint8_t u8_PortNum,uint8_t* pu8_ReturnedPortVal)           
{
     70a:	df 93       	push	r29
     70c:	cf 93       	push	r28
     70e:	00 d0       	rcall	.+0      	; 0x710 <DIO_u8GetPortVal+0x6>
     710:	00 d0       	rcall	.+0      	; 0x712 <DIO_u8GetPortVal+0x8>
     712:	00 d0       	rcall	.+0      	; 0x714 <DIO_u8GetPortVal+0xa>
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	8a 83       	std	Y+2, r24	; 0x02
     71a:	7c 83       	std	Y+4, r23	; 0x04
     71c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorState = u8_DIO_OK;
     71e:	82 e0       	ldi	r24, 0x02	; 2
     720:	89 83       	std	Y+1, r24	; 0x01

	switch(u8_PortNum)
     722:	8a 81       	ldd	r24, Y+2	; 0x02
     724:	28 2f       	mov	r18, r24
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	3e 83       	std	Y+6, r19	; 0x06
     72a:	2d 83       	std	Y+5, r18	; 0x05
     72c:	8d 81       	ldd	r24, Y+5	; 0x05
     72e:	9e 81       	ldd	r25, Y+6	; 0x06
     730:	89 30       	cpi	r24, 0x09	; 9
     732:	91 05       	cpc	r25, r1
     734:	e9 f0       	breq	.+58     	; 0x770 <DIO_u8GetPortVal+0x66>
     736:	2d 81       	ldd	r18, Y+5	; 0x05
     738:	3e 81       	ldd	r19, Y+6	; 0x06
     73a:	2a 30       	cpi	r18, 0x0A	; 10
     73c:	31 05       	cpc	r19, r1
     73e:	34 f4       	brge	.+12     	; 0x74c <DIO_u8GetPortVal+0x42>
     740:	8d 81       	ldd	r24, Y+5	; 0x05
     742:	9e 81       	ldd	r25, Y+6	; 0x06
     744:	88 30       	cpi	r24, 0x08	; 8
     746:	91 05       	cpc	r25, r1
     748:	61 f0       	breq	.+24     	; 0x762 <DIO_u8GetPortVal+0x58>
     74a:	27 c0       	rjmp	.+78     	; 0x79a <DIO_u8GetPortVal+0x90>
     74c:	2d 81       	ldd	r18, Y+5	; 0x05
     74e:	3e 81       	ldd	r19, Y+6	; 0x06
     750:	2a 30       	cpi	r18, 0x0A	; 10
     752:	31 05       	cpc	r19, r1
     754:	a1 f0       	breq	.+40     	; 0x77e <DIO_u8GetPortVal+0x74>
     756:	8d 81       	ldd	r24, Y+5	; 0x05
     758:	9e 81       	ldd	r25, Y+6	; 0x06
     75a:	8b 30       	cpi	r24, 0x0B	; 11
     75c:	91 05       	cpc	r25, r1
     75e:	b1 f0       	breq	.+44     	; 0x78c <DIO_u8GetPortVal+0x82>
     760:	1c c0       	rjmp	.+56     	; 0x79a <DIO_u8GetPortVal+0x90>
	{
		case u8_DIO_PORTA: (*pu8_ReturnedPortVal) = Ru8_PINA ;  break ;
     762:	e9 e3       	ldi	r30, 0x39	; 57
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	eb 81       	ldd	r30, Y+3	; 0x03
     76a:	fc 81       	ldd	r31, Y+4	; 0x04
     76c:	80 83       	st	Z, r24
     76e:	17 c0       	rjmp	.+46     	; 0x79e <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTB: (*pu8_ReturnedPortVal) = Ru8_PINB ;  break ;
     770:	e6 e3       	ldi	r30, 0x36	; 54
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	eb 81       	ldd	r30, Y+3	; 0x03
     778:	fc 81       	ldd	r31, Y+4	; 0x04
     77a:	80 83       	st	Z, r24
     77c:	10 c0       	rjmp	.+32     	; 0x79e <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTC: (*pu8_ReturnedPortVal) = Ru8_PINC ;  break ;
     77e:	e3 e3       	ldi	r30, 0x33	; 51
     780:	f0 e0       	ldi	r31, 0x00	; 0
     782:	80 81       	ld	r24, Z
     784:	eb 81       	ldd	r30, Y+3	; 0x03
     786:	fc 81       	ldd	r31, Y+4	; 0x04
     788:	80 83       	st	Z, r24
     78a:	09 c0       	rjmp	.+18     	; 0x79e <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTD: (*pu8_ReturnedPortVal) = Ru8_PIND ;  break ;
     78c:	e0 e3       	ldi	r30, 0x30	; 48
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	80 81       	ld	r24, Z
     792:	eb 81       	ldd	r30, Y+3	; 0x03
     794:	fc 81       	ldd	r31, Y+4	; 0x04
     796:	80 83       	st	Z, r24
     798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_u8GetPortVal+0x94>
		default          :  u8_ErrorState = u8_DIO_NOK; 	    break ;
     79a:	83 e0       	ldi	r24, 0x03	; 3
     79c:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_ErrorState  ; 
     79e:	89 81       	ldd	r24, Y+1	; 0x01
}
     7a0:	26 96       	adiw	r28, 0x06	; 6
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	f8 94       	cli
     7a6:	de bf       	out	0x3e, r29	; 62
     7a8:	0f be       	out	0x3f, r0	; 63
     7aa:	cd bf       	out	0x3d, r28	; 61
     7ac:	cf 91       	pop	r28
     7ae:	df 91       	pop	r29
     7b0:	08 95       	ret

000007b2 <DIO_u8TogPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8TogPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum)           
{
     7b2:	df 93       	push	r29
     7b4:	cf 93       	push	r28
     7b6:	00 d0       	rcall	.+0      	; 0x7b8 <DIO_u8TogPinVal+0x6>
     7b8:	00 d0       	rcall	.+0      	; 0x7ba <DIO_u8TogPinVal+0x8>
     7ba:	0f 92       	push	r0
     7bc:	cd b7       	in	r28, 0x3d	; 61
     7be:	de b7       	in	r29, 0x3e	; 62
     7c0:	8a 83       	std	Y+2, r24	; 0x02
     7c2:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	88 30       	cpi	r24, 0x08	; 8
     7cc:	08 f0       	brcs	.+2      	; 0x7d0 <DIO_u8TogPinVal+0x1e>
     7ce:	73 c0       	rjmp	.+230    	; 0x8b6 <__stack+0x57>
		{
			switch(u8_PortNum)
     7d0:	8a 81       	ldd	r24, Y+2	; 0x02
     7d2:	28 2f       	mov	r18, r24
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	3d 83       	std	Y+5, r19	; 0x05
     7d8:	2c 83       	std	Y+4, r18	; 0x04
     7da:	8c 81       	ldd	r24, Y+4	; 0x04
     7dc:	9d 81       	ldd	r25, Y+5	; 0x05
     7de:	89 30       	cpi	r24, 0x09	; 9
     7e0:	91 05       	cpc	r25, r1
     7e2:	51 f1       	breq	.+84     	; 0x838 <DIO_u8TogPinVal+0x86>
     7e4:	2c 81       	ldd	r18, Y+4	; 0x04
     7e6:	3d 81       	ldd	r19, Y+5	; 0x05
     7e8:	2a 30       	cpi	r18, 0x0A	; 10
     7ea:	31 05       	cpc	r19, r1
     7ec:	34 f4       	brge	.+12     	; 0x7fa <DIO_u8TogPinVal+0x48>
     7ee:	8c 81       	ldd	r24, Y+4	; 0x04
     7f0:	9d 81       	ldd	r25, Y+5	; 0x05
     7f2:	88 30       	cpi	r24, 0x08	; 8
     7f4:	91 05       	cpc	r25, r1
     7f6:	61 f0       	breq	.+24     	; 0x810 <DIO_u8TogPinVal+0x5e>
     7f8:	5b c0       	rjmp	.+182    	; 0x8b0 <__stack+0x51>
     7fa:	2c 81       	ldd	r18, Y+4	; 0x04
     7fc:	3d 81       	ldd	r19, Y+5	; 0x05
     7fe:	2a 30       	cpi	r18, 0x0A	; 10
     800:	31 05       	cpc	r19, r1
     802:	71 f1       	breq	.+92     	; 0x860 <__stack+0x1>
     804:	8c 81       	ldd	r24, Y+4	; 0x04
     806:	9d 81       	ldd	r25, Y+5	; 0x05
     808:	8b 30       	cpi	r24, 0x0B	; 11
     80a:	91 05       	cpc	r25, r1
     80c:	e9 f1       	breq	.+122    	; 0x888 <__stack+0x29>
     80e:	50 c0       	rjmp	.+160    	; 0x8b0 <__stack+0x51>
			{
				case u8_DIO_PORTA: TOG_BIT(Ru8_PORTA,u8_PinNum) ;  break ;
     810:	ab e3       	ldi	r26, 0x3B	; 59
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	eb e3       	ldi	r30, 0x3B	; 59
     816:	f0 e0       	ldi	r31, 0x00	; 0
     818:	80 81       	ld	r24, Z
     81a:	48 2f       	mov	r20, r24
     81c:	8b 81       	ldd	r24, Y+3	; 0x03
     81e:	28 2f       	mov	r18, r24
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	02 2e       	mov	r0, r18
     828:	02 c0       	rjmp	.+4      	; 0x82e <DIO_u8TogPinVal+0x7c>
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	0a 94       	dec	r0
     830:	e2 f7       	brpl	.-8      	; 0x82a <DIO_u8TogPinVal+0x78>
     832:	84 27       	eor	r24, r20
     834:	8c 93       	st	X, r24
     836:	41 c0       	rjmp	.+130    	; 0x8ba <__stack+0x5b>
				case u8_DIO_PORTB: TOG_BIT(Ru8_PORTB,u8_PinNum) ;  break ;
     838:	a8 e3       	ldi	r26, 0x38	; 56
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	e8 e3       	ldi	r30, 0x38	; 56
     83e:	f0 e0       	ldi	r31, 0x00	; 0
     840:	80 81       	ld	r24, Z
     842:	48 2f       	mov	r20, r24
     844:	8b 81       	ldd	r24, Y+3	; 0x03
     846:	28 2f       	mov	r18, r24
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	02 2e       	mov	r0, r18
     850:	02 c0       	rjmp	.+4      	; 0x856 <DIO_u8TogPinVal+0xa4>
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	0a 94       	dec	r0
     858:	e2 f7       	brpl	.-8      	; 0x852 <DIO_u8TogPinVal+0xa0>
     85a:	84 27       	eor	r24, r20
     85c:	8c 93       	st	X, r24
     85e:	2d c0       	rjmp	.+90     	; 0x8ba <__stack+0x5b>
				case u8_DIO_PORTC: TOG_BIT(Ru8_PORTC,u8_PinNum) ;  break ;
     860:	a5 e3       	ldi	r26, 0x35	; 53
     862:	b0 e0       	ldi	r27, 0x00	; 0
     864:	e5 e3       	ldi	r30, 0x35	; 53
     866:	f0 e0       	ldi	r31, 0x00	; 0
     868:	80 81       	ld	r24, Z
     86a:	48 2f       	mov	r20, r24
     86c:	8b 81       	ldd	r24, Y+3	; 0x03
     86e:	28 2f       	mov	r18, r24
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	02 2e       	mov	r0, r18
     878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	0a 94       	dec	r0
     880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
     882:	84 27       	eor	r24, r20
     884:	8c 93       	st	X, r24
     886:	19 c0       	rjmp	.+50     	; 0x8ba <__stack+0x5b>
				case u8_DIO_PORTD: TOG_BIT(Ru8_PORTD,u8_PinNum) ;  break ;
     888:	a2 e3       	ldi	r26, 0x32	; 50
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	e2 e3       	ldi	r30, 0x32	; 50
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	48 2f       	mov	r20, r24
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	28 2f       	mov	r18, r24
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	02 2e       	mov	r0, r18
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	0a 94       	dec	r0
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
     8aa:	84 27       	eor	r24, r20
     8ac:	8c 93       	st	X, r24
     8ae:	05 c0       	rjmp	.+10     	; 0x8ba <__stack+0x5b>
				default          :  u8_ErrorState = u8_DIO_NOK;   break ; 
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	89 83       	std	Y+1, r24	; 0x01
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <__stack+0x5b>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
     8b6:	83 e0       	ldi	r24, 0x03	; 3
     8b8:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
     8ba:	89 81       	ldd	r24, Y+1	; 0x01
}
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	cf 91       	pop	r28
     8c8:	df 91       	pop	r29
     8ca:	08 95       	ret

000008cc <DIO_voidDisablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidDisablePullUps(void)   
{
     8cc:	df 93       	push	r29
     8ce:	cf 93       	push	r28
     8d0:	cd b7       	in	r28, 0x3d	; 61
     8d2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(Ru8_SFIOR,u8_PUD) ;
     8d4:	a0 e5       	ldi	r26, 0x50	; 80
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	e0 e5       	ldi	r30, 0x50	; 80
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	80 81       	ld	r24, Z
     8de:	84 60       	ori	r24, 0x04	; 4
     8e0:	8c 93       	st	X, r24
}
     8e2:	cf 91       	pop	r28
     8e4:	df 91       	pop	r29
     8e6:	08 95       	ret

000008e8 <DIO_voidEnablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidEnablePullUps(void)  
{
     8e8:	df 93       	push	r29
     8ea:	cf 93       	push	r28
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_SFIOR,u8_PUD) ;
     8f0:	a0 e5       	ldi	r26, 0x50	; 80
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	e0 e5       	ldi	r30, 0x50	; 80
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	80 81       	ld	r24, Z
     8fa:	8b 7f       	andi	r24, 0xFB	; 251
     8fc:	8c 93       	st	X, r24
}
     8fe:	cf 91       	pop	r28
     900:	df 91       	pop	r29
     902:	08 95       	ret

00000904 <TIMERS_voidInit>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////


void TIMERS_voidInit(void)
{
     904:	df 93       	push	r29
     906:	cf 93       	push	r28
     908:	cd b7       	in	r28, 0x3d	; 61
     90a:	de b7       	in	r29, 0x3e	; 62
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE
		CLR_BIT(Ru8_TCCR0,u8_WGM00_BIT) ;
     90c:	a3 e5       	ldi	r26, 0x53	; 83
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	e3 e5       	ldi	r30, 0x53	; 83
     912:	f0 e0       	ldi	r31, 0x00	; 0
     914:	80 81       	ld	r24, Z
     916:	8f 7b       	andi	r24, 0xBF	; 191
     918:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_WGM01_BIT) ;
     91a:	a3 e5       	ldi	r26, 0x53	; 83
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	e3 e5       	ldi	r30, 0x53	; 83
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	87 7f       	andi	r24, 0xF7	; 247
     926:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_FOC0_BIT) ;
     928:	a3 e5       	ldi	r26, 0x53	; 83
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	e3 e5       	ldi	r30, 0x53	; 83
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	8f 77       	andi	r24, 0x7F	; 127
     934:	8c 93       	st	X, r24
	
	
	
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE||u8_TIMER0_MODE_CONFIG==u8_CTC_MODE
		#if u8_TIMER0_COMP_MATCH_NON_PWM_CONFIG==u8_OC0_DISCONNECTED
			CLR_BIT(Ru8_TCCR0,u8_COM00_BIT) ;
     936:	a3 e5       	ldi	r26, 0x53	; 83
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	e3 e5       	ldi	r30, 0x53	; 83
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	8f 7d       	andi	r24, 0xDF	; 223
     942:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_COM01_BIT) ;
     944:	a3 e5       	ldi	r26, 0x53	; 83
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e3 e5       	ldi	r30, 0x53	; 83
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	8f 7e       	andi	r24, 0xEF	; 239
     950:	8c 93       	st	X, r24
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_NO_PRE
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
		CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_PRE_8
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     952:	a3 e5       	ldi	r26, 0x53	; 83
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	e3 e5       	ldi	r30, 0x53	; 83
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	8b 7f       	andi	r24, 0xFB	; 251
     95e:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     960:	a3 e5       	ldi	r26, 0x53	; 83
     962:	b0 e0       	ldi	r27, 0x00	; 0
     964:	e3 e5       	ldi	r30, 0x53	; 83
     966:	f0 e0       	ldi	r31, 0x00	; 0
     968:	80 81       	ld	r24, Z
     96a:	82 60       	ori	r24, 0x02	; 2
     96c:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     96e:	a3 e5       	ldi	r26, 0x53	; 83
     970:	b0 e0       	ldi	r27, 0x00	; 0
     972:	e3 e5       	ldi	r30, 0x53	; 83
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	80 81       	ld	r24, Z
     978:	8e 7f       	andi	r24, 0xFE	; 254
     97a:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#else
		#error "wrong clock select config"
	#endif

}
     97c:	cf 91       	pop	r28
     97e:	df 91       	pop	r29
     980:	08 95       	ret

00000982 <TIMER0_u8StartWithclockAndPrescalerSelect>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8StartWithclockAndPrescalerSelect(uint8_t u8_preScallerVal) 
{
     982:	df 93       	push	r29
     984:	cf 93       	push	r28
     986:	00 d0       	rcall	.+0      	; 0x988 <TIMER0_u8StartWithclockAndPrescalerSelect+0x6>
     988:	00 d0       	rcall	.+0      	; 0x98a <TIMER0_u8StartWithclockAndPrescalerSelect+0x8>
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_preScallerVal)
     994:	8a 81       	ldd	r24, Y+2	; 0x02
     996:	28 2f       	mov	r18, r24
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	3c 83       	std	Y+4, r19	; 0x04
     99c:	2b 83       	std	Y+3, r18	; 0x03
     99e:	8b 81       	ldd	r24, Y+3	; 0x03
     9a0:	9c 81       	ldd	r25, Y+4	; 0x04
     9a2:	89 30       	cpi	r24, 0x09	; 9
     9a4:	91 05       	cpc	r25, r1
     9a6:	09 f4       	brne	.+2      	; 0x9aa <TIMER0_u8StartWithclockAndPrescalerSelect+0x28>
     9a8:	6b c0       	rjmp	.+214    	; 0xa80 <TIMER0_u8StartWithclockAndPrescalerSelect+0xfe>
     9aa:	2b 81       	ldd	r18, Y+3	; 0x03
     9ac:	3c 81       	ldd	r19, Y+4	; 0x04
     9ae:	2a 30       	cpi	r18, 0x0A	; 10
     9b0:	31 05       	cpc	r19, r1
     9b2:	8c f4       	brge	.+34     	; 0x9d6 <TIMER0_u8StartWithclockAndPrescalerSelect+0x54>
     9b4:	8b 81       	ldd	r24, Y+3	; 0x03
     9b6:	9c 81       	ldd	r25, Y+4	; 0x04
     9b8:	87 30       	cpi	r24, 0x07	; 7
     9ba:	91 05       	cpc	r25, r1
     9bc:	a9 f1       	breq	.+106    	; 0xa28 <TIMER0_u8StartWithclockAndPrescalerSelect+0xa6>
     9be:	2b 81       	ldd	r18, Y+3	; 0x03
     9c0:	3c 81       	ldd	r19, Y+4	; 0x04
     9c2:	28 30       	cpi	r18, 0x08	; 8
     9c4:	31 05       	cpc	r19, r1
     9c6:	0c f0       	brlt	.+2      	; 0x9ca <TIMER0_u8StartWithclockAndPrescalerSelect+0x48>
     9c8:	45 c0       	rjmp	.+138    	; 0xa54 <TIMER0_u8StartWithclockAndPrescalerSelect+0xd2>
     9ca:	8b 81       	ldd	r24, Y+3	; 0x03
     9cc:	9c 81       	ldd	r25, Y+4	; 0x04
     9ce:	86 30       	cpi	r24, 0x06	; 6
     9d0:	91 05       	cpc	r25, r1
     9d2:	a1 f0       	breq	.+40     	; 0x9fc <TIMER0_u8StartWithclockAndPrescalerSelect+0x7a>
     9d4:	ad c0       	rjmp	.+346    	; 0xb30 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
     9d6:	2b 81       	ldd	r18, Y+3	; 0x03
     9d8:	3c 81       	ldd	r19, Y+4	; 0x04
     9da:	2b 30       	cpi	r18, 0x0B	; 11
     9dc:	31 05       	cpc	r19, r1
     9de:	09 f4       	brne	.+2      	; 0x9e2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x60>
     9e0:	7b c0       	rjmp	.+246    	; 0xad8 <TIMER0_u8StartWithclockAndPrescalerSelect+0x156>
     9e2:	8b 81       	ldd	r24, Y+3	; 0x03
     9e4:	9c 81       	ldd	r25, Y+4	; 0x04
     9e6:	8b 30       	cpi	r24, 0x0B	; 11
     9e8:	91 05       	cpc	r25, r1
     9ea:	0c f4       	brge	.+2      	; 0x9ee <TIMER0_u8StartWithclockAndPrescalerSelect+0x6c>
     9ec:	5f c0       	rjmp	.+190    	; 0xaac <TIMER0_u8StartWithclockAndPrescalerSelect+0x12a>
     9ee:	2b 81       	ldd	r18, Y+3	; 0x03
     9f0:	3c 81       	ldd	r19, Y+4	; 0x04
     9f2:	2c 30       	cpi	r18, 0x0C	; 12
     9f4:	31 05       	cpc	r19, r1
     9f6:	09 f4       	brne	.+2      	; 0x9fa <TIMER0_u8StartWithclockAndPrescalerSelect+0x78>
     9f8:	85 c0       	rjmp	.+266    	; 0xb04 <TIMER0_u8StartWithclockAndPrescalerSelect+0x182>
     9fa:	9a c0       	rjmp	.+308    	; 0xb30 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
	{
		case u8_INTERNAL_CLK_NO_PRE:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     9fc:	a3 e5       	ldi	r26, 0x53	; 83
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	e3 e5       	ldi	r30, 0x53	; 83
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	80 81       	ld	r24, Z
     a06:	8b 7f       	andi	r24, 0xFB	; 251
     a08:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     a0a:	a3 e5       	ldi	r26, 0x53	; 83
     a0c:	b0 e0       	ldi	r27, 0x00	; 0
     a0e:	e3 e5       	ldi	r30, 0x53	; 83
     a10:	f0 e0       	ldi	r31, 0x00	; 0
     a12:	80 81       	ld	r24, Z
     a14:	8d 7f       	andi	r24, 0xFD	; 253
     a16:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     a18:	a3 e5       	ldi	r26, 0x53	; 83
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	e3 e5       	ldi	r30, 0x53	; 83
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	81 60       	ori	r24, 0x01	; 1
     a24:	8c 93       	st	X, r24
     a26:	85 c0       	rjmp	.+266    	; 0xb32 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_8:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     a28:	a3 e5       	ldi	r26, 0x53	; 83
     a2a:	b0 e0       	ldi	r27, 0x00	; 0
     a2c:	e3 e5       	ldi	r30, 0x53	; 83
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	8b 7f       	andi	r24, 0xFB	; 251
     a34:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     a36:	a3 e5       	ldi	r26, 0x53	; 83
     a38:	b0 e0       	ldi	r27, 0x00	; 0
     a3a:	e3 e5       	ldi	r30, 0x53	; 83
     a3c:	f0 e0       	ldi	r31, 0x00	; 0
     a3e:	80 81       	ld	r24, Z
     a40:	82 60       	ori	r24, 0x02	; 2
     a42:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     a44:	a3 e5       	ldi	r26, 0x53	; 83
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	e3 e5       	ldi	r30, 0x53	; 83
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	8e 7f       	andi	r24, 0xFE	; 254
     a50:	8c 93       	st	X, r24
     a52:	6f c0       	rjmp	.+222    	; 0xb32 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_64:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     a54:	a3 e5       	ldi	r26, 0x53	; 83
     a56:	b0 e0       	ldi	r27, 0x00	; 0
     a58:	e3 e5       	ldi	r30, 0x53	; 83
     a5a:	f0 e0       	ldi	r31, 0x00	; 0
     a5c:	80 81       	ld	r24, Z
     a5e:	8b 7f       	andi	r24, 0xFB	; 251
     a60:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     a62:	a3 e5       	ldi	r26, 0x53	; 83
     a64:	b0 e0       	ldi	r27, 0x00	; 0
     a66:	e3 e5       	ldi	r30, 0x53	; 83
     a68:	f0 e0       	ldi	r31, 0x00	; 0
     a6a:	80 81       	ld	r24, Z
     a6c:	82 60       	ori	r24, 0x02	; 2
     a6e:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     a70:	a3 e5       	ldi	r26, 0x53	; 83
     a72:	b0 e0       	ldi	r27, 0x00	; 0
     a74:	e3 e5       	ldi	r30, 0x53	; 83
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	80 81       	ld	r24, Z
     a7a:	81 60       	ori	r24, 0x01	; 1
     a7c:	8c 93       	st	X, r24
     a7e:	59 c0       	rjmp	.+178    	; 0xb32 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_INTERNAL_CLK_PRE_256:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     a80:	a3 e5       	ldi	r26, 0x53	; 83
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	e3 e5       	ldi	r30, 0x53	; 83
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	80 81       	ld	r24, Z
     a8a:	84 60       	ori	r24, 0x04	; 4
     a8c:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     a8e:	a3 e5       	ldi	r26, 0x53	; 83
     a90:	b0 e0       	ldi	r27, 0x00	; 0
     a92:	e3 e5       	ldi	r30, 0x53	; 83
     a94:	f0 e0       	ldi	r31, 0x00	; 0
     a96:	80 81       	ld	r24, Z
     a98:	8d 7f       	andi	r24, 0xFD	; 253
     a9a:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     a9c:	a3 e5       	ldi	r26, 0x53	; 83
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e3 e5       	ldi	r30, 0x53	; 83
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	80 81       	ld	r24, Z
     aa6:	8e 7f       	andi	r24, 0xFE	; 254
     aa8:	8c 93       	st	X, r24
     aaa:	43 c0       	rjmp	.+134    	; 0xb32 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_1024:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     aac:	a3 e5       	ldi	r26, 0x53	; 83
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	e3 e5       	ldi	r30, 0x53	; 83
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	84 60       	ori	r24, 0x04	; 4
     ab8:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     aba:	a3 e5       	ldi	r26, 0x53	; 83
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	e3 e5       	ldi	r30, 0x53	; 83
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	8d 7f       	andi	r24, 0xFD	; 253
     ac6:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     ac8:	a3 e5       	ldi	r26, 0x53	; 83
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	e3 e5       	ldi	r30, 0x53	; 83
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	81 60       	ori	r24, 0x01	; 1
     ad4:	8c 93       	st	X, r24
     ad6:	2d c0       	rjmp	.+90     	; 0xb32 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_FALLING : 
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     ad8:	a3 e5       	ldi	r26, 0x53	; 83
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	e3 e5       	ldi	r30, 0x53	; 83
     ade:	f0 e0       	ldi	r31, 0x00	; 0
     ae0:	80 81       	ld	r24, Z
     ae2:	84 60       	ori	r24, 0x04	; 4
     ae4:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     ae6:	a3 e5       	ldi	r26, 0x53	; 83
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	e3 e5       	ldi	r30, 0x53	; 83
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	82 60       	ori	r24, 0x02	; 2
     af2:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     af4:	a3 e5       	ldi	r26, 0x53	; 83
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	e3 e5       	ldi	r30, 0x53	; 83
     afa:	f0 e0       	ldi	r31, 0x00	; 0
     afc:	80 81       	ld	r24, Z
     afe:	8e 7f       	andi	r24, 0xFE	; 254
     b00:	8c 93       	st	X, r24
     b02:	17 c0       	rjmp	.+46     	; 0xb32 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_RISING:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     b04:	a3 e5       	ldi	r26, 0x53	; 83
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	e3 e5       	ldi	r30, 0x53	; 83
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	80 81       	ld	r24, Z
     b0e:	84 60       	ori	r24, 0x04	; 4
     b10:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     b12:	a3 e5       	ldi	r26, 0x53	; 83
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	e3 e5       	ldi	r30, 0x53	; 83
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	82 60       	ori	r24, 0x02	; 2
     b1e:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     b20:	a3 e5       	ldi	r26, 0x53	; 83
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	e3 e5       	ldi	r30, 0x53	; 83
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	80 81       	ld	r24, Z
     b2a:	81 60       	ori	r24, 0x01	; 1
     b2c:	8c 93       	st	X, r24
     b2e:	01 c0       	rjmp	.+2      	; 0xb32 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		
		default : u8_ErrorFlag = u8_NOK ; 
     b30:	19 82       	std	Y+1, r1	; 0x01
		break ;
	}
	return u8_ErrorFlag ; 
     b32:	89 81       	ldd	r24, Y+1	; 0x01
}
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	cf 91       	pop	r28
     b3e:	df 91       	pop	r29
     b40:	08 95       	ret

00000b42 <TIMER0_voidstop>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TIMER0_voidstop(void)
{
     b42:	df 93       	push	r29
     b44:	cf 93       	push	r28
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     b4a:	a3 e5       	ldi	r26, 0x53	; 83
     b4c:	b0 e0       	ldi	r27, 0x00	; 0
     b4e:	e3 e5       	ldi	r30, 0x53	; 83
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	80 81       	ld	r24, Z
     b54:	8b 7f       	andi	r24, 0xFB	; 251
     b56:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     b58:	a3 e5       	ldi	r26, 0x53	; 83
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e3 e5       	ldi	r30, 0x53	; 83
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8d 7f       	andi	r24, 0xFD	; 253
     b64:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     b66:	a3 e5       	ldi	r26, 0x53	; 83
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e3 e5       	ldi	r30, 0x53	; 83
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	8e 7f       	andi	r24, 0xFE	; 254
     b72:	8c 93       	st	X, r24
}
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <TIMERS_u8ClearIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8ClearIntFlag(uint8_t u8_wantedIntClearFlag)
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	00 d0       	rcall	.+0      	; 0xb80 <TIMERS_u8ClearIntFlag+0x6>
     b80:	00 d0       	rcall	.+0      	; 0xb82 <TIMERS_u8ClearIntFlag+0x8>
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
     b86:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t u8_ErrorFlag = u8_OK ; 
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
     b8c:	8a 81       	ldd	r24, Y+2	; 0x02
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	3c 83       	std	Y+4, r19	; 0x04
     b94:	2b 83       	std	Y+3, r18	; 0x03
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	81 31       	cpi	r24, 0x11	; 17
     b9c:	91 05       	cpc	r25, r1
     b9e:	31 f0       	breq	.+12     	; 0xbac <TIMERS_u8ClearIntFlag+0x32>
     ba0:	2b 81       	ldd	r18, Y+3	; 0x03
     ba2:	3c 81       	ldd	r19, Y+4	; 0x04
     ba4:	22 31       	cpi	r18, 0x12	; 18
     ba6:	31 05       	cpc	r19, r1
     ba8:	49 f0       	breq	.+18     	; 0xbbc <TIMERS_u8ClearIntFlag+0x42>
     baa:	10 c0       	rjmp	.+32     	; 0xbcc <TIMERS_u8ClearIntFlag+0x52>
	{
		case u8_TIMER0_OVER_FLOW			: SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     bac:	a8 e5       	ldi	r26, 0x58	; 88
     bae:	b0 e0       	ldi	r27, 0x00	; 0
     bb0:	e8 e5       	ldi	r30, 0x58	; 88
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	81 60       	ori	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	09 c0       	rjmp	.+18     	; 0xbce <TIMERS_u8ClearIntFlag+0x54>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     bbc:	a8 e5       	ldi	r26, 0x58	; 88
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e8 e5       	ldi	r30, 0x58	; 88
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	82 60       	ori	r24, 0x02	; 2
     bc8:	8c 93       	st	X, r24
     bca:	01 c0       	rjmp	.+2      	; 0xbce <TIMERS_u8ClearIntFlag+0x54>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
     bcc:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
     bce:	89 81       	ldd	r24, Y+1	; 0x01
}
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <TIMERS_u8GetIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8GetIntFlag(uint8_t u8_wantedIntClearFlag,uint8_t* pu8_retturnIntFlag)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	00 d0       	rcall	.+0      	; 0xbe4 <TIMERS_u8GetIntFlag+0x6>
     be4:	00 d0       	rcall	.+0      	; 0xbe6 <TIMERS_u8GetIntFlag+0x8>
     be6:	00 d0       	rcall	.+0      	; 0xbe8 <TIMERS_u8GetIntFlag+0xa>
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	8a 83       	std	Y+2, r24	; 0x02
     bee:	7c 83       	std	Y+4, r23	; 0x04
     bf0:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorFlag = u8_OK ; 
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	3e 83       	std	Y+6, r19	; 0x06
     bfe:	2d 83       	std	Y+5, r18	; 0x05
     c00:	8d 81       	ldd	r24, Y+5	; 0x05
     c02:	9e 81       	ldd	r25, Y+6	; 0x06
     c04:	81 31       	cpi	r24, 0x11	; 17
     c06:	91 05       	cpc	r25, r1
     c08:	31 f0       	breq	.+12     	; 0xc16 <TIMERS_u8GetIntFlag+0x38>
     c0a:	2d 81       	ldd	r18, Y+5	; 0x05
     c0c:	3e 81       	ldd	r19, Y+6	; 0x06
     c0e:	22 31       	cpi	r18, 0x12	; 18
     c10:	31 05       	cpc	r19, r1
     c12:	49 f0       	breq	.+18     	; 0xc26 <TIMERS_u8GetIntFlag+0x48>
     c14:	11 c0       	rjmp	.+34     	; 0xc38 <TIMERS_u8GetIntFlag+0x5a>
	{
		case u8_TIMER0_OVER_FLOW			: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     c16:	e8 e5       	ldi	r30, 0x58	; 88
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	81 70       	andi	r24, 0x01	; 1
     c1e:	eb 81       	ldd	r30, Y+3	; 0x03
     c20:	fc 81       	ldd	r31, Y+4	; 0x04
     c22:	80 83       	st	Z, r24
     c24:	0a c0       	rjmp	.+20     	; 0xc3a <TIMERS_u8GetIntFlag+0x5c>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     c26:	e8 e5       	ldi	r30, 0x58	; 88
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	80 81       	ld	r24, Z
     c2c:	86 95       	lsr	r24
     c2e:	81 70       	andi	r24, 0x01	; 1
     c30:	eb 81       	ldd	r30, Y+3	; 0x03
     c32:	fc 81       	ldd	r31, Y+4	; 0x04
     c34:	80 83       	st	Z, r24
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <TIMERS_u8GetIntFlag+0x5c>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
     c38:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c3c:	26 96       	adiw	r28, 0x06	; 6
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
     c48:	cf 91       	pop	r28
     c4a:	df 91       	pop	r29
     c4c:	08 95       	ret

00000c4e <TIMERS_u8IntModesEn>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesEn(uint8_t u8_wantedIntModeEn)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	00 d0       	rcall	.+0      	; 0xc54 <TIMERS_u8IntModesEn+0x6>
     c54:	00 d0       	rcall	.+0      	; 0xc56 <TIMERS_u8IntModesEn+0x8>
     c56:	cd b7       	in	r28, 0x3d	; 61
     c58:	de b7       	in	r29, 0x3e	; 62
     c5a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeEn)
     c60:	8a 81       	ldd	r24, Y+2	; 0x02
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	3c 83       	std	Y+4, r19	; 0x04
     c68:	2b 83       	std	Y+3, r18	; 0x03
     c6a:	8b 81       	ldd	r24, Y+3	; 0x03
     c6c:	9c 81       	ldd	r25, Y+4	; 0x04
     c6e:	81 31       	cpi	r24, 0x11	; 17
     c70:	91 05       	cpc	r25, r1
     c72:	31 f0       	breq	.+12     	; 0xc80 <TIMERS_u8IntModesEn+0x32>
     c74:	2b 81       	ldd	r18, Y+3	; 0x03
     c76:	3c 81       	ldd	r19, Y+4	; 0x04
     c78:	22 31       	cpi	r18, 0x12	; 18
     c7a:	31 05       	cpc	r19, r1
     c7c:	81 f0       	breq	.+32     	; 0xc9e <TIMERS_u8IntModesEn+0x50>
     c7e:	1e c0       	rjmp	.+60     	; 0xcbc <TIMERS_u8IntModesEn+0x6e>
	{
		case u8_TIMER0_OVER_FLOW			:  SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
     c80:	a8 e5       	ldi	r26, 0x58	; 88
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	e8 e5       	ldi	r30, 0x58	; 88
     c86:	f0 e0       	ldi	r31, 0x00	; 0
     c88:	80 81       	ld	r24, Z
     c8a:	81 60       	ori	r24, 0x01	; 1
     c8c:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
     c8e:	a9 e5       	ldi	r26, 0x59	; 89
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e9 e5       	ldi	r30, 0x59	; 89
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	81 60       	ori	r24, 0x01	; 1
     c9a:	8c 93       	st	X, r24
     c9c:	10 c0       	rjmp	.+32     	; 0xcbe <TIMERS_u8IntModesEn+0x70>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
     c9e:	a8 e5       	ldi	r26, 0x58	; 88
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e8 e5       	ldi	r30, 0x58	; 88
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	82 60       	ori	r24, 0x02	; 2
     caa:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
     cac:	a9 e5       	ldi	r26, 0x59	; 89
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e9 e5       	ldi	r30, 0x59	; 89
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	82 60       	ori	r24, 0x02	; 2
     cb8:	8c 93       	st	X, r24
     cba:	01 c0       	rjmp	.+2      	; 0xcbe <TIMERS_u8IntModesEn+0x70>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
     cbc:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <TIMERS_u8IntModesDis>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesDis(uint8_t u8_wantedIntModeDis)
{
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	00 d0       	rcall	.+0      	; 0xcd4 <TIMERS_u8IntModesDis+0x6>
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <TIMERS_u8IntModesDis+0x8>
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeDis)
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	3c 83       	std	Y+4, r19	; 0x04
     ce8:	2b 83       	std	Y+3, r18	; 0x03
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	81 31       	cpi	r24, 0x11	; 17
     cf0:	91 05       	cpc	r25, r1
     cf2:	31 f0       	breq	.+12     	; 0xd00 <TIMERS_u8IntModesDis+0x32>
     cf4:	2b 81       	ldd	r18, Y+3	; 0x03
     cf6:	3c 81       	ldd	r19, Y+4	; 0x04
     cf8:	22 31       	cpi	r18, 0x12	; 18
     cfa:	31 05       	cpc	r19, r1
     cfc:	49 f0       	breq	.+18     	; 0xd10 <TIMERS_u8IntModesDis+0x42>
     cfe:	10 c0       	rjmp	.+32     	; 0xd20 <TIMERS_u8IntModesDis+0x52>
	{
		case u8_TIMER0_OVER_FLOW			:  CLR_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
     d00:	a9 e5       	ldi	r26, 0x59	; 89
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e9 e5       	ldi	r30, 0x59	; 89
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	8e 7f       	andi	r24, 0xFE	; 254
     d0c:	8c 93       	st	X, r24
     d0e:	09 c0       	rjmp	.+18     	; 0xd22 <TIMERS_u8IntModesDis+0x54>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  CLR_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
     d10:	a9 e5       	ldi	r26, 0x59	; 89
     d12:	b0 e0       	ldi	r27, 0x00	; 0
     d14:	e9 e5       	ldi	r30, 0x59	; 89
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	8d 7f       	andi	r24, 0xFD	; 253
     d1c:	8c 93       	st	X, r24
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <TIMERS_u8IntModesDis+0x54>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
     d20:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
     d22:	89 81       	ldd	r24, Y+1	; 0x01
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret

00000d32 <Timer0_u8setOverFlowRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setOverFlowRegTicksBeforeOV(uint8_t u8_wantedTicksBeforeOV)
{
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	00 d0       	rcall	.+0      	; 0xd38 <Timer0_u8setOverFlowRegTicksBeforeOV+0x6>
     d38:	0f 92       	push	r0
     d3a:	cd b7       	in	r28, 0x3d	; 61
     d3c:	de b7       	in	r29, 0x3e	; 62
     d3e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_SetTimer0CounterReg ; 
	if(u8_wantedTicksBeforeOV<=u8_MAX_8BIT_REG_HOLD)
	{
		u8_SetTimer0CounterReg = u8_MAX_8BIT_REG_HOLD-u8_wantedTicksBeforeOV ; 
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	80 95       	com	r24
     d48:	89 83       	std	Y+1, r24	; 0x01
		Ru8_TCNT0=u8_SetTimer0CounterReg ;
     d4a:	e2 e5       	ldi	r30, 0x52	; 82
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
     d52:	8a 81       	ldd	r24, Y+2	; 0x02
}
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <Timer0_u8setCompareRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setCompareRegTicksBeforeOV(uint8_t u8_wantedTicksToCompare)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	00 d0       	rcall	.+0      	; 0xd66 <Timer0_u8setCompareRegTicksBeforeOV+0x6>
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	89 83       	std	Y+1, r24	; 0x01
	if(u8_wantedTicksToCompare<=u8_MAX_8BIT_REG_HOLD)
	{
		Ru8_OCR0 = u8_wantedTicksToCompare ;
     d70:	ec e5       	ldi	r30, 0x5C	; 92
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	8a 81       	ldd	r24, Y+2	; 0x02
     d76:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
     d78:	89 81       	ldd	r24, Y+1	; 0x01
}
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <TIMER0_u8setCallBack>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8setCallBack(uint8_t u8_wantedISRModeToSet,void(*ISRFuncToSet)(void)) 
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	00 d0       	rcall	.+0      	; 0xd8a <TIMER0_u8setCallBack+0x6>
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <TIMER0_u8setCallBack+0x8>
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <TIMER0_u8setCallBack+0xa>
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	8a 83       	std	Y+2, r24	; 0x02
     d94:	7c 83       	std	Y+4, r23	; 0x04
     d96:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	89 83       	std	Y+1, r24	; 0x01
	if(ISRFuncToSet!=NULL_POINTER)
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	01 f1       	breq	.+64     	; 0xde4 <TIMER0_u8setCallBack+0x60>
	{
		switch(u8_wantedISRModeToSet)
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	3e 83       	std	Y+6, r19	; 0x06
     dac:	2d 83       	std	Y+5, r18	; 0x05
     dae:	8d 81       	ldd	r24, Y+5	; 0x05
     db0:	9e 81       	ldd	r25, Y+6	; 0x06
     db2:	81 31       	cpi	r24, 0x11	; 17
     db4:	91 05       	cpc	r25, r1
     db6:	31 f0       	breq	.+12     	; 0xdc4 <TIMER0_u8setCallBack+0x40>
     db8:	2d 81       	ldd	r18, Y+5	; 0x05
     dba:	3e 81       	ldd	r19, Y+6	; 0x06
     dbc:	22 31       	cpi	r18, 0x12	; 18
     dbe:	31 05       	cpc	r19, r1
     dc0:	41 f0       	breq	.+16     	; 0xdd2 <TIMER0_u8setCallBack+0x4e>
     dc2:	0e c0       	rjmp	.+28     	; 0xde0 <TIMER0_u8setCallBack+0x5c>
		{
			case u8_TIMER0_OVER_FLOW			:  Timer0OverFlowSetCallBackISR = ISRFuncToSet ; 
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	90 93 65 00 	sts	0x0065, r25
     dcc:	80 93 64 00 	sts	0x0064, r24
     dd0:	0a c0       	rjmp	.+20     	; 0xde6 <TIMER0_u8setCallBack+0x62>
												   break ; 
			case u8_TIMER0_COMPARE_ON_MATCH		:  Timer0CompareMatchSetCallBackISR = ISRFuncToSet ; 
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	9c 81       	ldd	r25, Y+4	; 0x04
     dd6:	90 93 63 00 	sts	0x0063, r25
     dda:	80 93 62 00 	sts	0x0062, r24
     dde:	03 c0       	rjmp	.+6      	; 0xde6 <TIMER0_u8setCallBack+0x62>
											       break ;
			default 							:  u8_ErrorFlag = u8_NOK ; 
     de0:	19 82       	std	Y+1, r1	; 0x01
     de2:	01 c0       	rjmp	.+2      	; 0xde6 <TIMER0_u8setCallBack+0x62>
											       break ; 
		}
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
     de4:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8_ErrorFlag ; 
     de6:	89 81       	ldd	r24, Y+1	; 0x01
}
     de8:	26 96       	adiw	r28, 0x06	; 6
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <__vector_10>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_10 (void)      __attribute__((signal));
void __vector_10 (void)
{
     dfa:	1f 92       	push	r1
     dfc:	0f 92       	push	r0
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	0f 92       	push	r0
     e02:	11 24       	eor	r1, r1
     e04:	2f 93       	push	r18
     e06:	3f 93       	push	r19
     e08:	4f 93       	push	r20
     e0a:	5f 93       	push	r21
     e0c:	6f 93       	push	r22
     e0e:	7f 93       	push	r23
     e10:	8f 93       	push	r24
     e12:	9f 93       	push	r25
     e14:	af 93       	push	r26
     e16:	bf 93       	push	r27
     e18:	ef 93       	push	r30
     e1a:	ff 93       	push	r31
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62
	if(Timer0CompareMatchSetCallBackISR!=NULL_POINTER)
     e24:	80 91 62 00 	lds	r24, 0x0062
     e28:	90 91 63 00 	lds	r25, 0x0063
     e2c:	00 97       	sbiw	r24, 0x00	; 0
     e2e:	29 f0       	breq	.+10     	; 0xe3a <__vector_10+0x40>
	{
		Timer0CompareMatchSetCallBackISR();
     e30:	e0 91 62 00 	lds	r30, 0x0062
     e34:	f0 91 63 00 	lds	r31, 0x0063
     e38:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	ff 91       	pop	r31
     e40:	ef 91       	pop	r30
     e42:	bf 91       	pop	r27
     e44:	af 91       	pop	r26
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	7f 91       	pop	r23
     e4c:	6f 91       	pop	r22
     e4e:	5f 91       	pop	r21
     e50:	4f 91       	pop	r20
     e52:	3f 91       	pop	r19
     e54:	2f 91       	pop	r18
     e56:	0f 90       	pop	r0
     e58:	0f be       	out	0x3f, r0	; 63
     e5a:	0f 90       	pop	r0
     e5c:	1f 90       	pop	r1
     e5e:	18 95       	reti

00000e60 <__vector_11>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_11 (void)      __attribute__((signal));
void __vector_11 (void)
{
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	ef 93       	push	r30
     e80:	ff 93       	push	r31
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	if(Timer0OverFlowSetCallBackISR!=NULL_POINTER)
     e8a:	80 91 64 00 	lds	r24, 0x0064
     e8e:	90 91 65 00 	lds	r25, 0x0065
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	29 f0       	breq	.+10     	; 0xea0 <__vector_11+0x40>
	{
		Timer0OverFlowSetCallBackISR() ;
     e96:	e0 91 64 00 	lds	r30, 0x0064
     e9a:	f0 91 65 00 	lds	r31, 0x0065
     e9e:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	bf 91       	pop	r27
     eaa:	af 91       	pop	r26
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	7f 91       	pop	r23
     eb2:	6f 91       	pop	r22
     eb4:	5f 91       	pop	r21
     eb6:	4f 91       	pop	r20
     eb8:	3f 91       	pop	r19
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <TIMER0_u8BusyWaitMS>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER0_u8BusyWaitMS(uint32_t u32_BusyTimeInMilliSec)
{
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	c9 54       	subi	r28, 0x49	; 73
     ed4:	d0 40       	sbci	r29, 0x00	; 0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	6b 87       	std	Y+11, r22	; 0x0b
     ee2:	7c 87       	std	Y+12, r23	; 0x0c
     ee4:	8d 87       	std	Y+13, r24	; 0x0d
     ee6:	9e 87       	std	Y+14, r25	; 0x0e
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
     ee8:	83 e1       	ldi	r24, 0x13	; 19
     eea:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used== u8_TIMER0_FLAG_NOT_USED)
     eec:	80 91 61 00 	lds	r24, 0x0061
     ef0:	83 31       	cpi	r24, 0x13	; 19
     ef2:	09 f0       	breq	.+2      	; 0xef6 <TIMER0_u8BusyWaitMS+0x30>
     ef4:	c4 c1       	rjmp	.+904    	; 0x127e <TIMER0_u8BusyWaitMS+0x3b8>
	{
		volatile uint64_t u64_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
     ef6:	1a 82       	std	Y+2, r1	; 0x02
     ef8:	1b 82       	std	Y+3, r1	; 0x03
     efa:	1c 82       	std	Y+4, r1	; 0x04
     efc:	1d 82       	std	Y+5, r1	; 0x05
     efe:	1e 82       	std	Y+6, r1	; 0x06
     f00:	1f 82       	std	Y+7, r1	; 0x07
     f02:	18 86       	std	Y+8, r1	; 0x08
     f04:	19 86       	std	Y+9, r1	; 0x09
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
     f06:	81 e1       	ldi	r24, 0x11	; 17
     f08:	0e 94 67 06 	call	0xcce	; 0xcce <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
     f0c:	82 e1       	ldi	r24, 0x12	; 18
     f0e:	0e 94 67 06 	call	0xcce	; 0xcce <TIMERS_u8IntModesDis>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
     f12:	87 e0       	ldi	r24, 0x07	; 7
     f14:	0e 94 c1 04 	call	0x982	; 0x982 <TIMER0_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     f18:	82 e1       	ldi	r24, 0x12	; 18
     f1a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <TIMERS_u8ClearIntFlag>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
     f1e:	8a ef       	ldi	r24, 0xFA	; 250
     f20:	0e 94 b0 06 	call	0xd60	; 0xd60 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	0e 94 99 06 	call	0xd32	; 0xd32 <Timer0_u8setOverFlowRegTicksBeforeOV>
     f2a:	3a c1       	rjmp	.+628    	; 0x11a0 <TIMER0_u8BusyWaitMS+0x2da>
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
		{
			TIMERS_u8GetIntFlag(u8_TIMER0_COMPARE_ON_MATCH,(&u8_CheckCompareFlag)) ;
     f2c:	9e 01       	movw	r18, r28
     f2e:	26 5f       	subi	r18, 0xF6	; 246
     f30:	3f 4f       	sbci	r19, 0xFF	; 255
     f32:	82 e1       	ldi	r24, 0x12	; 18
     f34:	b9 01       	movw	r22, r18
     f36:	0e 94 ef 05 	call	0xbde	; 0xbde <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
     f3a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <TIMER0_u8BusyWaitMS+0x7c>
     f40:	2f c1       	rjmp	.+606    	; 0x11a0 <TIMER0_u8BusyWaitMS+0x2da>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
     f42:	82 e1       	ldi	r24, 0x12	; 18
     f44:	0e 94 bd 05 	call	0xb7a	; 0xb7a <TIMERS_u8ClearIntFlag>
				u64_BusyWaitcounter++ ;
     f48:	0a 81       	ldd	r16, Y+2	; 0x02
     f4a:	0f 8f       	std	Y+31, r16	; 0x1f
     f4c:	1b 81       	ldd	r17, Y+3	; 0x03
     f4e:	18 a3       	std	Y+32, r17	; 0x20
     f50:	2c 81       	ldd	r18, Y+4	; 0x04
     f52:	29 a3       	std	Y+33, r18	; 0x21
     f54:	3d 81       	ldd	r19, Y+5	; 0x05
     f56:	3a a3       	std	Y+34, r19	; 0x22
     f58:	4e 81       	ldd	r20, Y+6	; 0x06
     f5a:	4b a3       	std	Y+35, r20	; 0x23
     f5c:	5f 81       	ldd	r21, Y+7	; 0x07
     f5e:	5c a3       	std	Y+36, r21	; 0x24
     f60:	68 85       	ldd	r22, Y+8	; 0x08
     f62:	6d a3       	std	Y+37, r22	; 0x25
     f64:	79 85       	ldd	r23, Y+9	; 0x09
     f66:	7e a3       	std	Y+38, r23	; 0x26
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	8f a3       	std	Y+39, r24	; 0x27
     f6c:	18 a6       	std	Y+40, r1	; 0x28
     f6e:	19 a6       	std	Y+41, r1	; 0x29
     f70:	1a a6       	std	Y+42, r1	; 0x2a
     f72:	1b a6       	std	Y+43, r1	; 0x2b
     f74:	1c a6       	std	Y+44, r1	; 0x2c
     f76:	1d a6       	std	Y+45, r1	; 0x2d
     f78:	1e a6       	std	Y+46, r1	; 0x2e
     f7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f7c:	0f a1       	ldd	r16, Y+39	; 0x27
     f7e:	90 0f       	add	r25, r16
     f80:	9f a7       	std	Y+47, r25	; 0x2f
     f82:	11 e0       	ldi	r17, 0x01	; 1
     f84:	1f ab       	std	Y+55, r17	; 0x37
     f86:	2f a5       	ldd	r18, Y+47	; 0x2f
     f88:	3f 8d       	ldd	r19, Y+31	; 0x1f
     f8a:	23 17       	cp	r18, r19
     f8c:	08 f0       	brcs	.+2      	; 0xf90 <TIMER0_u8BusyWaitMS+0xca>
     f8e:	1f aa       	std	Y+55, r1	; 0x37
     f90:	48 a1       	ldd	r20, Y+32	; 0x20
     f92:	58 a5       	ldd	r21, Y+40	; 0x28
     f94:	45 0f       	add	r20, r21
     f96:	48 ab       	std	Y+48, r20	; 0x30
     f98:	61 e0       	ldi	r22, 0x01	; 1
     f9a:	68 af       	std	Y+56, r22	; 0x38
     f9c:	78 a9       	ldd	r23, Y+48	; 0x30
     f9e:	88 a1       	ldd	r24, Y+32	; 0x20
     fa0:	78 17       	cp	r23, r24
     fa2:	08 f0       	brcs	.+2      	; 0xfa6 <TIMER0_u8BusyWaitMS+0xe0>
     fa4:	18 ae       	std	Y+56, r1	; 0x38
     fa6:	9f a9       	ldd	r25, Y+55	; 0x37
     fa8:	08 a9       	ldd	r16, Y+48	; 0x30
     faa:	90 0f       	add	r25, r16
     fac:	99 af       	std	Y+57, r25	; 0x39
     fae:	11 e0       	ldi	r17, 0x01	; 1
     fb0:	1a af       	std	Y+58, r17	; 0x3a
     fb2:	29 ad       	ldd	r18, Y+57	; 0x39
     fb4:	38 a9       	ldd	r19, Y+48	; 0x30
     fb6:	23 17       	cp	r18, r19
     fb8:	08 f0       	brcs	.+2      	; 0xfbc <TIMER0_u8BusyWaitMS+0xf6>
     fba:	1a ae       	std	Y+58, r1	; 0x3a
     fbc:	48 ad       	ldd	r20, Y+56	; 0x38
     fbe:	5a ad       	ldd	r21, Y+58	; 0x3a
     fc0:	45 2b       	or	r20, r21
     fc2:	48 af       	std	Y+56, r20	; 0x38
     fc4:	69 ad       	ldd	r22, Y+57	; 0x39
     fc6:	68 ab       	std	Y+48, r22	; 0x30
     fc8:	79 a1       	ldd	r23, Y+33	; 0x21
     fca:	89 a5       	ldd	r24, Y+41	; 0x29
     fcc:	78 0f       	add	r23, r24
     fce:	79 ab       	std	Y+49, r23	; 0x31
     fd0:	91 e0       	ldi	r25, 0x01	; 1
     fd2:	9b af       	std	Y+59, r25	; 0x3b
     fd4:	09 a9       	ldd	r16, Y+49	; 0x31
     fd6:	19 a1       	ldd	r17, Y+33	; 0x21
     fd8:	01 17       	cp	r16, r17
     fda:	08 f0       	brcs	.+2      	; 0xfde <TIMER0_u8BusyWaitMS+0x118>
     fdc:	1b ae       	std	Y+59, r1	; 0x3b
     fde:	28 ad       	ldd	r18, Y+56	; 0x38
     fe0:	39 a9       	ldd	r19, Y+49	; 0x31
     fe2:	23 0f       	add	r18, r19
     fe4:	2c af       	std	Y+60, r18	; 0x3c
     fe6:	41 e0       	ldi	r20, 0x01	; 1
     fe8:	4d af       	std	Y+61, r20	; 0x3d
     fea:	5c ad       	ldd	r21, Y+60	; 0x3c
     fec:	69 a9       	ldd	r22, Y+49	; 0x31
     fee:	56 17       	cp	r21, r22
     ff0:	08 f0       	brcs	.+2      	; 0xff4 <TIMER0_u8BusyWaitMS+0x12e>
     ff2:	1d ae       	std	Y+61, r1	; 0x3d
     ff4:	7b ad       	ldd	r23, Y+59	; 0x3b
     ff6:	8d ad       	ldd	r24, Y+61	; 0x3d
     ff8:	78 2b       	or	r23, r24
     ffa:	7b af       	std	Y+59, r23	; 0x3b
     ffc:	9c ad       	ldd	r25, Y+60	; 0x3c
     ffe:	99 ab       	std	Y+49, r25	; 0x31
    1000:	0a a1       	ldd	r16, Y+34	; 0x22
    1002:	1a a5       	ldd	r17, Y+42	; 0x2a
    1004:	01 0f       	add	r16, r17
    1006:	0a ab       	std	Y+50, r16	; 0x32
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	2e af       	std	Y+62, r18	; 0x3e
    100c:	3a a9       	ldd	r19, Y+50	; 0x32
    100e:	4a a1       	ldd	r20, Y+34	; 0x22
    1010:	34 17       	cp	r19, r20
    1012:	08 f0       	brcs	.+2      	; 0x1016 <TIMER0_u8BusyWaitMS+0x150>
    1014:	1e ae       	std	Y+62, r1	; 0x3e
    1016:	5b ad       	ldd	r21, Y+59	; 0x3b
    1018:	6a a9       	ldd	r22, Y+50	; 0x32
    101a:	56 0f       	add	r21, r22
    101c:	5f af       	std	Y+63, r21	; 0x3f
    101e:	71 e0       	ldi	r23, 0x01	; 1
    1020:	21 96       	adiw	r28, 0x01	; 1
    1022:	7f af       	std	Y+63, r23	; 0x3f
    1024:	21 97       	sbiw	r28, 0x01	; 1
    1026:	8f ad       	ldd	r24, Y+63	; 0x3f
    1028:	9a a9       	ldd	r25, Y+50	; 0x32
    102a:	89 17       	cp	r24, r25
    102c:	18 f0       	brcs	.+6      	; 0x1034 <TIMER0_u8BusyWaitMS+0x16e>
    102e:	21 96       	adiw	r28, 0x01	; 1
    1030:	1f ae       	std	Y+63, r1	; 0x3f
    1032:	21 97       	sbiw	r28, 0x01	; 1
    1034:	0e ad       	ldd	r16, Y+62	; 0x3e
    1036:	21 96       	adiw	r28, 0x01	; 1
    1038:	1f ad       	ldd	r17, Y+63	; 0x3f
    103a:	21 97       	sbiw	r28, 0x01	; 1
    103c:	01 2b       	or	r16, r17
    103e:	0e af       	std	Y+62, r16	; 0x3e
    1040:	2f ad       	ldd	r18, Y+63	; 0x3f
    1042:	2a ab       	std	Y+50, r18	; 0x32
    1044:	3b a1       	ldd	r19, Y+35	; 0x23
    1046:	4b a5       	ldd	r20, Y+43	; 0x2b
    1048:	34 0f       	add	r19, r20
    104a:	3b ab       	std	Y+51, r19	; 0x33
    104c:	51 e0       	ldi	r21, 0x01	; 1
    104e:	22 96       	adiw	r28, 0x02	; 2
    1050:	5f af       	std	Y+63, r21	; 0x3f
    1052:	22 97       	sbiw	r28, 0x02	; 2
    1054:	6b a9       	ldd	r22, Y+51	; 0x33
    1056:	7b a1       	ldd	r23, Y+35	; 0x23
    1058:	67 17       	cp	r22, r23
    105a:	18 f0       	brcs	.+6      	; 0x1062 <TIMER0_u8BusyWaitMS+0x19c>
    105c:	22 96       	adiw	r28, 0x02	; 2
    105e:	1f ae       	std	Y+63, r1	; 0x3f
    1060:	22 97       	sbiw	r28, 0x02	; 2
    1062:	8e ad       	ldd	r24, Y+62	; 0x3e
    1064:	9b a9       	ldd	r25, Y+51	; 0x33
    1066:	89 0f       	add	r24, r25
    1068:	23 96       	adiw	r28, 0x03	; 3
    106a:	8f af       	std	Y+63, r24	; 0x3f
    106c:	23 97       	sbiw	r28, 0x03	; 3
    106e:	01 e0       	ldi	r16, 0x01	; 1
    1070:	24 96       	adiw	r28, 0x04	; 4
    1072:	0f af       	std	Y+63, r16	; 0x3f
    1074:	24 97       	sbiw	r28, 0x04	; 4
    1076:	23 96       	adiw	r28, 0x03	; 3
    1078:	1f ad       	ldd	r17, Y+63	; 0x3f
    107a:	23 97       	sbiw	r28, 0x03	; 3
    107c:	2b a9       	ldd	r18, Y+51	; 0x33
    107e:	12 17       	cp	r17, r18
    1080:	18 f0       	brcs	.+6      	; 0x1088 <TIMER0_u8BusyWaitMS+0x1c2>
    1082:	24 96       	adiw	r28, 0x04	; 4
    1084:	1f ae       	std	Y+63, r1	; 0x3f
    1086:	24 97       	sbiw	r28, 0x04	; 4
    1088:	22 96       	adiw	r28, 0x02	; 2
    108a:	3f ad       	ldd	r19, Y+63	; 0x3f
    108c:	22 97       	sbiw	r28, 0x02	; 2
    108e:	24 96       	adiw	r28, 0x04	; 4
    1090:	4f ad       	ldd	r20, Y+63	; 0x3f
    1092:	24 97       	sbiw	r28, 0x04	; 4
    1094:	34 2b       	or	r19, r20
    1096:	22 96       	adiw	r28, 0x02	; 2
    1098:	3f af       	std	Y+63, r19	; 0x3f
    109a:	22 97       	sbiw	r28, 0x02	; 2
    109c:	23 96       	adiw	r28, 0x03	; 3
    109e:	5f ad       	ldd	r21, Y+63	; 0x3f
    10a0:	23 97       	sbiw	r28, 0x03	; 3
    10a2:	5b ab       	std	Y+51, r21	; 0x33
    10a4:	6c a1       	ldd	r22, Y+36	; 0x24
    10a6:	7c a5       	ldd	r23, Y+44	; 0x2c
    10a8:	67 0f       	add	r22, r23
    10aa:	6c ab       	std	Y+52, r22	; 0x34
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	25 96       	adiw	r28, 0x05	; 5
    10b0:	8f af       	std	Y+63, r24	; 0x3f
    10b2:	25 97       	sbiw	r28, 0x05	; 5
    10b4:	9c a9       	ldd	r25, Y+52	; 0x34
    10b6:	0c a1       	ldd	r16, Y+36	; 0x24
    10b8:	90 17       	cp	r25, r16
    10ba:	18 f0       	brcs	.+6      	; 0x10c2 <TIMER0_u8BusyWaitMS+0x1fc>
    10bc:	25 96       	adiw	r28, 0x05	; 5
    10be:	1f ae       	std	Y+63, r1	; 0x3f
    10c0:	25 97       	sbiw	r28, 0x05	; 5
    10c2:	22 96       	adiw	r28, 0x02	; 2
    10c4:	1f ad       	ldd	r17, Y+63	; 0x3f
    10c6:	22 97       	sbiw	r28, 0x02	; 2
    10c8:	2c a9       	ldd	r18, Y+52	; 0x34
    10ca:	12 0f       	add	r17, r18
    10cc:	26 96       	adiw	r28, 0x06	; 6
    10ce:	1f af       	std	Y+63, r17	; 0x3f
    10d0:	26 97       	sbiw	r28, 0x06	; 6
    10d2:	31 e0       	ldi	r19, 0x01	; 1
    10d4:	27 96       	adiw	r28, 0x07	; 7
    10d6:	3f af       	std	Y+63, r19	; 0x3f
    10d8:	27 97       	sbiw	r28, 0x07	; 7
    10da:	26 96       	adiw	r28, 0x06	; 6
    10dc:	4f ad       	ldd	r20, Y+63	; 0x3f
    10de:	26 97       	sbiw	r28, 0x06	; 6
    10e0:	5c a9       	ldd	r21, Y+52	; 0x34
    10e2:	45 17       	cp	r20, r21
    10e4:	18 f0       	brcs	.+6      	; 0x10ec <TIMER0_u8BusyWaitMS+0x226>
    10e6:	27 96       	adiw	r28, 0x07	; 7
    10e8:	1f ae       	std	Y+63, r1	; 0x3f
    10ea:	27 97       	sbiw	r28, 0x07	; 7
    10ec:	25 96       	adiw	r28, 0x05	; 5
    10ee:	6f ad       	ldd	r22, Y+63	; 0x3f
    10f0:	25 97       	sbiw	r28, 0x05	; 5
    10f2:	27 96       	adiw	r28, 0x07	; 7
    10f4:	7f ad       	ldd	r23, Y+63	; 0x3f
    10f6:	27 97       	sbiw	r28, 0x07	; 7
    10f8:	67 2b       	or	r22, r23
    10fa:	25 96       	adiw	r28, 0x05	; 5
    10fc:	6f af       	std	Y+63, r22	; 0x3f
    10fe:	25 97       	sbiw	r28, 0x05	; 5
    1100:	26 96       	adiw	r28, 0x06	; 6
    1102:	8f ad       	ldd	r24, Y+63	; 0x3f
    1104:	26 97       	sbiw	r28, 0x06	; 6
    1106:	8c ab       	std	Y+52, r24	; 0x34
    1108:	9d a1       	ldd	r25, Y+37	; 0x25
    110a:	0d a5       	ldd	r16, Y+45	; 0x2d
    110c:	90 0f       	add	r25, r16
    110e:	9d ab       	std	Y+53, r25	; 0x35
    1110:	11 e0       	ldi	r17, 0x01	; 1
    1112:	28 96       	adiw	r28, 0x08	; 8
    1114:	1f af       	std	Y+63, r17	; 0x3f
    1116:	28 97       	sbiw	r28, 0x08	; 8
    1118:	2d a9       	ldd	r18, Y+53	; 0x35
    111a:	3d a1       	ldd	r19, Y+37	; 0x25
    111c:	23 17       	cp	r18, r19
    111e:	18 f0       	brcs	.+6      	; 0x1126 <TIMER0_u8BusyWaitMS+0x260>
    1120:	28 96       	adiw	r28, 0x08	; 8
    1122:	1f ae       	std	Y+63, r1	; 0x3f
    1124:	28 97       	sbiw	r28, 0x08	; 8
    1126:	25 96       	adiw	r28, 0x05	; 5
    1128:	4f ad       	ldd	r20, Y+63	; 0x3f
    112a:	25 97       	sbiw	r28, 0x05	; 5
    112c:	5d a9       	ldd	r21, Y+53	; 0x35
    112e:	45 0f       	add	r20, r21
    1130:	29 96       	adiw	r28, 0x09	; 9
    1132:	4f af       	std	Y+63, r20	; 0x3f
    1134:	29 97       	sbiw	r28, 0x09	; 9
    1136:	61 e0       	ldi	r22, 0x01	; 1
    1138:	2a 96       	adiw	r28, 0x0a	; 10
    113a:	6f af       	std	Y+63, r22	; 0x3f
    113c:	2a 97       	sbiw	r28, 0x0a	; 10
    113e:	29 96       	adiw	r28, 0x09	; 9
    1140:	7f ad       	ldd	r23, Y+63	; 0x3f
    1142:	29 97       	sbiw	r28, 0x09	; 9
    1144:	8d a9       	ldd	r24, Y+53	; 0x35
    1146:	78 17       	cp	r23, r24
    1148:	18 f0       	brcs	.+6      	; 0x1150 <TIMER0_u8BusyWaitMS+0x28a>
    114a:	2a 96       	adiw	r28, 0x0a	; 10
    114c:	1f ae       	std	Y+63, r1	; 0x3f
    114e:	2a 97       	sbiw	r28, 0x0a	; 10
    1150:	28 96       	adiw	r28, 0x08	; 8
    1152:	9f ad       	ldd	r25, Y+63	; 0x3f
    1154:	28 97       	sbiw	r28, 0x08	; 8
    1156:	2a 96       	adiw	r28, 0x0a	; 10
    1158:	0f ad       	ldd	r16, Y+63	; 0x3f
    115a:	2a 97       	sbiw	r28, 0x0a	; 10
    115c:	90 2b       	or	r25, r16
    115e:	28 96       	adiw	r28, 0x08	; 8
    1160:	9f af       	std	Y+63, r25	; 0x3f
    1162:	28 97       	sbiw	r28, 0x08	; 8
    1164:	29 96       	adiw	r28, 0x09	; 9
    1166:	1f ad       	ldd	r17, Y+63	; 0x3f
    1168:	29 97       	sbiw	r28, 0x09	; 9
    116a:	1d ab       	std	Y+53, r17	; 0x35
    116c:	2e a1       	ldd	r18, Y+38	; 0x26
    116e:	3e a5       	ldd	r19, Y+46	; 0x2e
    1170:	23 0f       	add	r18, r19
    1172:	2e ab       	std	Y+54, r18	; 0x36
    1174:	28 96       	adiw	r28, 0x08	; 8
    1176:	8f ad       	ldd	r24, Y+63	; 0x3f
    1178:	28 97       	sbiw	r28, 0x08	; 8
    117a:	4e a9       	ldd	r20, Y+54	; 0x36
    117c:	84 0f       	add	r24, r20
    117e:	8e ab       	std	Y+54, r24	; 0x36
    1180:	2f a5       	ldd	r18, Y+47	; 0x2f
    1182:	38 a9       	ldd	r19, Y+48	; 0x30
    1184:	49 a9       	ldd	r20, Y+49	; 0x31
    1186:	5a a9       	ldd	r21, Y+50	; 0x32
    1188:	6b a9       	ldd	r22, Y+51	; 0x33
    118a:	7c a9       	ldd	r23, Y+52	; 0x34
    118c:	8d a9       	ldd	r24, Y+53	; 0x35
    118e:	9e a9       	ldd	r25, Y+54	; 0x36
    1190:	2a 83       	std	Y+2, r18	; 0x02
    1192:	3b 83       	std	Y+3, r19	; 0x03
    1194:	4c 83       	std	Y+4, r20	; 0x04
    1196:	5d 83       	std	Y+5, r21	; 0x05
    1198:	6e 83       	std	Y+6, r22	; 0x06
    119a:	7f 83       	std	Y+7, r23	; 0x07
    119c:	88 87       	std	Y+8, r24	; 0x08
    119e:	99 87       	std	Y+9, r25	; 0x09
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
    11a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    11a2:	9c 85       	ldd	r25, Y+12	; 0x0c
    11a4:	ad 85       	ldd	r26, Y+13	; 0x0d
    11a6:	be 85       	ldd	r27, Y+14	; 0x0e
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	aa 1f       	adc	r26, r26
    11ae:	bb 1f       	adc	r27, r27
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	aa 1f       	adc	r26, r26
    11b6:	bb 1f       	adc	r27, r27
    11b8:	8c 01       	movw	r16, r24
    11ba:	9d 01       	movw	r18, r26
    11bc:	40 e0       	ldi	r20, 0x00	; 0
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	70 e0       	ldi	r23, 0x00	; 0
    11c4:	0f 8b       	std	Y+23, r16	; 0x17
    11c6:	18 8f       	std	Y+24, r17	; 0x18
    11c8:	29 8f       	std	Y+25, r18	; 0x19
    11ca:	3a 8f       	std	Y+26, r19	; 0x1a
    11cc:	4b 8f       	std	Y+27, r20	; 0x1b
    11ce:	5c 8f       	std	Y+28, r21	; 0x1c
    11d0:	6d 8f       	std	Y+29, r22	; 0x1d
    11d2:	7e 8f       	std	Y+30, r23	; 0x1e
    11d4:	1a 81       	ldd	r17, Y+2	; 0x02
    11d6:	1f 87       	std	Y+15, r17	; 0x0f
    11d8:	2b 81       	ldd	r18, Y+3	; 0x03
    11da:	28 8b       	std	Y+16, r18	; 0x10
    11dc:	3c 81       	ldd	r19, Y+4	; 0x04
    11de:	39 8b       	std	Y+17, r19	; 0x11
    11e0:	4d 81       	ldd	r20, Y+5	; 0x05
    11e2:	4a 8b       	std	Y+18, r20	; 0x12
    11e4:	5e 81       	ldd	r21, Y+6	; 0x06
    11e6:	5b 8b       	std	Y+19, r21	; 0x13
    11e8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ea:	6c 8b       	std	Y+20, r22	; 0x14
    11ec:	78 85       	ldd	r23, Y+8	; 0x08
    11ee:	7d 8b       	std	Y+21, r23	; 0x15
    11f0:	89 85       	ldd	r24, Y+9	; 0x09
    11f2:	8e 8b       	std	Y+22, r24	; 0x16
    11f4:	9e 89       	ldd	r25, Y+22	; 0x16
    11f6:	0e 8d       	ldd	r16, Y+30	; 0x1e
    11f8:	09 17       	cp	r16, r25
    11fa:	08 f4       	brcc	.+2      	; 0x11fe <TIMER0_u8BusyWaitMS+0x338>
    11fc:	42 c0       	rjmp	.+132    	; 0x1282 <TIMER0_u8BusyWaitMS+0x3bc>
    11fe:	1e 89       	ldd	r17, Y+22	; 0x16
    1200:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1202:	12 17       	cp	r17, r18
    1204:	09 f0       	breq	.+2      	; 0x1208 <TIMER0_u8BusyWaitMS+0x342>
    1206:	92 ce       	rjmp	.-732    	; 0xf2c <TIMER0_u8BusyWaitMS+0x66>
    1208:	3d 89       	ldd	r19, Y+21	; 0x15
    120a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    120c:	43 17       	cp	r20, r19
    120e:	c8 f1       	brcs	.+114    	; 0x1282 <TIMER0_u8BusyWaitMS+0x3bc>
    1210:	5d 89       	ldd	r21, Y+21	; 0x15
    1212:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1214:	56 17       	cp	r21, r22
    1216:	09 f0       	breq	.+2      	; 0x121a <TIMER0_u8BusyWaitMS+0x354>
    1218:	89 ce       	rjmp	.-750    	; 0xf2c <TIMER0_u8BusyWaitMS+0x66>
    121a:	7c 89       	ldd	r23, Y+20	; 0x14
    121c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    121e:	87 17       	cp	r24, r23
    1220:	80 f1       	brcs	.+96     	; 0x1282 <TIMER0_u8BusyWaitMS+0x3bc>
    1222:	9c 89       	ldd	r25, Y+20	; 0x14
    1224:	0c 8d       	ldd	r16, Y+28	; 0x1c
    1226:	90 17       	cp	r25, r16
    1228:	09 f0       	breq	.+2      	; 0x122c <TIMER0_u8BusyWaitMS+0x366>
    122a:	80 ce       	rjmp	.-768    	; 0xf2c <TIMER0_u8BusyWaitMS+0x66>
    122c:	1b 89       	ldd	r17, Y+19	; 0x13
    122e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1230:	21 17       	cp	r18, r17
    1232:	38 f1       	brcs	.+78     	; 0x1282 <TIMER0_u8BusyWaitMS+0x3bc>
    1234:	3b 89       	ldd	r19, Y+19	; 0x13
    1236:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1238:	34 17       	cp	r19, r20
    123a:	09 f0       	breq	.+2      	; 0x123e <TIMER0_u8BusyWaitMS+0x378>
    123c:	77 ce       	rjmp	.-786    	; 0xf2c <TIMER0_u8BusyWaitMS+0x66>
    123e:	5a 89       	ldd	r21, Y+18	; 0x12
    1240:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1242:	65 17       	cp	r22, r21
    1244:	f0 f0       	brcs	.+60     	; 0x1282 <TIMER0_u8BusyWaitMS+0x3bc>
    1246:	7a 89       	ldd	r23, Y+18	; 0x12
    1248:	8a 8d       	ldd	r24, Y+26	; 0x1a
    124a:	78 17       	cp	r23, r24
    124c:	09 f0       	breq	.+2      	; 0x1250 <TIMER0_u8BusyWaitMS+0x38a>
    124e:	6e ce       	rjmp	.-804    	; 0xf2c <TIMER0_u8BusyWaitMS+0x66>
    1250:	99 89       	ldd	r25, Y+17	; 0x11
    1252:	09 8d       	ldd	r16, Y+25	; 0x19
    1254:	09 17       	cp	r16, r25
    1256:	a8 f0       	brcs	.+42     	; 0x1282 <TIMER0_u8BusyWaitMS+0x3bc>
    1258:	19 89       	ldd	r17, Y+17	; 0x11
    125a:	29 8d       	ldd	r18, Y+25	; 0x19
    125c:	12 17       	cp	r17, r18
    125e:	09 f0       	breq	.+2      	; 0x1262 <TIMER0_u8BusyWaitMS+0x39c>
    1260:	65 ce       	rjmp	.-822    	; 0xf2c <TIMER0_u8BusyWaitMS+0x66>
    1262:	38 89       	ldd	r19, Y+16	; 0x10
    1264:	48 8d       	ldd	r20, Y+24	; 0x18
    1266:	43 17       	cp	r20, r19
    1268:	60 f0       	brcs	.+24     	; 0x1282 <TIMER0_u8BusyWaitMS+0x3bc>
    126a:	58 89       	ldd	r21, Y+16	; 0x10
    126c:	68 8d       	ldd	r22, Y+24	; 0x18
    126e:	56 17       	cp	r21, r22
    1270:	09 f0       	breq	.+2      	; 0x1274 <TIMER0_u8BusyWaitMS+0x3ae>
    1272:	5c ce       	rjmp	.-840    	; 0xf2c <TIMER0_u8BusyWaitMS+0x66>
    1274:	7f 85       	ldd	r23, Y+15	; 0x0f
    1276:	8f 89       	ldd	r24, Y+23	; 0x17
    1278:	87 17       	cp	r24, r23
    127a:	18 f0       	brcs	.+6      	; 0x1282 <TIMER0_u8BusyWaitMS+0x3bc>
    127c:	57 ce       	rjmp	.-850    	; 0xf2c <TIMER0_u8BusyWaitMS+0x66>
			}
		}
	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
    127e:	84 e1       	ldi	r24, 0x14	; 20
    1280:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
    1282:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1284:	c7 5b       	subi	r28, 0xB7	; 183
    1286:	df 4f       	sbci	r29, 0xFF	; 255
    1288:	0f b6       	in	r0, 0x3f	; 63
    128a:	f8 94       	cli
    128c:	de bf       	out	0x3e, r29	; 62
    128e:	0f be       	out	0x3f, r0	; 63
    1290:	cd bf       	out	0x3d, r28	; 61
    1292:	cf 91       	pop	r28
    1294:	df 91       	pop	r29
    1296:	1f 91       	pop	r17
    1298:	0f 91       	pop	r16
    129a:	08 95       	ret

0000129c <TIMER0_u8BusyWaitUS>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER0_u8BusyWaitUS(uint32_t u32_BusyTimeInMicroSec)
{
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	2a 97       	sbiw	r28, 0x0a	; 10
    12a6:	0f b6       	in	r0, 0x3f	; 63
    12a8:	f8 94       	cli
    12aa:	de bf       	out	0x3e, r29	; 62
    12ac:	0f be       	out	0x3f, r0	; 63
    12ae:	cd bf       	out	0x3d, r28	; 61
    12b0:	6f 83       	std	Y+7, r22	; 0x07
    12b2:	78 87       	std	Y+8, r23	; 0x08
    12b4:	89 87       	std	Y+9, r24	; 0x09
    12b6:	9a 87       	std	Y+10, r25	; 0x0a
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
    12b8:	83 e1       	ldi	r24, 0x13	; 19
    12ba:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used== u8_TIMER0_FLAG_NOT_USED)
    12bc:	80 91 61 00 	lds	r24, 0x0061
    12c0:	83 31       	cpi	r24, 0x13	; 19
    12c2:	e9 f5       	brne	.+122    	; 0x133e <TIMER0_u8BusyWaitUS+0xa2>
	{
		volatile uint32_t u32_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
    12c4:	1a 82       	std	Y+2, r1	; 0x02
    12c6:	1b 82       	std	Y+3, r1	; 0x03
    12c8:	1c 82       	std	Y+4, r1	; 0x04
    12ca:	1d 82       	std	Y+5, r1	; 0x05
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
    12cc:	81 e1       	ldi	r24, 0x11	; 17
    12ce:	0e 94 67 06 	call	0xcce	; 0xcce <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
    12d2:	82 e1       	ldi	r24, 0x12	; 18
    12d4:	0e 94 67 06 	call	0xcce	; 0xcce <TIMERS_u8IntModesDis>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    12d8:	87 e0       	ldi	r24, 0x07	; 7
    12da:	0e 94 c1 04 	call	0x982	; 0x982 <TIMER0_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
    12de:	82 e1       	ldi	r24, 0x12	; 18
    12e0:	0e 94 bd 05 	call	0xb7a	; 0xb7a <TIMERS_u8ClearIntFlag>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    12e4:	8a ef       	ldi	r24, 0xFA	; 250
    12e6:	0e 94 b0 06 	call	0xd60	; 0xd60 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
    12ec:	0e 94 99 06 	call	0xd32	; 0xd32 <Timer0_u8setOverFlowRegTicksBeforeOV>
    12f0:	18 c0       	rjmp	.+48     	; 0x1322 <TIMER0_u8BusyWaitUS+0x86>
		while(u32_BusyWaitcounter <=u32_BusyTimeInMicroSec)
		{
			TIMERS_u8GetIntFlag(u8_TIMER0_COMPARE_ON_MATCH,(&u8_CheckCompareFlag)) ;
    12f2:	9e 01       	movw	r18, r28
    12f4:	2a 5f       	subi	r18, 0xFA	; 250
    12f6:	3f 4f       	sbci	r19, 0xFF	; 255
    12f8:	82 e1       	ldi	r24, 0x12	; 18
    12fa:	b9 01       	movw	r22, r18
    12fc:	0e 94 ef 05 	call	0xbde	; 0xbde <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
    1300:	8e 81       	ldd	r24, Y+6	; 0x06
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	71 f4       	brne	.+28     	; 0x1322 <TIMER0_u8BusyWaitUS+0x86>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
    1306:	82 e1       	ldi	r24, 0x12	; 18
    1308:	0e 94 bd 05 	call	0xb7a	; 0xb7a <TIMERS_u8ClearIntFlag>
				u32_BusyWaitcounter++ ;
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	9b 81       	ldd	r25, Y+3	; 0x03
    1310:	ac 81       	ldd	r26, Y+4	; 0x04
    1312:	bd 81       	ldd	r27, Y+5	; 0x05
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	a1 1d       	adc	r26, r1
    1318:	b1 1d       	adc	r27, r1
    131a:	8a 83       	std	Y+2, r24	; 0x02
    131c:	9b 83       	std	Y+3, r25	; 0x03
    131e:	ac 83       	std	Y+4, r26	; 0x04
    1320:	bd 83       	std	Y+5, r27	; 0x05
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
		while(u32_BusyWaitcounter <=u32_BusyTimeInMicroSec)
    1322:	2a 81       	ldd	r18, Y+2	; 0x02
    1324:	3b 81       	ldd	r19, Y+3	; 0x03
    1326:	4c 81       	ldd	r20, Y+4	; 0x04
    1328:	5d 81       	ldd	r21, Y+5	; 0x05
    132a:	8f 81       	ldd	r24, Y+7	; 0x07
    132c:	98 85       	ldd	r25, Y+8	; 0x08
    132e:	a9 85       	ldd	r26, Y+9	; 0x09
    1330:	ba 85       	ldd	r27, Y+10	; 0x0a
    1332:	82 17       	cp	r24, r18
    1334:	93 07       	cpc	r25, r19
    1336:	a4 07       	cpc	r26, r20
    1338:	b5 07       	cpc	r27, r21
    133a:	d8 f6       	brcc	.-74     	; 0x12f2 <TIMER0_u8BusyWaitUS+0x56>
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <TIMER0_u8BusyWaitUS+0xa6>
			}
		}
	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
    133e:	84 e1       	ldi	r24, 0x14	; 20
    1340:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
    1342:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1344:	2a 96       	adiw	r28, 0x0a	; 10
    1346:	0f b6       	in	r0, 0x3f	; 63
    1348:	f8 94       	cli
    134a:	de bf       	out	0x3e, r29	; 62
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	cd bf       	out	0x3d, r28	; 61
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <TIMER0_u8InterruptWait>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8InterruptWait(uint32_t u32_BusyTimeInMilliSec)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <TIMER0_u8InterruptWait+0x6>
    135c:	00 d0       	rcall	.+0      	; 0x135e <TIMER0_u8InterruptWait+0x8>
    135e:	0f 92       	push	r0
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	6a 83       	std	Y+2, r22	; 0x02
    1366:	7b 83       	std	Y+3, r23	; 0x03
    1368:	8c 83       	std	Y+4, r24	; 0x04
    136a:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
    136c:	83 e1       	ldi	r24, 0x13	; 19
    136e:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used==u8_TIMER0_FLAG_NOT_USED &&gu8_FinishIntWaitFlag != u8_BEGIN_INTERRUPT_WAITING )
    1370:	80 91 61 00 	lds	r24, 0x0061
    1374:	83 31       	cpi	r24, 0x13	; 19
    1376:	09 f0       	breq	.+2      	; 0x137a <TIMER0_u8InterruptWait+0x24>
    1378:	3f c0       	rjmp	.+126    	; 0x13f8 <TIMER0_u8InterruptWait+0xa2>
    137a:	80 91 60 00 	lds	r24, 0x0060
    137e:	87 31       	cpi	r24, 0x17	; 23
    1380:	d9 f1       	breq	.+118    	; 0x13f8 <TIMER0_u8InterruptWait+0xa2>
	{
		gu64_IntWaitcounter = (uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre) ;
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	9b 81       	ldd	r25, Y+3	; 0x03
    1386:	ac 81       	ldd	r26, Y+4	; 0x04
    1388:	bd 81       	ldd	r27, Y+5	; 0x05
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	aa 1f       	adc	r26, r26
    1390:	bb 1f       	adc	r27, r27
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	aa 1f       	adc	r26, r26
    1398:	bb 1f       	adc	r27, r27
    139a:	9c 01       	movw	r18, r24
    139c:	ad 01       	movw	r20, r26
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	20 93 66 00 	sts	0x0066, r18
    13aa:	30 93 67 00 	sts	0x0067, r19
    13ae:	40 93 68 00 	sts	0x0068, r20
    13b2:	50 93 69 00 	sts	0x0069, r21
    13b6:	60 93 6a 00 	sts	0x006A, r22
    13ba:	70 93 6b 00 	sts	0x006B, r23
    13be:	80 93 6c 00 	sts	0x006C, r24
    13c2:	90 93 6d 00 	sts	0x006D, r25
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    13c6:	8a ef       	ldi	r24, 0xFA	; 250
    13c8:	0e 94 b0 06 	call	0xd60	; 0xd60 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
    13cc:	8f ef       	ldi	r24, 0xFF	; 255
    13ce:	0e 94 99 06 	call	0xd32	; 0xd32 <Timer0_u8setOverFlowRegTicksBeforeOV>
		gu8_FlagIfTimer0Used = u8_TIMER0_FLAG_USED ;
    13d2:	84 e1       	ldi	r24, 0x14	; 20
    13d4:	80 93 61 00 	sts	0x0061, r24
		TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH);
    13d8:	82 e1       	ldi	r24, 0x12	; 18
    13da:	0e 94 27 06 	call	0xc4e	; 0xc4e <TIMERS_u8IntModesEn>
		TIMER0_u8setCallBack(u8_TIMER0_COMPARE_ON_MATCH,void_IntWaitControlFlagCount) ;
    13de:	27 e0       	ldi	r18, 0x07	; 7
    13e0:	3a e0       	ldi	r19, 0x0A	; 10
    13e2:	82 e1       	ldi	r24, 0x12	; 18
    13e4:	b9 01       	movw	r22, r18
    13e6:	0e 94 c2 06 	call	0xd84	; 0xd84 <TIMER0_u8setCallBack>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    13ea:	87 e0       	ldi	r24, 0x07	; 7
    13ec:	0e 94 c1 04 	call	0x982	; 0x982 <TIMER0_u8StartWithclockAndPrescalerSelect>
		gu8_FinishIntWaitFlag = u8_BEGIN_INTERRUPT_WAITING ;
    13f0:	87 e1       	ldi	r24, 0x17	; 23
    13f2:	80 93 60 00 	sts	0x0060, r24
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <TIMER0_u8InterruptWait+0xa6>

	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
    13f8:	84 e1       	ldi	r24, 0x14	; 20
    13fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <void_IntWaitControlFlagCount>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void void_IntWaitControlFlagCount(void)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	ab 97       	sbiw	r28, 0x2b	; 43
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61

	if(gu8_FlagIfTimer0Used==u8_TIMER0_FLAG_USED&&gu64_IntWaitcounter > u8_INTIAL_COUNTER_VAL)
    1422:	80 91 61 00 	lds	r24, 0x0061
    1426:	84 31       	cpi	r24, 0x14	; 20
    1428:	09 f0       	breq	.+2      	; 0x142c <void_IntWaitControlFlagCount+0x1e>
    142a:	17 c1       	rjmp	.+558    	; 0x165a <void_IntWaitControlFlagCount+0x24c>
    142c:	20 91 66 00 	lds	r18, 0x0066
    1430:	30 91 67 00 	lds	r19, 0x0067
    1434:	40 91 68 00 	lds	r20, 0x0068
    1438:	50 91 69 00 	lds	r21, 0x0069
    143c:	60 91 6a 00 	lds	r22, 0x006A
    1440:	70 91 6b 00 	lds	r23, 0x006B
    1444:	80 91 6c 00 	lds	r24, 0x006C
    1448:	90 91 6d 00 	lds	r25, 0x006D
    144c:	e2 2f       	mov	r30, r18
    144e:	e3 2b       	or	r30, r19
    1450:	e4 2b       	or	r30, r20
    1452:	e5 2b       	or	r30, r21
    1454:	e6 2b       	or	r30, r22
    1456:	e7 2b       	or	r30, r23
    1458:	e8 2b       	or	r30, r24
    145a:	e9 2b       	or	r30, r25
    145c:	ee 23       	and	r30, r30
    145e:	09 f4       	brne	.+2      	; 0x1462 <void_IntWaitControlFlagCount+0x54>
    1460:	fc c0       	rjmp	.+504    	; 0x165a <void_IntWaitControlFlagCount+0x24c>
	{
		gu64_IntWaitcounter-- ;
    1462:	80 91 66 00 	lds	r24, 0x0066
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	90 91 67 00 	lds	r25, 0x0067
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	80 91 68 00 	lds	r24, 0x0068
    1472:	8b 83       	std	Y+3, r24	; 0x03
    1474:	90 91 69 00 	lds	r25, 0x0069
    1478:	9c 83       	std	Y+4, r25	; 0x04
    147a:	80 91 6a 00 	lds	r24, 0x006A
    147e:	8d 83       	std	Y+5, r24	; 0x05
    1480:	90 91 6b 00 	lds	r25, 0x006B
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	80 91 6c 00 	lds	r24, 0x006C
    148a:	8f 83       	std	Y+7, r24	; 0x07
    148c:	90 91 6d 00 	lds	r25, 0x006D
    1490:	98 87       	std	Y+8, r25	; 0x08
    1492:	8f ef       	ldi	r24, 0xFF	; 255
    1494:	89 87       	std	Y+9, r24	; 0x09
    1496:	9f ef       	ldi	r25, 0xFF	; 255
    1498:	9a 87       	std	Y+10, r25	; 0x0a
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	8b 87       	std	Y+11, r24	; 0x0b
    149e:	9f ef       	ldi	r25, 0xFF	; 255
    14a0:	9c 87       	std	Y+12, r25	; 0x0c
    14a2:	8f ef       	ldi	r24, 0xFF	; 255
    14a4:	8d 87       	std	Y+13, r24	; 0x0d
    14a6:	9f ef       	ldi	r25, 0xFF	; 255
    14a8:	9e 87       	std	Y+14, r25	; 0x0e
    14aa:	8f ef       	ldi	r24, 0xFF	; 255
    14ac:	8f 87       	std	Y+15, r24	; 0x0f
    14ae:	9f ef       	ldi	r25, 0xFF	; 255
    14b0:	98 8b       	std	Y+16, r25	; 0x10
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	99 85       	ldd	r25, Y+9	; 0x09
    14b6:	89 0f       	add	r24, r25
    14b8:	89 8b       	std	Y+17, r24	; 0x11
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    14bc:	89 8f       	std	Y+25, r24	; 0x19
    14be:	99 89       	ldd	r25, Y+17	; 0x11
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	98 17       	cp	r25, r24
    14c4:	08 f0       	brcs	.+2      	; 0x14c8 <void_IntWaitControlFlagCount+0xba>
    14c6:	19 8e       	std	Y+25, r1	; 0x19
    14c8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    14cc:	98 0f       	add	r25, r24
    14ce:	9a 8b       	std	Y+18, r25	; 0x12
    14d0:	91 e0       	ldi	r25, 0x01	; 1
    14d2:	9a 8f       	std	Y+26, r25	; 0x1a
    14d4:	8a 89       	ldd	r24, Y+18	; 0x12
    14d6:	9a 81       	ldd	r25, Y+2	; 0x02
    14d8:	89 17       	cp	r24, r25
    14da:	08 f0       	brcs	.+2      	; 0x14de <void_IntWaitControlFlagCount+0xd0>
    14dc:	1a 8e       	std	Y+26, r1	; 0x1a
    14de:	89 8d       	ldd	r24, Y+25	; 0x19
    14e0:	9a 89       	ldd	r25, Y+18	; 0x12
    14e2:	89 0f       	add	r24, r25
    14e4:	8b 8f       	std	Y+27, r24	; 0x1b
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	8c 8f       	std	Y+28, r24	; 0x1c
    14ea:	9b 8d       	ldd	r25, Y+27	; 0x1b
    14ec:	8a 89       	ldd	r24, Y+18	; 0x12
    14ee:	98 17       	cp	r25, r24
    14f0:	08 f0       	brcs	.+2      	; 0x14f4 <void_IntWaitControlFlagCount+0xe6>
    14f2:	1c 8e       	std	Y+28, r1	; 0x1c
    14f4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    14f8:	98 2b       	or	r25, r24
    14fa:	9a 8f       	std	Y+26, r25	; 0x1a
    14fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    14fe:	9a 8b       	std	Y+18, r25	; 0x12
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9b 85       	ldd	r25, Y+11	; 0x0b
    1504:	89 0f       	add	r24, r25
    1506:	8b 8b       	std	Y+19, r24	; 0x13
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	8d 8f       	std	Y+29, r24	; 0x1d
    150c:	9b 89       	ldd	r25, Y+19	; 0x13
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	98 17       	cp	r25, r24
    1512:	08 f0       	brcs	.+2      	; 0x1516 <void_IntWaitControlFlagCount+0x108>
    1514:	1d 8e       	std	Y+29, r1	; 0x1d
    1516:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1518:	8b 89       	ldd	r24, Y+19	; 0x13
    151a:	98 0f       	add	r25, r24
    151c:	9e 8f       	std	Y+30, r25	; 0x1e
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	9f 8f       	std	Y+31, r25	; 0x1f
    1522:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1524:	9b 89       	ldd	r25, Y+19	; 0x13
    1526:	89 17       	cp	r24, r25
    1528:	08 f0       	brcs	.+2      	; 0x152c <void_IntWaitControlFlagCount+0x11e>
    152a:	1f 8e       	std	Y+31, r1	; 0x1f
    152c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    152e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1530:	89 2b       	or	r24, r25
    1532:	8d 8f       	std	Y+29, r24	; 0x1d
    1534:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1536:	8b 8b       	std	Y+19, r24	; 0x13
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	8c 85       	ldd	r24, Y+12	; 0x0c
    153c:	98 0f       	add	r25, r24
    153e:	9c 8b       	std	Y+20, r25	; 0x14
    1540:	91 e0       	ldi	r25, 0x01	; 1
    1542:	98 a3       	std	Y+32, r25	; 0x20
    1544:	8c 89       	ldd	r24, Y+20	; 0x14
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	89 17       	cp	r24, r25
    154a:	08 f0       	brcs	.+2      	; 0x154e <void_IntWaitControlFlagCount+0x140>
    154c:	18 a2       	std	Y+32, r1	; 0x20
    154e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1550:	9c 89       	ldd	r25, Y+20	; 0x14
    1552:	89 0f       	add	r24, r25
    1554:	89 a3       	std	Y+33, r24	; 0x21
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	8a a3       	std	Y+34, r24	; 0x22
    155a:	99 a1       	ldd	r25, Y+33	; 0x21
    155c:	8c 89       	ldd	r24, Y+20	; 0x14
    155e:	98 17       	cp	r25, r24
    1560:	08 f0       	brcs	.+2      	; 0x1564 <void_IntWaitControlFlagCount+0x156>
    1562:	1a a2       	std	Y+34, r1	; 0x22
    1564:	98 a1       	ldd	r25, Y+32	; 0x20
    1566:	8a a1       	ldd	r24, Y+34	; 0x22
    1568:	98 2b       	or	r25, r24
    156a:	98 a3       	std	Y+32, r25	; 0x20
    156c:	99 a1       	ldd	r25, Y+33	; 0x21
    156e:	9c 8b       	std	Y+20, r25	; 0x14
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9d 85       	ldd	r25, Y+13	; 0x0d
    1574:	89 0f       	add	r24, r25
    1576:	8d 8b       	std	Y+21, r24	; 0x15
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	8b a3       	std	Y+35, r24	; 0x23
    157c:	9d 89       	ldd	r25, Y+21	; 0x15
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	98 17       	cp	r25, r24
    1582:	08 f0       	brcs	.+2      	; 0x1586 <void_IntWaitControlFlagCount+0x178>
    1584:	1b a2       	std	Y+35, r1	; 0x23
    1586:	98 a1       	ldd	r25, Y+32	; 0x20
    1588:	8d 89       	ldd	r24, Y+21	; 0x15
    158a:	98 0f       	add	r25, r24
    158c:	9c a3       	std	Y+36, r25	; 0x24
    158e:	91 e0       	ldi	r25, 0x01	; 1
    1590:	9d a3       	std	Y+37, r25	; 0x25
    1592:	8c a1       	ldd	r24, Y+36	; 0x24
    1594:	9d 89       	ldd	r25, Y+21	; 0x15
    1596:	89 17       	cp	r24, r25
    1598:	08 f0       	brcs	.+2      	; 0x159c <void_IntWaitControlFlagCount+0x18e>
    159a:	1d a2       	std	Y+37, r1	; 0x25
    159c:	8b a1       	ldd	r24, Y+35	; 0x23
    159e:	9d a1       	ldd	r25, Y+37	; 0x25
    15a0:	89 2b       	or	r24, r25
    15a2:	8b a3       	std	Y+35, r24	; 0x23
    15a4:	8c a1       	ldd	r24, Y+36	; 0x24
    15a6:	8d 8b       	std	Y+21, r24	; 0x15
    15a8:	9e 81       	ldd	r25, Y+6	; 0x06
    15aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ac:	98 0f       	add	r25, r24
    15ae:	9e 8b       	std	Y+22, r25	; 0x16
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	9e a3       	std	Y+38, r25	; 0x26
    15b4:	8e 89       	ldd	r24, Y+22	; 0x16
    15b6:	9e 81       	ldd	r25, Y+6	; 0x06
    15b8:	89 17       	cp	r24, r25
    15ba:	08 f0       	brcs	.+2      	; 0x15be <void_IntWaitControlFlagCount+0x1b0>
    15bc:	1e a2       	std	Y+38, r1	; 0x26
    15be:	8b a1       	ldd	r24, Y+35	; 0x23
    15c0:	9e 89       	ldd	r25, Y+22	; 0x16
    15c2:	89 0f       	add	r24, r25
    15c4:	8f a3       	std	Y+39, r24	; 0x27
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	88 a7       	std	Y+40, r24	; 0x28
    15ca:	9f a1       	ldd	r25, Y+39	; 0x27
    15cc:	8e 89       	ldd	r24, Y+22	; 0x16
    15ce:	98 17       	cp	r25, r24
    15d0:	08 f0       	brcs	.+2      	; 0x15d4 <void_IntWaitControlFlagCount+0x1c6>
    15d2:	18 a6       	std	Y+40, r1	; 0x28
    15d4:	9e a1       	ldd	r25, Y+38	; 0x26
    15d6:	88 a5       	ldd	r24, Y+40	; 0x28
    15d8:	98 2b       	or	r25, r24
    15da:	9e a3       	std	Y+38, r25	; 0x26
    15dc:	9f a1       	ldd	r25, Y+39	; 0x27
    15de:	9e 8b       	std	Y+22, r25	; 0x16
    15e0:	8f 81       	ldd	r24, Y+7	; 0x07
    15e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    15e4:	89 0f       	add	r24, r25
    15e6:	8f 8b       	std	Y+23, r24	; 0x17
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	89 a7       	std	Y+41, r24	; 0x29
    15ec:	9f 89       	ldd	r25, Y+23	; 0x17
    15ee:	8f 81       	ldd	r24, Y+7	; 0x07
    15f0:	98 17       	cp	r25, r24
    15f2:	08 f0       	brcs	.+2      	; 0x15f6 <void_IntWaitControlFlagCount+0x1e8>
    15f4:	19 a6       	std	Y+41, r1	; 0x29
    15f6:	9e a1       	ldd	r25, Y+38	; 0x26
    15f8:	8f 89       	ldd	r24, Y+23	; 0x17
    15fa:	98 0f       	add	r25, r24
    15fc:	9a a7       	std	Y+42, r25	; 0x2a
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	9b a7       	std	Y+43, r25	; 0x2b
    1602:	8a a5       	ldd	r24, Y+42	; 0x2a
    1604:	9f 89       	ldd	r25, Y+23	; 0x17
    1606:	89 17       	cp	r24, r25
    1608:	08 f0       	brcs	.+2      	; 0x160c <void_IntWaitControlFlagCount+0x1fe>
    160a:	1b a6       	std	Y+43, r1	; 0x2b
    160c:	89 a5       	ldd	r24, Y+41	; 0x29
    160e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1610:	89 2b       	or	r24, r25
    1612:	89 a7       	std	Y+41, r24	; 0x29
    1614:	8a a5       	ldd	r24, Y+42	; 0x2a
    1616:	8f 8b       	std	Y+23, r24	; 0x17
    1618:	98 85       	ldd	r25, Y+8	; 0x08
    161a:	88 89       	ldd	r24, Y+16	; 0x10
    161c:	98 0f       	add	r25, r24
    161e:	98 8f       	std	Y+24, r25	; 0x18
    1620:	89 a5       	ldd	r24, Y+41	; 0x29
    1622:	98 8d       	ldd	r25, Y+24	; 0x18
    1624:	89 0f       	add	r24, r25
    1626:	88 8f       	std	Y+24, r24	; 0x18
    1628:	29 89       	ldd	r18, Y+17	; 0x11
    162a:	3a 89       	ldd	r19, Y+18	; 0x12
    162c:	4b 89       	ldd	r20, Y+19	; 0x13
    162e:	5c 89       	ldd	r21, Y+20	; 0x14
    1630:	6d 89       	ldd	r22, Y+21	; 0x15
    1632:	7e 89       	ldd	r23, Y+22	; 0x16
    1634:	8f 89       	ldd	r24, Y+23	; 0x17
    1636:	98 8d       	ldd	r25, Y+24	; 0x18
    1638:	20 93 66 00 	sts	0x0066, r18
    163c:	30 93 67 00 	sts	0x0067, r19
    1640:	40 93 68 00 	sts	0x0068, r20
    1644:	50 93 69 00 	sts	0x0069, r21
    1648:	60 93 6a 00 	sts	0x006A, r22
    164c:	70 93 6b 00 	sts	0x006B, r23
    1650:	80 93 6c 00 	sts	0x006C, r24
    1654:	90 93 6d 00 	sts	0x006D, r25
    1658:	06 c0       	rjmp	.+12     	; 0x1666 <void_IntWaitControlFlagCount+0x258>
	}
	else
	{
		gu8_FlagIfTimer0Used = u8_TIMER0_FLAG_NOT_USED ;
    165a:	83 e1       	ldi	r24, 0x13	; 19
    165c:	80 93 61 00 	sts	0x0061, r24
		gu8_FinishIntWaitFlag = u8_FINISH_INTERRUPT_WAITING ;
    1660:	86 e1       	ldi	r24, 0x16	; 22
    1662:	80 93 60 00 	sts	0x0060, r24
	}
}
    1666:	ab 96       	adiw	r28, 0x2b	; 43
    1668:	0f b6       	in	r0, 0x3f	; 63
    166a:	f8 94       	cli
    166c:	de bf       	out	0x3e, r29	; 62
    166e:	0f be       	out	0x3f, r0	; 63
    1670:	cd bf       	out	0x3d, r28	; 61
    1672:	cf 91       	pop	r28
    1674:	df 91       	pop	r29
    1676:	08 95       	ret

00001678 <KEYPAD_voidInit>:




void KEYPAD_voidInit(void) 
{
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
	//SETTING ROWS AS OUTPUT PINS
	DIO_u8SetPinDir(u8_KEYPAD_PORT,u8_KEYPAD_ROW1,u8_DIO_OUTPUT_PIN) ; 
    1680:	8a e0       	ldi	r24, 0x0A	; 10
    1682:	62 e0       	ldi	r22, 0x02	; 2
    1684:	41 e0       	ldi	r20, 0x01	; 1
    1686:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_KEYPAD_PORT,u8_KEYPAD_ROW2,u8_DIO_OUTPUT_PIN) ; 
    168a:	8a e0       	ldi	r24, 0x0A	; 10
    168c:	63 e0       	ldi	r22, 0x03	; 3
    168e:	41 e0       	ldi	r20, 0x01	; 1
    1690:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_KEYPAD_PORT,u8_KEYPAD_ROW3,u8_DIO_OUTPUT_PIN) ; 
    1694:	8a e0       	ldi	r24, 0x0A	; 10
    1696:	64 e0       	ldi	r22, 0x04	; 4
    1698:	41 e0       	ldi	r20, 0x01	; 1
    169a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	//SETTING COL PINS AS INPUT PINS
	DIO_u8SetPinDir(u8_KEYPAD_PORT,u8_KEYPAD_COL1,u8_DIO_INPUT_PIN) ; 
    169e:	8a e0       	ldi	r24, 0x0A	; 10
    16a0:	65 e0       	ldi	r22, 0x05	; 5
    16a2:	40 e0       	ldi	r20, 0x00	; 0
    16a4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_KEYPAD_PORT,u8_KEYPAD_COL2,u8_DIO_INPUT_PIN) ; 
    16a8:	8a e0       	ldi	r24, 0x0A	; 10
    16aa:	66 e0       	ldi	r22, 0x06	; 6
    16ac:	40 e0       	ldi	r20, 0x00	; 0
    16ae:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_KEYPAD_PORT,u8_KEYPAD_COL3,u8_DIO_INPUT_PIN) ;
    16b2:	8a e0       	ldi	r24, 0x0A	; 10
    16b4:	67 e0       	ldi	r22, 0x07	; 7
    16b6:	40 e0       	ldi	r20, 0x00	; 0
    16b8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	//ENABLE ALL PULL-UP PINS
	DIO_voidEnablePullUps() ;      
    16bc:	0e 94 74 04 	call	0x8e8	; 0x8e8 <DIO_voidEnablePullUps>
	//SETTING INTIAL HIGH VALUE FOR OUTPUT ROW PINS		
	DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_KEYPAD_ROW1,u8_DIO_PIN_HIGH) ; 
    16c0:	8a e0       	ldi	r24, 0x0A	; 10
    16c2:	62 e0       	ldi	r22, 0x02	; 2
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_KEYPAD_ROW2,u8_DIO_PIN_HIGH) ; 
    16ca:	8a e0       	ldi	r24, 0x0A	; 10
    16cc:	63 e0       	ldi	r22, 0x03	; 3
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_KEYPAD_ROW3,u8_DIO_PIN_HIGH) ;
    16d4:	8a e0       	ldi	r24, 0x0A	; 10
    16d6:	64 e0       	ldi	r22, 0x04	; 4
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	//SETTING PULL-UP FOR INPUT PINS
	DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_KEYPAD_COL1,u8_DIO_PIN_HIGH) ; 
    16de:	8a e0       	ldi	r24, 0x0A	; 10
    16e0:	65 e0       	ldi	r22, 0x05	; 5
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_KEYPAD_COL2,u8_DIO_PIN_HIGH) ; 
    16e8:	8a e0       	ldi	r24, 0x0A	; 10
    16ea:	66 e0       	ldi	r22, 0x06	; 6
    16ec:	41 e0       	ldi	r20, 0x01	; 1
    16ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_KEYPAD_COL3,u8_DIO_PIN_HIGH) ;
    16f2:	8a e0       	ldi	r24, 0x0A	; 10
    16f4:	67 e0       	ldi	r22, 0x07	; 7
    16f6:	41 e0       	ldi	r20, 0x01	; 1
    16f8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	
}
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <KEYPAD_u8GetKeyNum>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

//FUNCTION KEYPAD_u8GetKeyNum RETURN ERROR STATE AND TAKE POINTER TO RETURN PRESSED KEY NUM IN ASCII OR ASCII OF ZERO IF NO KEY PRESSED 
uint8_t KEYPAD_u8GetKeyNum(uint8_t* pu8_ReturnKeyNum )
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	27 97       	sbiw	r28, 0x07	; 7
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	9f 83       	std	Y+7, r25	; 0x07
    1718:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t u8_ErrorFlag = u8_KEYPAD_OK , u8_ColCounter = u8_KEYPAD_COL1,u8_RowCounter = u8_KEYPAD_ROW1,u8_TotalCount = u8_KEYPAD_INTIALIZING_VAR ;
    171a:	82 e3       	ldi	r24, 0x32	; 50
    171c:	8c 83       	std	Y+4, r24	; 0x04
    171e:	85 e0       	ldi	r24, 0x05	; 5
    1720:	8b 83       	std	Y+3, r24	; 0x03
    1722:	82 e0       	ldi	r24, 0x02	; 2
    1724:	8a 83       	std	Y+2, r24	; 0x02
    1726:	19 82       	std	Y+1, r1	; 0x01
	uint8_t	u8_ButtonState = u8_KEYPAD_NOT_PRESSED; 
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	8d 83       	std	Y+5, r24	; 0x05
	if(pu8_ReturnKeyNum!=NULL_POINTER)
    172c:	8e 81       	ldd	r24, Y+6	; 0x06
    172e:	9f 81       	ldd	r25, Y+7	; 0x07
    1730:	00 97       	sbiw	r24, 0x00	; 0
    1732:	09 f4       	brne	.+2      	; 0x1736 <KEYPAD_u8GetKeyNum+0x34>
    1734:	4a c0       	rjmp	.+148    	; 0x17ca <KEYPAD_u8GetKeyNum+0xc8>
	{	
		//INTIALIZING THE RETURN POINTER
		*pu8_ReturnKeyNum = u8_KEYPAD_ALL_KEYS_NOT_PRESSED ;
    1736:	ee 81       	ldd	r30, Y+6	; 0x06
    1738:	ff 81       	ldd	r31, Y+7	; 0x07
    173a:	10 82       	st	Z, r1
		//LOOP TO PASS ON ALL COLUMNS 
		for(u8_RowCounter = u8_KEYPAD_ROW1; u8_RowCounter<=u8_KEYPAD_ROW3;u8_RowCounter++)   
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	8a 83       	std	Y+2, r24	; 0x02
    1740:	3f c0       	rjmp	.+126    	; 0x17c0 <KEYPAD_u8GetKeyNum+0xbe>
		{
			//SETTING PIN OF ONE COL. TO LOW SO THAT WE CAN CHECK IF ANY KEY PRESSED 
			DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_RowCounter,u8_DIO_PIN_LOW) ; 
    1742:	8a e0       	ldi	r24, 0x0A	; 10
    1744:	6a 81       	ldd	r22, Y+2	; 0x02
    1746:	40 e0       	ldi	r20, 0x00	; 0
    1748:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
			//LOOP TO PASS ON ALL ROWS 
			for (u8_ColCounter = u8_KEYPAD_COL1; u8_ColCounter<=u8_KEYPAD_COL3;u8_ColCounter++)
    174c:	85 e0       	ldi	r24, 0x05	; 5
    174e:	8b 83       	std	Y+3, r24	; 0x03
    1750:	2c c0       	rjmp	.+88     	; 0x17aa <KEYPAD_u8GetKeyNum+0xa8>
			{	
				 // CHECK IF THE KEY PRESSED WITHOUT THE BOUNCING EFFECT 
				//TOTAL NUMBER OF BUTTONS WE CHECK SO THAT WHEN THEY ARE ADDED TO INTIAL '0' VALUE, WE CAN RETURN THE BUTTON NUM PRESSED
				u8_TotalCount++ ;
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	8f 5f       	subi	r24, 0xFF	; 255
    1756:	89 83       	std	Y+1, r24	; 0x01
				DIO_u8GetPinVal(u8_KEYPAD_PORT,u8_ColCounter,&u8_ButtonState) ;
    1758:	9e 01       	movw	r18, r28
    175a:	2b 5f       	subi	r18, 0xFB	; 251
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	8a e0       	ldi	r24, 0x0A	; 10
    1760:	6b 81       	ldd	r22, Y+3	; 0x03
    1762:	a9 01       	movw	r20, r18
    1764:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_u8GetPinVal>
				if(u8_ButtonState==u8_KEYPAD_PRESSED)
    1768:	8d 81       	ldd	r24, Y+5	; 0x05
    176a:	88 23       	and	r24, r24
    176c:	d9 f4       	brne	.+54     	; 0x17a4 <KEYPAD_u8GetKeyNum+0xa2>
				{
					 KEYPAD_voidDebouncing(u8_ColCounter,&u8_ButtonState) ;
    176e:	9e 01       	movw	r18, r28
    1770:	2b 5f       	subi	r18, 0xFB	; 251
    1772:	3f 4f       	sbci	r19, 0xFF	; 255
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	b9 01       	movw	r22, r18
    1778:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <KEYPAD_voidDebouncing>
					 while(DIO_u8GetPinVal(u8_KEYPAD_PORT,u8_ColCounter,&u8_ButtonState)==u8_KEYPAD_PRESSED) ;
    177c:	9e 01       	movw	r18, r28
    177e:	2b 5f       	subi	r18, 0xFB	; 251
    1780:	3f 4f       	sbci	r19, 0xFF	; 255
    1782:	8a e0       	ldi	r24, 0x0A	; 10
    1784:	6b 81       	ldd	r22, Y+3	; 0x03
    1786:	a9 01       	movw	r20, r18
    1788:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_u8GetPinVal>
    178c:	88 23       	and	r24, r24
    178e:	b1 f3       	breq	.-20     	; 0x177c <KEYPAD_u8GetKeyNum+0x7a>
					 DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_RowCounter,u8_DIO_PIN_HIGH) ;
    1790:	8a e0       	ldi	r24, 0x0A	; 10
    1792:	6a 81       	ldd	r22, Y+2	; 0x02
    1794:	41 e0       	ldi	r20, 0x01	; 1
    1796:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
					 (*pu8_ReturnKeyNum) = u8_TotalCount ;
    179a:	ee 81       	ldd	r30, Y+6	; 0x06
    179c:	ff 81       	ldd	r31, Y+7	; 0x07
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	80 83       	st	Z, r24
    17a2:	06 c0       	rjmp	.+12     	; 0x17b0 <KEYPAD_u8GetKeyNum+0xae>
		for(u8_RowCounter = u8_KEYPAD_ROW1; u8_RowCounter<=u8_KEYPAD_ROW3;u8_RowCounter++)   
		{
			//SETTING PIN OF ONE COL. TO LOW SO THAT WE CAN CHECK IF ANY KEY PRESSED 
			DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_RowCounter,u8_DIO_PIN_LOW) ; 
			//LOOP TO PASS ON ALL ROWS 
			for (u8_ColCounter = u8_KEYPAD_COL1; u8_ColCounter<=u8_KEYPAD_COL3;u8_ColCounter++)
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	8f 5f       	subi	r24, 0xFF	; 255
    17a8:	8b 83       	std	Y+3, r24	; 0x03
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	88 30       	cpi	r24, 0x08	; 8
    17ae:	88 f2       	brcs	.-94     	; 0x1752 <KEYPAD_u8GetKeyNum+0x50>
					 (*pu8_ReturnKeyNum) = u8_TotalCount ;
				   	 break ;
				}
			}
			// MAKE THE COL HIGH AGAIN SO THAT WE CAN CHECK SAME ROWS WITH DIFFERENT COLs. 
			DIO_u8SetPinVal(u8_KEYPAD_PORT,u8_RowCounter,u8_DIO_PIN_HIGH) ; 
    17b0:	8a e0       	ldi	r24, 0x0A	; 10
    17b2:	6a 81       	ldd	r22, Y+2	; 0x02
    17b4:	41 e0       	ldi	r20, 0x01	; 1
    17b6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	if(pu8_ReturnKeyNum!=NULL_POINTER)
	{	
		//INTIALIZING THE RETURN POINTER
		*pu8_ReturnKeyNum = u8_KEYPAD_ALL_KEYS_NOT_PRESSED ;
		//LOOP TO PASS ON ALL COLUMNS 
		for(u8_RowCounter = u8_KEYPAD_ROW1; u8_RowCounter<=u8_KEYPAD_ROW3;u8_RowCounter++)   
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	8f 5f       	subi	r24, 0xFF	; 255
    17be:	8a 83       	std	Y+2, r24	; 0x02
    17c0:	8a 81       	ldd	r24, Y+2	; 0x02
    17c2:	85 30       	cpi	r24, 0x05	; 5
    17c4:	08 f4       	brcc	.+2      	; 0x17c8 <KEYPAD_u8GetKeyNum+0xc6>
    17c6:	bd cf       	rjmp	.-134    	; 0x1742 <KEYPAD_u8GetKeyNum+0x40>
    17c8:	02 c0       	rjmp	.+4      	; 0x17ce <KEYPAD_u8GetKeyNum+0xcc>
		}
	}
	else 
	{
		//IF THE POINTER IS SEND AS NULL_POINTER, RETURN ERROR STATE 
		 u8_ErrorFlag = u8_KEYPAD_NOK ;
    17ca:	83 e3       	ldi	r24, 0x33	; 51
    17cc:	8c 83       	std	Y+4, r24	; 0x04
	}
	return u8_ErrorFlag ; 
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
}
    17d0:	27 96       	adiw	r28, 0x07	; 7
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <KEYPAD_voidDebouncing>:

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
//FUNCTION TO TAKE POINTER TO RETURN BUTTON STATE IF PRESSED OR NOT (WITHOUT THE EFFECT OF BOUNCING) AND ROW NUM
void KEYPAD_voidDebouncing(uint8_t u8_ColNum,uint8_t* pu8_ReturnButtonState)
{
    17e2:	df 93       	push	r29
    17e4:	cf 93       	push	r28
    17e6:	00 d0       	rcall	.+0      	; 0x17e8 <KEYPAD_voidDebouncing+0x6>
    17e8:	00 d0       	rcall	.+0      	; 0x17ea <KEYPAD_voidDebouncing+0x8>
    17ea:	0f 92       	push	r0
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	8b 83       	std	Y+3, r24	; 0x03
    17f2:	7d 83       	std	Y+5, r23	; 0x05
    17f4:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_DebouncingCountPressed = u8_KEYPAD_INTIALIZING_VAR , u8_DebouncingCountNotPressed = u8_KEYPAD_INTIALIZING_VAR ;
    17f6:	1a 82       	std	Y+2, r1	; 0x02
    17f8:	19 82       	std	Y+1, r1	; 0x01
    17fa:	1b c0       	rjmp	.+54     	; 0x1832 <KEYPAD_voidDebouncing+0x50>
	//CHECK IF THERE IS SAME READING FOR BUTTON SUCCESSIVE NUMBER OF TIMES, RETURN BUTTON STATE USING THE POINTER IN ARGUMENT
	while (u8_DebouncingCountPressed <= u8_KEYPAD_DEBOUNCE_SUCCESSIVE_COUNT && u8_DebouncingCountNotPressed <= u8_KEYPAD_DEBOUNCE_SUCCESSIVE_COUNT)
	{
		DIO_u8GetPinVal(u8_KEYPAD_PORT,u8_ColNum,pu8_ReturnButtonState) ;
    17fc:	2c 81       	ldd	r18, Y+4	; 0x04
    17fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1800:	8a e0       	ldi	r24, 0x0A	; 10
    1802:	6b 81       	ldd	r22, Y+3	; 0x03
    1804:	a9 01       	movw	r20, r18
    1806:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <DIO_u8GetPinVal>
		if(pu8_ReturnButtonState==u8_KEYPAD_PRESSED) 
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	9d 81       	ldd	r25, Y+5	; 0x05
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	41 f4       	brne	.+16     	; 0x1822 <KEYPAD_voidDebouncing+0x40>
		{
			u8_DebouncingCountPressed++ ; 
    1812:	8a 81       	ldd	r24, Y+2	; 0x02
    1814:	8f 5f       	subi	r24, 0xFF	; 255
    1816:	8a 83       	std	Y+2, r24	; 0x02
			u8_DebouncingCountNotPressed = u8_KEYPAD_INTIALIZING_VAR ;
    1818:	19 82       	std	Y+1, r1	; 0x01
			*pu8_ReturnButtonState = u8_KEYPAD_PRESSED ; 
    181a:	ec 81       	ldd	r30, Y+4	; 0x04
    181c:	fd 81       	ldd	r31, Y+5	; 0x05
    181e:	10 82       	st	Z, r1
    1820:	08 c0       	rjmp	.+16     	; 0x1832 <KEYPAD_voidDebouncing+0x50>
		}
		else 
		{
			u8_DebouncingCountNotPressed++ ; 
    1822:	89 81       	ldd	r24, Y+1	; 0x01
    1824:	8f 5f       	subi	r24, 0xFF	; 255
    1826:	89 83       	std	Y+1, r24	; 0x01
			u8_DebouncingCountPressed = u8_KEYPAD_INTIALIZING_VAR ;
    1828:	1a 82       	std	Y+2, r1	; 0x02
			*pu8_ReturnButtonState = u8_KEYPAD_NOT_PRESSED ; 
    182a:	ec 81       	ldd	r30, Y+4	; 0x04
    182c:	fd 81       	ldd	r31, Y+5	; 0x05
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	80 83       	st	Z, r24
//FUNCTION TO TAKE POINTER TO RETURN BUTTON STATE IF PRESSED OR NOT (WITHOUT THE EFFECT OF BOUNCING) AND ROW NUM
void KEYPAD_voidDebouncing(uint8_t u8_ColNum,uint8_t* pu8_ReturnButtonState)
{
	uint8_t u8_DebouncingCountPressed = u8_KEYPAD_INTIALIZING_VAR , u8_DebouncingCountNotPressed = u8_KEYPAD_INTIALIZING_VAR ;
	//CHECK IF THERE IS SAME READING FOR BUTTON SUCCESSIVE NUMBER OF TIMES, RETURN BUTTON STATE USING THE POINTER IN ARGUMENT
	while (u8_DebouncingCountPressed <= u8_KEYPAD_DEBOUNCE_SUCCESSIVE_COUNT && u8_DebouncingCountNotPressed <= u8_KEYPAD_DEBOUNCE_SUCCESSIVE_COUNT)
    1832:	8a 81       	ldd	r24, Y+2	; 0x02
    1834:	85 30       	cpi	r24, 0x05	; 5
    1836:	18 f4       	brcc	.+6      	; 0x183e <KEYPAD_voidDebouncing+0x5c>
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	85 30       	cpi	r24, 0x05	; 5
    183c:	f8 f2       	brcs	.-66     	; 0x17fc <KEYPAD_voidDebouncing+0x1a>
			u8_DebouncingCountNotPressed++ ; 
			u8_DebouncingCountPressed = u8_KEYPAD_INTIALIZING_VAR ;
			*pu8_ReturnButtonState = u8_KEYPAD_NOT_PRESSED ; 
		}
	}
}
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <LCD_voidInit>:




void LCD_voidInit(void) 
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
	TIMER0_u8BusyWaitMS(u8_INTIAL_1st_WAITING_TIME_MS)  ;
    1856:	62 e3       	ldi	r22, 0x32	; 50
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_RS,u8_DIO_OUTPUT_PIN) ; 
    1862:	88 e0       	ldi	r24, 0x08	; 8
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	41 e0       	ldi	r20, 0x01	; 1
    1868:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_RW,u8_DIO_OUTPUT_PIN) ;
    186c:	88 e0       	ldi	r24, 0x08	; 8
    186e:	62 e0       	ldi	r22, 0x02	; 2
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_E,u8_DIO_OUTPUT_PIN) ;
    1876:	88 e0       	ldi	r24, 0x08	; 8
    1878:	63 e0       	ldi	r22, 0x03	; 3
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_D4,u8_DIO_OUTPUT_PIN) ;
    1880:	88 e0       	ldi	r24, 0x08	; 8
    1882:	64 e0       	ldi	r22, 0x04	; 4
    1884:	41 e0       	ldi	r20, 0x01	; 1
    1886:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_D5,u8_DIO_OUTPUT_PIN) ;
    188a:	88 e0       	ldi	r24, 0x08	; 8
    188c:	65 e0       	ldi	r22, 0x05	; 5
    188e:	41 e0       	ldi	r20, 0x01	; 1
    1890:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_D6,u8_DIO_OUTPUT_PIN) ;
    1894:	88 e0       	ldi	r24, 0x08	; 8
    1896:	66 e0       	ldi	r22, 0x06	; 6
    1898:	41 e0       	ldi	r20, 0x01	; 1
    189a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_D7,u8_DIO_OUTPUT_PIN) ;
    189e:	88 e0       	ldi	r24, 0x08	; 8
    18a0:	67 e0       	ldi	r22, 0x07	; 7
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <DIO_u8SetPinDir>


	//INTIALIZING COMMANDS TO LCD
	LCD_voidsendCommandData(0x3,0,0) ;
    18a8:	83 e0       	ldi	r24, 0x03	; 3
    18aa:	60 e0       	ldi	r22, 0x00	; 0
    18ac:	40 e0       	ldi	r20, 0x00	; 0
    18ae:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    18b2:	6a e0       	ldi	r22, 0x0A	; 10
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	80 e0       	ldi	r24, 0x00	; 0
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>
	LCD_voidsendCommandData(0x3,0,0) ;
    18be:	83 e0       	ldi	r24, 0x03	; 3
    18c0:	60 e0       	ldi	r22, 0x00	; 0
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    18c8:	6a e0       	ldi	r22, 0x0A	; 10
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x3,0,0) ;
    18d4:	83 e0       	ldi	r24, 0x03	; 3
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	40 e0       	ldi	r20, 0x00	; 0
    18da:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    18de:	6a e0       	ldi	r22, 0x0A	; 10
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x2,0,0) ;
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    18f4:	6a e0       	ldi	r22, 0x0A	; 10
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x20,0,0) ;
    1900:	80 e2       	ldi	r24, 0x20	; 32
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	40 e0       	ldi	r20, 0x00	; 0
    1906:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    190a:	6a e0       	ldi	r22, 0x0A	; 10
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x08,0,0) ;
    1916:	88 e0       	ldi	r24, 0x08	; 8
    1918:	60 e0       	ldi	r22, 0x00	; 0
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    1920:	6a e0       	ldi	r22, 0x0A	; 10
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	80 e0       	ldi	r24, 0x00	; 0
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x01,0,0) ;
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    1936:	6a e0       	ldi	r22, 0x0A	; 10
    1938:	70 e0       	ldi	r23, 0x00	; 0
    193a:	80 e0       	ldi	r24, 0x00	; 0
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x06,0,0) ;
    1942:	86 e0       	ldi	r24, 0x06	; 6
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    194c:	6a e0       	ldi	r22, 0x0A	; 10
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x0C,0,0) ;
    1958:	8c e0       	ldi	r24, 0x0C	; 12
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	40 e0       	ldi	r20, 0x00	; 0
    195e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    1962:	6a e0       	ldi	r22, 0x0A	; 10
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>


	
	
}
    196e:	cf 91       	pop	r28
    1970:	df 91       	pop	r29
    1972:	08 95       	ret

00001974 <LCD_voidsendCommandData>:

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//CHOOSE TO VALUES OF RS AND RW AND SEND THE COMMAND OR DATA YOU WANT 
void LCD_voidsendCommandData(uint8_t u8_WantedCommand,uint8_t u8_SetRsVal,uint8_t u8_SetRwVal)
{
    1974:	df 93       	push	r29
    1976:	cf 93       	push	r28
    1978:	00 d0       	rcall	.+0      	; 0x197a <LCD_voidsendCommandData+0x6>
    197a:	0f 92       	push	r0
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	89 83       	std	Y+1, r24	; 0x01
    1982:	6a 83       	std	Y+2, r22	; 0x02
    1984:	4b 83       	std	Y+3, r20	; 0x03
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_HIGH) ;
    1986:	88 e0       	ldi	r24, 0x08	; 8
    1988:	63 e0       	ldi	r22, 0x03	; 3
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_RS,u8_SetRsVal) ;
    1990:	88 e0       	ldi	r24, 0x08	; 8
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	4a 81       	ldd	r20, Y+2	; 0x02
    1996:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_RW,u8_SetRwVal) ;
    199a:	88 e0       	ldi	r24, 0x08	; 8
    199c:	62 e0       	ldi	r22, 0x02	; 2
    199e:	4b 81       	ldd	r20, Y+3	; 0x03
    19a0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	
	/*SETTING HIGHER SIGNIFICANT BITS */
	TIMER0_u8BusyWaitMS(10) ;
    19a4:	6a e0       	ldi	r22, 0x0A	; 10
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	80 e0       	ldi	r24, 0x00	; 0
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D7,GET_BIT(u8_WantedCommand,u8_LCD_D7_BIT));
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
    19b2:	98 2f       	mov	r25, r24
    19b4:	99 1f       	adc	r25, r25
    19b6:	99 27       	eor	r25, r25
    19b8:	99 1f       	adc	r25, r25
    19ba:	88 e0       	ldi	r24, 0x08	; 8
    19bc:	67 e0       	ldi	r22, 0x07	; 7
    19be:	49 2f       	mov	r20, r25
    19c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D6,GET_BIT(u8_WantedCommand,u8_LCD_D6_BIT));
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	82 95       	swap	r24
    19c8:	86 95       	lsr	r24
    19ca:	86 95       	lsr	r24
    19cc:	83 70       	andi	r24, 0x03	; 3
    19ce:	98 2f       	mov	r25, r24
    19d0:	91 70       	andi	r25, 0x01	; 1
    19d2:	88 e0       	ldi	r24, 0x08	; 8
    19d4:	66 e0       	ldi	r22, 0x06	; 6
    19d6:	49 2f       	mov	r20, r25
    19d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D5,GET_BIT(u8_WantedCommand,u8_LCD_D5_BIT)) ;
    19dc:	89 81       	ldd	r24, Y+1	; 0x01
    19de:	82 95       	swap	r24
    19e0:	86 95       	lsr	r24
    19e2:	87 70       	andi	r24, 0x07	; 7
    19e4:	98 2f       	mov	r25, r24
    19e6:	91 70       	andi	r25, 0x01	; 1
    19e8:	88 e0       	ldi	r24, 0x08	; 8
    19ea:	65 e0       	ldi	r22, 0x05	; 5
    19ec:	49 2f       	mov	r20, r25
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D4,GET_BIT(u8_WantedCommand,u8_LCD_D4_BIT)) ;
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	82 95       	swap	r24
    19f6:	8f 70       	andi	r24, 0x0F	; 15
    19f8:	98 2f       	mov	r25, r24
    19fa:	91 70       	andi	r25, 0x01	; 1
    19fc:	88 e0       	ldi	r24, 0x08	; 8
    19fe:	64 e0       	ldi	r22, 0x04	; 4
    1a00:	49 2f       	mov	r20, r25
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_LOW) ;
    1a06:	88 e0       	ldi	r24, 0x08	; 8
    1a08:	63 e0       	ldi	r22, 0x03	; 3
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	TIMER0_u8BusyWaitMS(10) ;
    1a10:	6a e0       	ldi	r22, 0x0A	; 10
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>
	
	/*SETTING LOWER SIGNIFICANT BITS */
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_HIGH) ;
    1a1c:	88 e0       	ldi	r24, 0x08	; 8
    1a1e:	63 e0       	ldi	r22, 0x03	; 3
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D7,GET_BIT(u8_WantedCommand,u8_LCD_D3_BIT));
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	86 95       	lsr	r24
    1a2a:	86 95       	lsr	r24
    1a2c:	86 95       	lsr	r24
    1a2e:	98 2f       	mov	r25, r24
    1a30:	91 70       	andi	r25, 0x01	; 1
    1a32:	88 e0       	ldi	r24, 0x08	; 8
    1a34:	67 e0       	ldi	r22, 0x07	; 7
    1a36:	49 2f       	mov	r20, r25
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D6,GET_BIT(u8_WantedCommand,u8_LCD_D2_BIT));
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	86 95       	lsr	r24
    1a40:	86 95       	lsr	r24
    1a42:	98 2f       	mov	r25, r24
    1a44:	91 70       	andi	r25, 0x01	; 1
    1a46:	88 e0       	ldi	r24, 0x08	; 8
    1a48:	66 e0       	ldi	r22, 0x06	; 6
    1a4a:	49 2f       	mov	r20, r25
    1a4c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D5,GET_BIT(u8_WantedCommand,u8_LCD_D1_BIT)) ;
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	86 95       	lsr	r24
    1a54:	98 2f       	mov	r25, r24
    1a56:	91 70       	andi	r25, 0x01	; 1
    1a58:	88 e0       	ldi	r24, 0x08	; 8
    1a5a:	65 e0       	ldi	r22, 0x05	; 5
    1a5c:	49 2f       	mov	r20, r25
    1a5e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D4,GET_BIT(u8_WantedCommand,u8_LCD_D0_BIT)) ;
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	98 2f       	mov	r25, r24
    1a66:	91 70       	andi	r25, 0x01	; 1
    1a68:	88 e0       	ldi	r24, 0x08	; 8
    1a6a:	64 e0       	ldi	r22, 0x04	; 4
    1a6c:	49 2f       	mov	r20, r25
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	TIMER0_u8BusyWaitMS(10) ;
    1a72:	6a e0       	ldi	r22, 0x0A	; 10
    1a74:	70 e0       	ldi	r23, 0x00	; 0
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_LOW) ;
    1a7e:	88 e0       	ldi	r24, 0x08	; 8
    1a80:	63 e0       	ldi	r22, 0x03	; 3
    1a82:	40 e0       	ldi	r20, 0x00	; 0
    1a84:	0e 94 49 00 	call	0x92	; 0x92 <DIO_u8SetPinVal>
	TIMER0_u8BusyWaitMS(10) ;
    1a88:	6a e0       	ldi	r22, 0x0A	; 10
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>
	
}
    1a94:	0f 90       	pop	r0
    1a96:	0f 90       	pop	r0
    1a98:	0f 90       	pop	r0
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <LCD_voidPrintChar>:

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//PRINT CHAR ON LCD
void LCD_voidPrintChar(uint8_t u8_WantedCharPrint)
{
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	0f 92       	push	r0
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidsendCommandData(u8_WantedCharPrint,1,0) ; 
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	61 e0       	ldi	r22, 0x01	; 1
    1ab0:	40 e0       	ldi	r20, 0x00	; 0
    1ab2:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
}
    1ab6:	0f 90       	pop	r0
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	08 95       	ret

00001abe <LCD_voidPrintStr>:

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//PRINT STRING ON LCD 
void LCD_voidPrintStr(uint8_t* u8_WantedStrPrint) 
{
    1abe:	df 93       	push	r29
    1ac0:	cf 93       	push	r28
    1ac2:	00 d0       	rcall	.+0      	; 0x1ac4 <LCD_voidPrintStr+0x6>
    1ac4:	0f 92       	push	r0
    1ac6:	cd b7       	in	r28, 0x3d	; 61
    1ac8:	de b7       	in	r29, 0x3e	; 62
    1aca:	9b 83       	std	Y+3, r25	; 0x03
    1acc:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_IndexCounter = u8_LCD_INTIALIZING_VAR ; 
    1ace:	19 82       	std	Y+1, r1	; 0x01
    1ad0:	10 c0       	rjmp	.+32     	; 0x1af2 <LCD_voidPrintStr+0x34>
	while(u8_WantedStrPrint[u8_IndexCounter]!=NULL_CHAR)
	{
		LCD_voidsendCommandData(u8_WantedStrPrint[u8_IndexCounter],1,0) ; 
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ada:	9b 81       	ldd	r25, Y+3	; 0x03
    1adc:	fc 01       	movw	r30, r24
    1ade:	e2 0f       	add	r30, r18
    1ae0:	f3 1f       	adc	r31, r19
    1ae2:	80 81       	ld	r24, Z
    1ae4:	61 e0       	ldi	r22, 0x01	; 1
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
		u8_IndexCounter++ ; 
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	8f 5f       	subi	r24, 0xFF	; 255
    1af0:	89 83       	std	Y+1, r24	; 0x01
/////////////////////////////////////////////////////////////////////////////////////////
//PRINT STRING ON LCD 
void LCD_voidPrintStr(uint8_t* u8_WantedStrPrint) 
{
	uint8_t u8_IndexCounter = u8_LCD_INTIALIZING_VAR ; 
	while(u8_WantedStrPrint[u8_IndexCounter]!=NULL_CHAR)
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	9b 81       	ldd	r25, Y+3	; 0x03
    1afc:	fc 01       	movw	r30, r24
    1afe:	e2 0f       	add	r30, r18
    1b00:	f3 1f       	adc	r31, r19
    1b02:	80 81       	ld	r24, Z
    1b04:	88 23       	and	r24, r24
    1b06:	29 f7       	brne	.-54     	; 0x1ad2 <LCD_voidPrintStr+0x14>
	{
		LCD_voidsendCommandData(u8_WantedStrPrint[u8_IndexCounter],1,0) ; 
		u8_IndexCounter++ ; 
	}
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	cf 91       	pop	r28
    1b10:	df 91       	pop	r29
    1b12:	08 95       	ret

00001b14 <LCD_voidPrintNum>:

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//PRINT NUMBER TO LCD 
void LCD_voidPrintNum(uint32_t u32_WantedNumPrint) 
{
    1b14:	df 93       	push	r29
    1b16:	cf 93       	push	r28
    1b18:	cd b7       	in	r28, 0x3d	; 61
    1b1a:	de b7       	in	r29, 0x3e	; 62
    1b1c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
    1b28:	6b 87       	std	Y+11, r22	; 0x0b
    1b2a:	7c 87       	std	Y+12, r23	; 0x0c
    1b2c:	8d 87       	std	Y+13, r24	; 0x0d
    1b2e:	9e 87       	std	Y+14, r25	; 0x0e
	uint8_t u8_PrintCounter =  u8_LCD_INTIALIZING_VAR  ;
    1b30:	1a 86       	std	Y+10, r1	; 0x0a
	uint8_t u8_TempPrintVal = u8_LCD_INTIALIZING_VAR  ; 
    1b32:	19 86       	std	Y+9, r1	; 0x09
	uint32_t u32_CopyNumPrint = u32_WantedNumPrint ; 
    1b34:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b36:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b38:	ad 85       	ldd	r26, Y+13	; 0x0d
    1b3a:	be 85       	ldd	r27, Y+14	; 0x0e
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
    1b3e:	9e 83       	std	Y+6, r25	; 0x06
    1b40:	af 83       	std	Y+7, r26	; 0x07
    1b42:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t u32_u32WeightOfPrnitedNum = u8_INTIALIZING_WEIGHT_VAR ;
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	a0 e0       	ldi	r26, 0x00	; 0
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	ab 83       	std	Y+3, r26	; 0x03
    1b52:	bc 83       	std	Y+4, r27	; 0x04
    1b54:	2a c0       	rjmp	.+84     	; 0x1baa <LCD_voidPrintNum+0x96>
	//GET THE WEIGHT OF THE PRINTED NUMBERS AND THE NUBER OF ITERATION NEEDED 
	while(u32_CopyNumPrint>u8_LCD_INTIALIZING_VAR)
	{
		u8_PrintCounter++ ;
    1b56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b58:	8f 5f       	subi	r24, 0xFF	; 255
    1b5a:	8a 87       	std	Y+10, r24	; 0x0a
		if(u8_PrintCounter>u8_INTIALIZING_WEIGHT_VAR)
    1b5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b5e:	82 30       	cpi	r24, 0x02	; 2
    1b60:	90 f0       	brcs	.+36     	; 0x1b86 <LCD_voidPrintNum+0x72>
			u32_u32WeightOfPrnitedNum*= 10 ;  
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	9a 81       	ldd	r25, Y+2	; 0x02
    1b66:	ab 81       	ldd	r26, Y+3	; 0x03
    1b68:	bc 81       	ldd	r27, Y+4	; 0x04
    1b6a:	2a e0       	ldi	r18, 0x0A	; 10
    1b6c:	30 e0       	ldi	r19, 0x00	; 0
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__mulsi3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	9a 83       	std	Y+2, r25	; 0x02
    1b82:	ab 83       	std	Y+3, r26	; 0x03
    1b84:	bc 83       	std	Y+4, r27	; 0x04
		u32_CopyNumPrint = u32_CopyNumPrint/10 ; 
    1b86:	8d 81       	ldd	r24, Y+5	; 0x05
    1b88:	9e 81       	ldd	r25, Y+6	; 0x06
    1b8a:	af 81       	ldd	r26, Y+7	; 0x07
    1b8c:	b8 85       	ldd	r27, Y+8	; 0x08
    1b8e:	2a e0       	ldi	r18, 0x0A	; 10
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e0       	ldi	r20, 0x00	; 0
    1b94:	50 e0       	ldi	r21, 0x00	; 0
    1b96:	bc 01       	movw	r22, r24
    1b98:	cd 01       	movw	r24, r26
    1b9a:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodsi4>
    1b9e:	da 01       	movw	r26, r20
    1ba0:	c9 01       	movw	r24, r18
    1ba2:	8d 83       	std	Y+5, r24	; 0x05
    1ba4:	9e 83       	std	Y+6, r25	; 0x06
    1ba6:	af 83       	std	Y+7, r26	; 0x07
    1ba8:	b8 87       	std	Y+8, r27	; 0x08
	uint8_t u8_PrintCounter =  u8_LCD_INTIALIZING_VAR  ;
	uint8_t u8_TempPrintVal = u8_LCD_INTIALIZING_VAR  ; 
	uint32_t u32_CopyNumPrint = u32_WantedNumPrint ; 
	uint32_t u32_u32WeightOfPrnitedNum = u8_INTIALIZING_WEIGHT_VAR ;
	//GET THE WEIGHT OF THE PRINTED NUMBERS AND THE NUBER OF ITERATION NEEDED 
	while(u32_CopyNumPrint>u8_LCD_INTIALIZING_VAR)
    1baa:	8d 81       	ldd	r24, Y+5	; 0x05
    1bac:	9e 81       	ldd	r25, Y+6	; 0x06
    1bae:	af 81       	ldd	r26, Y+7	; 0x07
    1bb0:	b8 85       	ldd	r27, Y+8	; 0x08
    1bb2:	00 97       	sbiw	r24, 0x00	; 0
    1bb4:	a1 05       	cpc	r26, r1
    1bb6:	b1 05       	cpc	r27, r1
    1bb8:	71 f6       	brne	.-100    	; 0x1b56 <LCD_voidPrintNum+0x42>
    1bba:	3c c0       	rjmp	.+120    	; 0x1c34 <LCD_voidPrintNum+0x120>
	}
	//PRINT THE WANTED NUMBER FROM THE HIGHER ORDER NUMBERS TO THE LOWER ORDER ONE 
	while(u8_PrintCounter>u8_LCD_INTIALIZING_VAR)
	{
		
		u8_TempPrintVal = u32_WantedNumPrint /u32_u32WeightOfPrnitedNum ; //GET THE HIGHEST ORDER NUMBER TO PRINT 
    1bbc:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bbe:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bc0:	ad 85       	ldd	r26, Y+13	; 0x0d
    1bc2:	be 85       	ldd	r27, Y+14	; 0x0e
    1bc4:	29 81       	ldd	r18, Y+1	; 0x01
    1bc6:	3a 81       	ldd	r19, Y+2	; 0x02
    1bc8:	4b 81       	ldd	r20, Y+3	; 0x03
    1bca:	5c 81       	ldd	r21, Y+4	; 0x04
    1bcc:	bc 01       	movw	r22, r24
    1bce:	cd 01       	movw	r24, r26
    1bd0:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodsi4>
    1bd4:	da 01       	movw	r26, r20
    1bd6:	c9 01       	movw	r24, r18
    1bd8:	89 87       	std	Y+9, r24	; 0x09
		u32_WantedNumPrint = u32_WantedNumPrint - (u32_WantedNumPrint/u32_u32WeightOfPrnitedNum)*u32_u32WeightOfPrnitedNum ; //UPDATE THE PRINTED VAR BY DECREMENT THE PRINTED DIGIT
    1bda:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bdc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bde:	ad 85       	ldd	r26, Y+13	; 0x0d
    1be0:	be 85       	ldd	r27, Y+14	; 0x0e
    1be2:	29 81       	ldd	r18, Y+1	; 0x01
    1be4:	3a 81       	ldd	r19, Y+2	; 0x02
    1be6:	4b 81       	ldd	r20, Y+3	; 0x03
    1be8:	5c 81       	ldd	r21, Y+4	; 0x04
    1bea:	bc 01       	movw	r22, r24
    1bec:	cd 01       	movw	r24, r26
    1bee:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodsi4>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	8b 87       	std	Y+11, r24	; 0x0b
    1bf8:	9c 87       	std	Y+12, r25	; 0x0c
    1bfa:	ad 87       	std	Y+13, r26	; 0x0d
    1bfc:	be 87       	std	Y+14, r27	; 0x0e
		u32_u32WeightOfPrnitedNum = u32_u32WeightOfPrnitedNum / 10 ; // UPDATE THE WEGHT OG THE VALUE REMAINNING 
    1bfe:	89 81       	ldd	r24, Y+1	; 0x01
    1c00:	9a 81       	ldd	r25, Y+2	; 0x02
    1c02:	ab 81       	ldd	r26, Y+3	; 0x03
    1c04:	bc 81       	ldd	r27, Y+4	; 0x04
    1c06:	2a e0       	ldi	r18, 0x0A	; 10
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e0       	ldi	r20, 0x00	; 0
    1c0c:	50 e0       	ldi	r21, 0x00	; 0
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodsi4>
    1c16:	da 01       	movw	r26, r20
    1c18:	c9 01       	movw	r24, r18
    1c1a:	89 83       	std	Y+1, r24	; 0x01
    1c1c:	9a 83       	std	Y+2, r25	; 0x02
    1c1e:	ab 83       	std	Y+3, r26	; 0x03
    1c20:	bc 83       	std	Y+4, r27	; 0x04
		u8_TempPrintVal = u8_TempPrintVal + u8_CONVERT_NUM_TO_ASCII ; // CONVERT VALUE OF THE PRINTED NUMBER TO ASCII
    1c22:	89 85       	ldd	r24, Y+9	; 0x09
    1c24:	80 5d       	subi	r24, 0xD0	; 208
    1c26:	89 87       	std	Y+9, r24	; 0x09
		LCD_voidPrintChar(u8_TempPrintVal) ; //PRINT THE NUMBER 
    1c28:	89 85       	ldd	r24, Y+9	; 0x09
    1c2a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD_voidPrintChar>
		u8_PrintCounter-- ; //DECREMENT BY 1 
    1c2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c30:	81 50       	subi	r24, 0x01	; 1
    1c32:	8a 87       	std	Y+10, r24	; 0x0a
		if(u8_PrintCounter>u8_INTIALIZING_WEIGHT_VAR)
			u32_u32WeightOfPrnitedNum*= 10 ;  
		u32_CopyNumPrint = u32_CopyNumPrint/10 ; 
	}
	//PRINT THE WANTED NUMBER FROM THE HIGHER ORDER NUMBERS TO THE LOWER ORDER ONE 
	while(u8_PrintCounter>u8_LCD_INTIALIZING_VAR)
    1c34:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c36:	88 23       	and	r24, r24
    1c38:	09 f6       	brne	.-126    	; 0x1bbc <LCD_voidPrintNum+0xa8>
		u32_u32WeightOfPrnitedNum = u32_u32WeightOfPrnitedNum / 10 ; // UPDATE THE WEGHT OG THE VALUE REMAINNING 
		u8_TempPrintVal = u8_TempPrintVal + u8_CONVERT_NUM_TO_ASCII ; // CONVERT VALUE OF THE PRINTED NUMBER TO ASCII
		LCD_voidPrintChar(u8_TempPrintVal) ; //PRINT THE NUMBER 
		u8_PrintCounter-- ; //DECREMENT BY 1 
	}
}
    1c3a:	2e 96       	adiw	r28, 0x0e	; 14
    1c3c:	0f b6       	in	r0, 0x3f	; 63
    1c3e:	f8 94       	cli
    1c40:	de bf       	out	0x3e, r29	; 62
    1c42:	0f be       	out	0x3f, r0	; 63
    1c44:	cd bf       	out	0x3d, r28	; 61
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <LCD_voidMoveCursor>:

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//MOVING THE CURSOR TO THE LEFT OR RIGHT BY SENDING COMMAND TO LCD_voidsendCommandData
void LCD_voidMoveCursor(uint8_t u8_WantedDir) 
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	0f 92       	push	r0
    1c52:	cd b7       	in	r28, 0x3d	; 61
    1c54:	de b7       	in	r29, 0x3e	; 62
    1c56:	89 83       	std	Y+1, r24	; 0x01
	if(u8_WantedDir==u8_LCD_RIGHT)
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	84 31       	cpi	r24, 0x14	; 20
    1c5c:	31 f4       	brne	.+12     	; 0x1c6a <LCD_voidMoveCursor+0x1e>
	{
		LCD_voidsendCommandData(u8_LCD_RIGHT,0,0) ;
    1c5e:	84 e1       	ldi	r24, 0x14	; 20
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
    1c68:	05 c0       	rjmp	.+10     	; 0x1c74 <LCD_voidMoveCursor+0x28>
	}
	else 
	{
		LCD_voidsendCommandData(u8_LCD_LEFT,0,0) ;
    1c6a:	80 e1       	ldi	r24, 0x10	; 16
    1c6c:	60 e0       	ldi	r22, 0x00	; 0
    1c6e:	40 e0       	ldi	r20, 0x00	; 0
    1c70:	0e 94 ba 0c 	call	0x1974	; 0x1974 <LCD_voidsendCommandData>
	}
	TIMER0_u8BusyWaitMS(10) ;
    1c74:	6a e0       	ldi	r22, 0x0A	; 10
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	0e 94 63 07 	call	0xec6	; 0xec6 <TIMER0_u8BusyWaitMS>

}
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <main>:
#include "../ECUAL/lcd_interface.h"

//#include <util/delay.h>

int main()
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	0f 92       	push	r0
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_KeyPadRead = 0 ;
    1c92:	19 82       	std	Y+1, r1	; 0x01
    KEYPAD_voidInit() ;
    1c94:	0e 94 3c 0b 	call	0x1678	; 0x1678 <KEYPAD_voidInit>
    LCD_voidInit();
    1c98:	0e 94 27 0c 	call	0x184e	; 0x184e <LCD_voidInit>
	while(1)
	{
		KEYPAD_u8GetKeyNum(&u8_KeyPadRead) ;
    1c9c:	ce 01       	movw	r24, r28
    1c9e:	01 96       	adiw	r24, 0x01	; 1
    1ca0:	0e 94 81 0b 	call	0x1702	; 0x1702 <KEYPAD_u8GetKeyNum>
		if(u8_KeyPadRead>0 && u8_KeyPadRead<=9)
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
    1ca6:	88 23       	and	r24, r24
    1ca8:	c9 f3       	breq	.-14     	; 0x1c9c <main+0x14>
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	8a 30       	cpi	r24, 0x0A	; 10
    1cae:	b0 f7       	brcc	.-20     	; 0x1c9c <main+0x14>
		{
			LCD_voidPrintNum(u8_KeyPadRead) ;
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	a0 e0       	ldi	r26, 0x00	; 0
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	bc 01       	movw	r22, r24
    1cbc:	cd 01       	movw	r24, r26
    1cbe:	0e 94 8a 0d 	call	0x1b14	; 0x1b14 <LCD_voidPrintNum>
			LCD_voidMoveCursor(u8_LCD_LEFT) ;
    1cc2:	80 e1       	ldi	r24, 0x10	; 16
    1cc4:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LCD_voidMoveCursor>
    1cc8:	e9 cf       	rjmp	.-46     	; 0x1c9c <main+0x14>

00001cca <__mulsi3>:
    1cca:	62 9f       	mul	r22, r18
    1ccc:	d0 01       	movw	r26, r0
    1cce:	73 9f       	mul	r23, r19
    1cd0:	f0 01       	movw	r30, r0
    1cd2:	82 9f       	mul	r24, r18
    1cd4:	e0 0d       	add	r30, r0
    1cd6:	f1 1d       	adc	r31, r1
    1cd8:	64 9f       	mul	r22, r20
    1cda:	e0 0d       	add	r30, r0
    1cdc:	f1 1d       	adc	r31, r1
    1cde:	92 9f       	mul	r25, r18
    1ce0:	f0 0d       	add	r31, r0
    1ce2:	83 9f       	mul	r24, r19
    1ce4:	f0 0d       	add	r31, r0
    1ce6:	74 9f       	mul	r23, r20
    1ce8:	f0 0d       	add	r31, r0
    1cea:	65 9f       	mul	r22, r21
    1cec:	f0 0d       	add	r31, r0
    1cee:	99 27       	eor	r25, r25
    1cf0:	72 9f       	mul	r23, r18
    1cf2:	b0 0d       	add	r27, r0
    1cf4:	e1 1d       	adc	r30, r1
    1cf6:	f9 1f       	adc	r31, r25
    1cf8:	63 9f       	mul	r22, r19
    1cfa:	b0 0d       	add	r27, r0
    1cfc:	e1 1d       	adc	r30, r1
    1cfe:	f9 1f       	adc	r31, r25
    1d00:	bd 01       	movw	r22, r26
    1d02:	cf 01       	movw	r24, r30
    1d04:	11 24       	eor	r1, r1
    1d06:	08 95       	ret

00001d08 <__udivmodsi4>:
    1d08:	a1 e2       	ldi	r26, 0x21	; 33
    1d0a:	1a 2e       	mov	r1, r26
    1d0c:	aa 1b       	sub	r26, r26
    1d0e:	bb 1b       	sub	r27, r27
    1d10:	fd 01       	movw	r30, r26
    1d12:	0d c0       	rjmp	.+26     	; 0x1d2e <__udivmodsi4_ep>

00001d14 <__udivmodsi4_loop>:
    1d14:	aa 1f       	adc	r26, r26
    1d16:	bb 1f       	adc	r27, r27
    1d18:	ee 1f       	adc	r30, r30
    1d1a:	ff 1f       	adc	r31, r31
    1d1c:	a2 17       	cp	r26, r18
    1d1e:	b3 07       	cpc	r27, r19
    1d20:	e4 07       	cpc	r30, r20
    1d22:	f5 07       	cpc	r31, r21
    1d24:	20 f0       	brcs	.+8      	; 0x1d2e <__udivmodsi4_ep>
    1d26:	a2 1b       	sub	r26, r18
    1d28:	b3 0b       	sbc	r27, r19
    1d2a:	e4 0b       	sbc	r30, r20
    1d2c:	f5 0b       	sbc	r31, r21

00001d2e <__udivmodsi4_ep>:
    1d2e:	66 1f       	adc	r22, r22
    1d30:	77 1f       	adc	r23, r23
    1d32:	88 1f       	adc	r24, r24
    1d34:	99 1f       	adc	r25, r25
    1d36:	1a 94       	dec	r1
    1d38:	69 f7       	brne	.-38     	; 0x1d14 <__udivmodsi4_loop>
    1d3a:	60 95       	com	r22
    1d3c:	70 95       	com	r23
    1d3e:	80 95       	com	r24
    1d40:	90 95       	com	r25
    1d42:	9b 01       	movw	r18, r22
    1d44:	ac 01       	movw	r20, r24
    1d46:	bd 01       	movw	r22, r26
    1d48:	cf 01       	movw	r24, r30
    1d4a:	08 95       	ret

00001d4c <_exit>:
    1d4c:	f8 94       	cli

00001d4e <__stop_program>:
    1d4e:	ff cf       	rjmp	.-2      	; 0x1d4e <__stop_program>
