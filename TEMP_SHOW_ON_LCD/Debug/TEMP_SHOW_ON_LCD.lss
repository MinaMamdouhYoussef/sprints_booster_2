
TEMP_SHOW_ON_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002158  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002158  000021ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800070  00800070  000021fc  2**0
                  ALLOC
  3 .stab         00002850  00000000  00000000  000021fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa9  00000000  00000000  00004a4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 3d 09 	jmp	0x127a	; 0x127a <__vector_10>
      2c:	0c 94 70 09 	jmp	0x12e0	; 0x12e0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e5       	ldi	r30, 0x58	; 88
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 47 10 	call	0x208e	; 0x208e <main>
      8a:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void ADC_voidInit(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(Ru8_ADMUX,u8_ADC_REFS0) ;
	#elif u8_ADC_VREF==u8_ADC_VCC_INTERNAL_REF
		CLR_BIT(Ru8_ADMUX,u8_ADC_REFS1) ; 
		SET_BIT(Ru8_ADMUX,u8_ADC_REFS0) ;		
	#elif u8_ADC_VREF==u8_ADC_2560mV_INTERNAL_REF
		SET_BIT(Ru8_ADMUX,u8_ADC_REFS1) ; 
      9a:	a7 e2       	ldi	r26, 0x27	; 39
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e7 e2       	ldi	r30, 0x27	; 39
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	80 81       	ld	r24, Z
      a4:	80 68       	ori	r24, 0x80	; 128
      a6:	8c 93       	st	X, r24
		SET_BIT(Ru8_ADMUX,u8_ADC_REFS0) ;	
      a8:	a7 e2       	ldi	r26, 0x27	; 39
      aa:	b0 e0       	ldi	r27, 0x00	; 0
      ac:	e7 e2       	ldi	r30, 0x27	; 39
      ae:	f0 e0       	ldi	r31, 0x00	; 0
      b0:	80 81       	ld	r24, Z
      b2:	80 64       	ori	r24, 0x40	; 64
      b4:	8c 93       	st	X, r24
	// Adjust the adc result to the right 
	//CLR_BIT(Ru8_ADMUX,u8_ADC_ADLAR);
	
	//set the wanted channel for the ADC single mode 
	#if u8_ADC_CH_SELECT==u8_ADC_CH0
		CLR_BIT(Ru8_ADMUX,u8_ADC_MUX4) ; 
      b6:	a7 e2       	ldi	r26, 0x27	; 39
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	e7 e2       	ldi	r30, 0x27	; 39
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	80 81       	ld	r24, Z
      c0:	8f 7e       	andi	r24, 0xEF	; 239
      c2:	8c 93       	st	X, r24
		CLR_BIT(Ru8_ADMUX,u8_ADC_MUX3) ;
      c4:	a7 e2       	ldi	r26, 0x27	; 39
      c6:	b0 e0       	ldi	r27, 0x00	; 0
      c8:	e7 e2       	ldi	r30, 0x27	; 39
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	80 81       	ld	r24, Z
      ce:	87 7f       	andi	r24, 0xF7	; 247
      d0:	8c 93       	st	X, r24
		CLR_BIT(Ru8_ADMUX,u8_ADC_MUX2) ; 
      d2:	a7 e2       	ldi	r26, 0x27	; 39
      d4:	b0 e0       	ldi	r27, 0x00	; 0
      d6:	e7 e2       	ldi	r30, 0x27	; 39
      d8:	f0 e0       	ldi	r31, 0x00	; 0
      da:	80 81       	ld	r24, Z
      dc:	8b 7f       	andi	r24, 0xFB	; 251
      de:	8c 93       	st	X, r24
		CLR_BIT(Ru8_ADMUX,u8_ADC_MUX1) ;
      e0:	a7 e2       	ldi	r26, 0x27	; 39
      e2:	b0 e0       	ldi	r27, 0x00	; 0
      e4:	e7 e2       	ldi	r30, 0x27	; 39
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	8d 7f       	andi	r24, 0xFD	; 253
      ec:	8c 93       	st	X, r24
		CLR_BIT(Ru8_ADMUX,u8_ADC_MUX0) ;
      ee:	a7 e2       	ldi	r26, 0x27	; 39
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	e7 e2       	ldi	r30, 0x27	; 39
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 81       	ld	r24, Z
      f8:	8e 7f       	andi	r24, 0xFE	; 254
      fa:	8c 93       	st	X, r24
	#endif 


	//set ADC EN or DIS 
	#if u8_ADC_STATE==u8_ADC_ENABLE
		SET_BIT(Ru8_ADCSRA,u8_ADC_ADEN) ;
      fc:	a6 e2       	ldi	r26, 0x26	; 38
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	e6 e2       	ldi	r30, 0x26	; 38
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	80 68       	ori	r24, 0x80	; 128
     108:	8c 93       	st	X, r24

	//set ADC interrupt after finishing ADC conversion
	#if u8_ADC_INT_STATE==u8_ADC_INT_EN 
		SET_BIT(Ru8_ADCSRA,u8_ADC_ADIE) ;               
	#elif u8_ADC_INT_STATE==u8_ADC_INT_DIS
		CLR_BIT(Ru8_ADCSRA,u8_ADC_ADIE) ;
     10a:	a6 e2       	ldi	r26, 0x26	; 38
     10c:	b0 e0       	ldi	r27, 0x00	; 0
     10e:	e6 e2       	ldi	r30, 0x26	; 38
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	80 81       	ld	r24, Z
     114:	87 7f       	andi	r24, 0xF7	; 247
     116:	8c 93       	st	X, r24
		#error "ADC prebuild ADC interrupt state config error"
	#endif	

	//set state of auto trigger EN or DIS and if EN set the trigger source 
	#if u8_ADC_AUTO_TRIG_STATE==u8_AUTO_TRIG_EN  
		SET_BIT(Ru8_ADCSRA,u8_ADC_ADATE) ;
     118:	a6 e2       	ldi	r26, 0x26	; 38
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	e6 e2       	ldi	r30, 0x26	; 38
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	80 81       	ld	r24, Z
     122:	80 62       	ori	r24, 0x20	; 32
     124:	8c 93       	st	X, r24
		#if u8_ADC_TRIG_SOURCE==u8_ADC_FREE_RUNNING_MODE
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS2) ;
     126:	a0 e5       	ldi	r26, 0x50	; 80
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	e0 e5       	ldi	r30, 0x50	; 80
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
     130:	8f 77       	andi	r24, 0x7F	; 127
     132:	8c 93       	st	X, r24
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS1) ;
     134:	a0 e5       	ldi	r26, 0x50	; 80
     136:	b0 e0       	ldi	r27, 0x00	; 0
     138:	e0 e5       	ldi	r30, 0x50	; 80
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	8f 7b       	andi	r24, 0xBF	; 191
     140:	8c 93       	st	X, r24
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS0) ;
     142:	a0 e5       	ldi	r26, 0x50	; 80
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	e0 e5       	ldi	r30, 0x50	; 80
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	8f 7d       	andi	r24, 0xDF	; 223
     14e:	8c 93       	st	X, r24
	#elif u8_PRESCALER_SELECT == u8_ADC_PRE_64
		SET_BIT(Ru8_ADCSRA,u8_ADC_ADPS2) ;
		SET_BIT(Ru8_ADCSRA,u8_ADC_ADPS1) ;
		CLR_BIT(Ru8_ADCSRA,u8_ADC_ADPS0) ;
	#elif u8_PRESCALER_SELECT == u8_ADC_PRE_128 
		SET_BIT(Ru8_ADCSRA,u8_ADC_ADPS2) ;
     150:	a6 e2       	ldi	r26, 0x26	; 38
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	e6 e2       	ldi	r30, 0x26	; 38
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
     15a:	84 60       	ori	r24, 0x04	; 4
     15c:	8c 93       	st	X, r24
		SET_BIT(Ru8_ADCSRA,u8_ADC_ADPS1) ;
     15e:	a6 e2       	ldi	r26, 0x26	; 38
     160:	b0 e0       	ldi	r27, 0x00	; 0
     162:	e6 e2       	ldi	r30, 0x26	; 38
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	82 60       	ori	r24, 0x02	; 2
     16a:	8c 93       	st	X, r24
		SET_BIT(Ru8_ADCSRA,u8_ADC_ADPS0) ;
     16c:	a6 e2       	ldi	r26, 0x26	; 38
     16e:	b0 e0       	ldi	r27, 0x00	; 0
     170:	e6 e2       	ldi	r30, 0x26	; 38
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	80 81       	ld	r24, Z
     176:	81 60       	ori	r24, 0x01	; 1
     178:	8c 93       	st	X, r24
	#else 
		#error "ADC prebuild ADC PRESCALER value config error"
	#endif
}
     17a:	cf 91       	pop	r28
     17c:	df 91       	pop	r29
     17e:	08 95       	ret

00000180 <ADC_voidStartConversion>:

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void ADC_voidStartConversion(void) //Make ADC enabled and start conversion 
{
     180:	df 93       	push	r29
     182:	cf 93       	push	r28
     184:	cd b7       	in	r28, 0x3d	; 61
     186:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(Ru8_ADCSRA,u8_ADC_ADEN) ;               
     188:	a6 e2       	ldi	r26, 0x26	; 38
     18a:	b0 e0       	ldi	r27, 0x00	; 0
     18c:	e6 e2       	ldi	r30, 0x26	; 38
     18e:	f0 e0       	ldi	r31, 0x00	; 0
     190:	80 81       	ld	r24, Z
     192:	80 68       	ori	r24, 0x80	; 128
     194:	8c 93       	st	X, r24
	SET_BIT(Ru8_ADCSRA,u8_ADC_ADSC) ;               
     196:	a6 e2       	ldi	r26, 0x26	; 38
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e6 e2       	ldi	r30, 0x26	; 38
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	80 64       	ori	r24, 0x40	; 64
     1a2:	8c 93       	st	X, r24
}
     1a4:	cf 91       	pop	r28
     1a6:	df 91       	pop	r29
     1a8:	08 95       	ret

000001aa <ADC_voidStop>:

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void ADC_voidStop(void) // make ADC Disabled
{
     1aa:	df 93       	push	r29
     1ac:	cf 93       	push	r28
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_ADCSRA,u8_ADC_ADEN) ;               
     1b2:	a6 e2       	ldi	r26, 0x26	; 38
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	e6 e2       	ldi	r30, 0x26	; 38
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	8f 77       	andi	r24, 0x7F	; 127
     1be:	8c 93       	st	X, r24
}
     1c0:	cf 91       	pop	r28
     1c2:	df 91       	pop	r29
     1c4:	08 95       	ret

000001c6 <ADC_u8AutoTrigOn>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ADC_u8AutoTrigOn(uint8_t u8_TrigSource)  /*Make ADC Auto trigger on and set the trigger source and return error state if trigger
												  *Source sent to argument incorrect */
{
     1c6:	df 93       	push	r29
     1c8:	cf 93       	push	r28
     1ca:	00 d0       	rcall	.+0      	; 0x1cc <ADC_u8AutoTrigOn+0x6>
     1cc:	cd b7       	in	r28, 0x3d	; 61
     1ce:	de b7       	in	r29, 0x3e	; 62
     1d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorState = u8_ADC_OK ;
     1d2:	8e e2       	ldi	r24, 0x2E	; 46
     1d4:	89 83       	std	Y+1, r24	; 0x01
	if(u8_TrigSource>=u8_ADC_FREE_RUNNING_MODE && u8_TrigSource<=u8_ADC_TIMER1_CAPTURE_EVENT)
     1d6:	8a 81       	ldd	r24, Y+2	; 0x02
     1d8:	8e 31       	cpi	r24, 0x1E	; 30
     1da:	08 f4       	brcc	.+2      	; 0x1de <ADC_u8AutoTrigOn+0x18>
     1dc:	d0 c0       	rjmp	.+416    	; 0x37e <ADC_u8AutoTrigOn+0x1b8>
     1de:	8a 81       	ldd	r24, Y+2	; 0x02
     1e0:	86 32       	cpi	r24, 0x26	; 38
     1e2:	08 f0       	brcs	.+2      	; 0x1e6 <ADC_u8AutoTrigOn+0x20>
     1e4:	cc c0       	rjmp	.+408    	; 0x37e <ADC_u8AutoTrigOn+0x1b8>
	{
		SET_BIT(Ru8_ADCSRA,u8_ADC_ADATE) ;
     1e6:	a6 e2       	ldi	r26, 0x26	; 38
     1e8:	b0 e0       	ldi	r27, 0x00	; 0
     1ea:	e6 e2       	ldi	r30, 0x26	; 38
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	80 81       	ld	r24, Z
     1f0:	80 62       	ori	r24, 0x20	; 32
     1f2:	8c 93       	st	X, r24
		if (u8_TrigSource==u8_ADC_FREE_RUNNING_MODE)
     1f4:	8a 81       	ldd	r24, Y+2	; 0x02
     1f6:	8e 31       	cpi	r24, 0x1E	; 30
     1f8:	b1 f4       	brne	.+44     	; 0x226 <ADC_u8AutoTrigOn+0x60>
		{
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS2) ;
     1fa:	a0 e5       	ldi	r26, 0x50	; 80
     1fc:	b0 e0       	ldi	r27, 0x00	; 0
     1fe:	e0 e5       	ldi	r30, 0x50	; 80
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	8f 77       	andi	r24, 0x7F	; 127
     206:	8c 93       	st	X, r24
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS1) ;
     208:	a0 e5       	ldi	r26, 0x50	; 80
     20a:	b0 e0       	ldi	r27, 0x00	; 0
     20c:	e0 e5       	ldi	r30, 0x50	; 80
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	8f 7b       	andi	r24, 0xBF	; 191
     214:	8c 93       	st	X, r24
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS0) ;
     216:	a0 e5       	ldi	r26, 0x50	; 80
     218:	b0 e0       	ldi	r27, 0x00	; 0
     21a:	e0 e5       	ldi	r30, 0x50	; 80
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	80 81       	ld	r24, Z
     220:	8f 7d       	andi	r24, 0xDF	; 223
     222:	8c 93       	st	X, r24
     224:	ae c0       	rjmp	.+348    	; 0x382 <ADC_u8AutoTrigOn+0x1bc>
		}
		else if (u8_TrigSource==u8_ADC_ANALOG_COMP)		
     226:	8a 81       	ldd	r24, Y+2	; 0x02
     228:	8f 31       	cpi	r24, 0x1F	; 31
     22a:	b1 f4       	brne	.+44     	; 0x258 <ADC_u8AutoTrigOn+0x92>
		{
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS2) ;
     22c:	a0 e5       	ldi	r26, 0x50	; 80
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	e0 e5       	ldi	r30, 0x50	; 80
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	8f 77       	andi	r24, 0x7F	; 127
     238:	8c 93       	st	X, r24
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS1) ;
     23a:	a0 e5       	ldi	r26, 0x50	; 80
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	e0 e5       	ldi	r30, 0x50	; 80
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	8f 7b       	andi	r24, 0xBF	; 191
     246:	8c 93       	st	X, r24
			SET_BIT(Ru8_SFIOR,u8_ADC_ADTS0) ;
     248:	a0 e5       	ldi	r26, 0x50	; 80
     24a:	b0 e0       	ldi	r27, 0x00	; 0
     24c:	e0 e5       	ldi	r30, 0x50	; 80
     24e:	f0 e0       	ldi	r31, 0x00	; 0
     250:	80 81       	ld	r24, Z
     252:	80 62       	ori	r24, 0x20	; 32
     254:	8c 93       	st	X, r24
     256:	95 c0       	rjmp	.+298    	; 0x382 <ADC_u8AutoTrigOn+0x1bc>
		}
		else if (u8_TrigSource==u8_ADC_EXT_INT_REQ)			
     258:	8a 81       	ldd	r24, Y+2	; 0x02
     25a:	80 32       	cpi	r24, 0x20	; 32
     25c:	b1 f4       	brne	.+44     	; 0x28a <ADC_u8AutoTrigOn+0xc4>
		{	CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS2) ;
     25e:	a0 e5       	ldi	r26, 0x50	; 80
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	e0 e5       	ldi	r30, 0x50	; 80
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	8f 77       	andi	r24, 0x7F	; 127
     26a:	8c 93       	st	X, r24
			SET_BIT(Ru8_SFIOR,u8_ADC_ADTS1) ;
     26c:	a0 e5       	ldi	r26, 0x50	; 80
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	e0 e5       	ldi	r30, 0x50	; 80
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	80 64       	ori	r24, 0x40	; 64
     278:	8c 93       	st	X, r24
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS0) ;
     27a:	a0 e5       	ldi	r26, 0x50	; 80
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	e0 e5       	ldi	r30, 0x50	; 80
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	8f 7d       	andi	r24, 0xDF	; 223
     286:	8c 93       	st	X, r24
     288:	7c c0       	rjmp	.+248    	; 0x382 <ADC_u8AutoTrigOn+0x1bc>
		}
		else if (u8_TrigSource==u8_ADC_TIMER0_COMPARE_MATCH)
     28a:	8a 81       	ldd	r24, Y+2	; 0x02
     28c:	81 32       	cpi	r24, 0x21	; 33
     28e:	b1 f4       	brne	.+44     	; 0x2bc <ADC_u8AutoTrigOn+0xf6>
		{
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS2) ;
     290:	a0 e5       	ldi	r26, 0x50	; 80
     292:	b0 e0       	ldi	r27, 0x00	; 0
     294:	e0 e5       	ldi	r30, 0x50	; 80
     296:	f0 e0       	ldi	r31, 0x00	; 0
     298:	80 81       	ld	r24, Z
     29a:	8f 77       	andi	r24, 0x7F	; 127
     29c:	8c 93       	st	X, r24
			SET_BIT(Ru8_SFIOR,u8_ADC_ADTS1) ;
     29e:	a0 e5       	ldi	r26, 0x50	; 80
     2a0:	b0 e0       	ldi	r27, 0x00	; 0
     2a2:	e0 e5       	ldi	r30, 0x50	; 80
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	80 81       	ld	r24, Z
     2a8:	80 64       	ori	r24, 0x40	; 64
     2aa:	8c 93       	st	X, r24
			SET_BIT(Ru8_SFIOR,u8_ADC_ADTS0) ;
     2ac:	a0 e5       	ldi	r26, 0x50	; 80
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	e0 e5       	ldi	r30, 0x50	; 80
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	80 62       	ori	r24, 0x20	; 32
     2b8:	8c 93       	st	X, r24
     2ba:	63 c0       	rjmp	.+198    	; 0x382 <ADC_u8AutoTrigOn+0x1bc>
		}
		else if (u8_TrigSource==u8_ADC_TIMER0_OV)			
     2bc:	8a 81       	ldd	r24, Y+2	; 0x02
     2be:	82 32       	cpi	r24, 0x22	; 34
     2c0:	b1 f4       	brne	.+44     	; 0x2ee <ADC_u8AutoTrigOn+0x128>
		{
			SET_BIT(Ru8_SFIOR,u8_ADC_ADTS2) ;
     2c2:	a0 e5       	ldi	r26, 0x50	; 80
     2c4:	b0 e0       	ldi	r27, 0x00	; 0
     2c6:	e0 e5       	ldi	r30, 0x50	; 80
     2c8:	f0 e0       	ldi	r31, 0x00	; 0
     2ca:	80 81       	ld	r24, Z
     2cc:	80 68       	ori	r24, 0x80	; 128
     2ce:	8c 93       	st	X, r24
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS1) ;
     2d0:	a0 e5       	ldi	r26, 0x50	; 80
     2d2:	b0 e0       	ldi	r27, 0x00	; 0
     2d4:	e0 e5       	ldi	r30, 0x50	; 80
     2d6:	f0 e0       	ldi	r31, 0x00	; 0
     2d8:	80 81       	ld	r24, Z
     2da:	8f 7b       	andi	r24, 0xBF	; 191
     2dc:	8c 93       	st	X, r24
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS0) ;
     2de:	a0 e5       	ldi	r26, 0x50	; 80
     2e0:	b0 e0       	ldi	r27, 0x00	; 0
     2e2:	e0 e5       	ldi	r30, 0x50	; 80
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	80 81       	ld	r24, Z
     2e8:	8f 7d       	andi	r24, 0xDF	; 223
     2ea:	8c 93       	st	X, r24
     2ec:	4a c0       	rjmp	.+148    	; 0x382 <ADC_u8AutoTrigOn+0x1bc>
		}
		else if (u8_TrigSource==u8_ADC_TIMER_COMPARE_MATCH_B)
     2ee:	8a 81       	ldd	r24, Y+2	; 0x02
     2f0:	83 32       	cpi	r24, 0x23	; 35
     2f2:	b1 f4       	brne	.+44     	; 0x320 <ADC_u8AutoTrigOn+0x15a>
		{
			SET_BIT(Ru8_SFIOR,u8_ADC_ADTS2) ;
     2f4:	a0 e5       	ldi	r26, 0x50	; 80
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	e0 e5       	ldi	r30, 0x50	; 80
     2fa:	f0 e0       	ldi	r31, 0x00	; 0
     2fc:	80 81       	ld	r24, Z
     2fe:	80 68       	ori	r24, 0x80	; 128
     300:	8c 93       	st	X, r24
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS1) ;
     302:	a0 e5       	ldi	r26, 0x50	; 80
     304:	b0 e0       	ldi	r27, 0x00	; 0
     306:	e0 e5       	ldi	r30, 0x50	; 80
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	80 81       	ld	r24, Z
     30c:	8f 7b       	andi	r24, 0xBF	; 191
     30e:	8c 93       	st	X, r24
			SET_BIT(Ru8_SFIOR,u8_ADC_ADTS0) ;
     310:	a0 e5       	ldi	r26, 0x50	; 80
     312:	b0 e0       	ldi	r27, 0x00	; 0
     314:	e0 e5       	ldi	r30, 0x50	; 80
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	80 81       	ld	r24, Z
     31a:	80 62       	ori	r24, 0x20	; 32
     31c:	8c 93       	st	X, r24
     31e:	31 c0       	rjmp	.+98     	; 0x382 <ADC_u8AutoTrigOn+0x1bc>
		}
		else if (u8_TrigSource==u8_ADC_TIMER1_OV)			
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	84 32       	cpi	r24, 0x24	; 36
     324:	b1 f4       	brne	.+44     	; 0x352 <ADC_u8AutoTrigOn+0x18c>
		{
			SET_BIT(Ru8_SFIOR,u8_ADC_ADTS2) ;
     326:	a0 e5       	ldi	r26, 0x50	; 80
     328:	b0 e0       	ldi	r27, 0x00	; 0
     32a:	e0 e5       	ldi	r30, 0x50	; 80
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	80 81       	ld	r24, Z
     330:	80 68       	ori	r24, 0x80	; 128
     332:	8c 93       	st	X, r24
			SET_BIT(Ru8_SFIOR,u8_ADC_ADTS1) ;
     334:	a0 e5       	ldi	r26, 0x50	; 80
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	e0 e5       	ldi	r30, 0x50	; 80
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	80 64       	ori	r24, 0x40	; 64
     340:	8c 93       	st	X, r24
			CLR_BIT(Ru8_SFIOR,u8_ADC_ADTS0) ;
     342:	a0 e5       	ldi	r26, 0x50	; 80
     344:	b0 e0       	ldi	r27, 0x00	; 0
     346:	e0 e5       	ldi	r30, 0x50	; 80
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	80 81       	ld	r24, Z
     34c:	8f 7d       	andi	r24, 0xDF	; 223
     34e:	8c 93       	st	X, r24
     350:	18 c0       	rjmp	.+48     	; 0x382 <ADC_u8AutoTrigOn+0x1bc>
		}
		else
		{
			SET_BIT(Ru8_SFIOR,u8_ADC_ADTS2) ;
     352:	a0 e5       	ldi	r26, 0x50	; 80
     354:	b0 e0       	ldi	r27, 0x00	; 0
     356:	e0 e5       	ldi	r30, 0x50	; 80
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	80 81       	ld	r24, Z
     35c:	80 68       	ori	r24, 0x80	; 128
     35e:	8c 93       	st	X, r24
			SET_BIT(Ru8_SFIOR,u8_ADC_ADTS1) ;
     360:	a0 e5       	ldi	r26, 0x50	; 80
     362:	b0 e0       	ldi	r27, 0x00	; 0
     364:	e0 e5       	ldi	r30, 0x50	; 80
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	80 81       	ld	r24, Z
     36a:	80 64       	ori	r24, 0x40	; 64
     36c:	8c 93       	st	X, r24
			SET_BIT(Ru8_SFIOR,u8_ADC_ADTS0) ;
     36e:	a0 e5       	ldi	r26, 0x50	; 80
     370:	b0 e0       	ldi	r27, 0x00	; 0
     372:	e0 e5       	ldi	r30, 0x50	; 80
     374:	f0 e0       	ldi	r31, 0x00	; 0
     376:	80 81       	ld	r24, Z
     378:	80 62       	ori	r24, 0x20	; 32
     37a:	8c 93       	st	X, r24
     37c:	02 c0       	rjmp	.+4      	; 0x382 <ADC_u8AutoTrigOn+0x1bc>
		}
	}
	else 
	{
		u8_ErrorState = u8_ADC_NOK ; 
     37e:	8d e2       	ldi	r24, 0x2D	; 45
     380:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState ; 
     382:	89 81       	ldd	r24, Y+1	; 0x01
}
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	cf 91       	pop	r28
     38a:	df 91       	pop	r29
     38c:	08 95       	ret

0000038e <ADC_u8AutoTrigOff>:

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void ADC_u8AutoTrigOff(void) //Make ADC auto trigger disable
{
     38e:	df 93       	push	r29
     390:	cf 93       	push	r28
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_ADCSRA,u8_ADC_ADATE) ;
     396:	a6 e2       	ldi	r26, 0x26	; 38
     398:	b0 e0       	ldi	r27, 0x00	; 0
     39a:	e6 e2       	ldi	r30, 0x26	; 38
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	80 81       	ld	r24, Z
     3a0:	8f 7d       	andi	r24, 0xDF	; 223
     3a2:	8c 93       	st	X, r24
}
     3a4:	cf 91       	pop	r28
     3a6:	df 91       	pop	r29
     3a8:	08 95       	ret

000003aa <ADC_voidIntEn>:

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void ADC_voidIntEn(void) //Make ADC periphral interrupt Enable
{
     3aa:	df 93       	push	r29
     3ac:	cf 93       	push	r28
     3ae:	cd b7       	in	r28, 0x3d	; 61
     3b0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(Ru8_ADCSRA,u8_ADC_ADIE) ;               
     3b2:	a6 e2       	ldi	r26, 0x26	; 38
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	e6 e2       	ldi	r30, 0x26	; 38
     3b8:	f0 e0       	ldi	r31, 0x00	; 0
     3ba:	80 81       	ld	r24, Z
     3bc:	88 60       	ori	r24, 0x08	; 8
     3be:	8c 93       	st	X, r24
}
     3c0:	cf 91       	pop	r28
     3c2:	df 91       	pop	r29
     3c4:	08 95       	ret

000003c6 <ADC_voidIntDis>:

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void ADC_voidIntDis(void) //Make ADC periphral interrupt Disable
{
     3c6:	df 93       	push	r29
     3c8:	cf 93       	push	r28
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_ADCSRA,u8_ADC_ADIE) ;               
     3ce:	a6 e2       	ldi	r26, 0x26	; 38
     3d0:	b0 e0       	ldi	r27, 0x00	; 0
     3d2:	e6 e2       	ldi	r30, 0x26	; 38
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	80 81       	ld	r24, Z
     3d8:	87 7f       	andi	r24, 0xF7	; 247
     3da:	8c 93       	st	X, r24
}
     3dc:	cf 91       	pop	r28
     3de:	df 91       	pop	r29
     3e0:	08 95       	ret

000003e2 <ADC_u8GetFlagInt>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ADC_u8GetFlagInt(uint8_t* pu8_ReturnFlagInt) /*Return error state if the pointer sent is NULL and if not return 
														*ADC Interrupt flag value in pu8_ReturnFlagInt pointer.*/
{
     3e2:	df 93       	push	r29
     3e4:	cf 93       	push	r28
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <ADC_u8GetFlagInt+0x6>
     3e8:	0f 92       	push	r0
     3ea:	cd b7       	in	r28, 0x3d	; 61
     3ec:	de b7       	in	r29, 0x3e	; 62
     3ee:	9b 83       	std	Y+3, r25	; 0x03
     3f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorState = u8_ADC_OK ; 
     3f2:	8e e2       	ldi	r24, 0x2E	; 46
     3f4:	89 83       	std	Y+1, r24	; 0x01
	if(pu8_ReturnFlagInt!=NULL_POINTER)
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	9b 81       	ldd	r25, Y+3	; 0x03
     3fa:	00 97       	sbiw	r24, 0x00	; 0
     3fc:	51 f0       	breq	.+20     	; 0x412 <ADC_u8GetFlagInt+0x30>
	{
		*pu8_ReturnFlagInt = GET_BIT(Ru8_ADCSRA,u8_ADC_ADIF) ; 
     3fe:	e6 e2       	ldi	r30, 0x26	; 38
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	82 95       	swap	r24
     406:	8f 70       	andi	r24, 0x0F	; 15
     408:	81 70       	andi	r24, 0x01	; 1
     40a:	ea 81       	ldd	r30, Y+2	; 0x02
     40c:	fb 81       	ldd	r31, Y+3	; 0x03
     40e:	80 83       	st	Z, r24
     410:	02 c0       	rjmp	.+4      	; 0x416 <ADC_u8GetFlagInt+0x34>
	}
	else 
	{
		 u8_ErrorState = u8_ADC_NOK ;
     412:	8d e2       	ldi	r24, 0x2D	; 45
     414:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState ; 
     416:	89 81       	ldd	r24, Y+1	; 0x01
}
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	cf 91       	pop	r28
     420:	df 91       	pop	r29
     422:	08 95       	ret

00000424 <ADC_u8GetResult>:

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t ADC_u8GetResult(uint16_t* pu16_ReturnADCResult) //return the result in pu16_ReturnADCResult if pu16_ReturnADCResult != NULL 
{
     424:	df 93       	push	r29
     426:	cf 93       	push	r28
     428:	00 d0       	rcall	.+0      	; 0x42a <ADC_u8GetResult+0x6>
     42a:	0f 92       	push	r0
     42c:	cd b7       	in	r28, 0x3d	; 61
     42e:	de b7       	in	r29, 0x3e	; 62
     430:	9b 83       	std	Y+3, r25	; 0x03
     432:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorState = u8_ADC_OK ;
     434:	8e e2       	ldi	r24, 0x2E	; 46
     436:	89 83       	std	Y+1, r24	; 0x01
	if(pu16_ReturnADCResult!=NULL_POINTER)
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	9b 81       	ldd	r25, Y+3	; 0x03
     43c:	00 97       	sbiw	r24, 0x00	; 0
     43e:	d9 f0       	breq	.+54     	; 0x476 <ADC_u8GetResult+0x52>
	{
		*pu16_ReturnADCResult = Ru8_ADCL; 
     440:	e4 e2       	ldi	r30, 0x24	; 36
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	88 2f       	mov	r24, r24
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	ea 81       	ldd	r30, Y+2	; 0x02
     44c:	fb 81       	ldd	r31, Y+3	; 0x03
     44e:	91 83       	std	Z+1, r25	; 0x01
     450:	80 83       	st	Z, r24
		(*pu16_ReturnADCResult)|= (Ru8_ADCH<<8); 
     452:	ea 81       	ldd	r30, Y+2	; 0x02
     454:	fb 81       	ldd	r31, Y+3	; 0x03
     456:	20 81       	ld	r18, Z
     458:	31 81       	ldd	r19, Z+1	; 0x01
     45a:	e5 e2       	ldi	r30, 0x25	; 37
     45c:	f0 e0       	ldi	r31, 0x00	; 0
     45e:	80 81       	ld	r24, Z
     460:	88 2f       	mov	r24, r24
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	98 2f       	mov	r25, r24
     466:	88 27       	eor	r24, r24
     468:	82 2b       	or	r24, r18
     46a:	93 2b       	or	r25, r19
     46c:	ea 81       	ldd	r30, Y+2	; 0x02
     46e:	fb 81       	ldd	r31, Y+3	; 0x03
     470:	91 83       	std	Z+1, r25	; 0x01
     472:	80 83       	st	Z, r24
     474:	02 c0       	rjmp	.+4      	; 0x47a <ADC_u8GetResult+0x56>
	}
	else 
	{
		 u8_ErrorState = u8_ADC_NOK ;
     476:	8d e2       	ldi	r24, 0x2D	; 45
     478:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState ; 
     47a:	89 81       	ldd	r24, Y+1	; 0x01
}
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	cf 91       	pop	r28
     484:	df 91       	pop	r29
     486:	08 95       	ret

00000488 <ADC_voidSetCallBack>:

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void ADC_voidSetCallBack(void(*ISRFuncToSet)(void)) 
{
     488:	df 93       	push	r29
     48a:	cf 93       	push	r28
     48c:	00 d0       	rcall	.+0      	; 0x48e <ADC_voidSetCallBack+0x6>
     48e:	cd b7       	in	r28, 0x3d	; 61
     490:	de b7       	in	r29, 0x3e	; 62
     492:	9a 83       	std	Y+2, r25	; 0x02
     494:	89 83       	std	Y+1, r24	; 0x01
	ADCSetCallBackISR = ISRFuncToSet ;
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	9a 81       	ldd	r25, Y+2	; 0x02
     49a:	90 93 71 00 	sts	0x0071, r25
     49e:	80 93 70 00 	sts	0x0070, r24
}
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	cf 91       	pop	r28
     4a8:	df 91       	pop	r29
     4aa:	08 95       	ret

000004ac <__vector_16>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_16 (void)      __attribute__((signal));
void __vector_16 (void)
{
     4ac:	1f 92       	push	r1
     4ae:	0f 92       	push	r0
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	0f 92       	push	r0
     4b4:	11 24       	eor	r1, r1
     4b6:	2f 93       	push	r18
     4b8:	3f 93       	push	r19
     4ba:	4f 93       	push	r20
     4bc:	5f 93       	push	r21
     4be:	6f 93       	push	r22
     4c0:	7f 93       	push	r23
     4c2:	8f 93       	push	r24
     4c4:	9f 93       	push	r25
     4c6:	af 93       	push	r26
     4c8:	bf 93       	push	r27
     4ca:	ef 93       	push	r30
     4cc:	ff 93       	push	r31
     4ce:	df 93       	push	r29
     4d0:	cf 93       	push	r28
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
	if(ADCSetCallBackISR!=NULL_POINTER)
     4d6:	80 91 70 00 	lds	r24, 0x0070
     4da:	90 91 71 00 	lds	r25, 0x0071
     4de:	00 97       	sbiw	r24, 0x00	; 0
     4e0:	29 f0       	breq	.+10     	; 0x4ec <__vector_16+0x40>
	{
		ADCSetCallBackISR() ;
     4e2:	e0 91 70 00 	lds	r30, 0x0070
     4e6:	f0 91 71 00 	lds	r31, 0x0071
     4ea:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
     4ec:	cf 91       	pop	r28
     4ee:	df 91       	pop	r29
     4f0:	ff 91       	pop	r31
     4f2:	ef 91       	pop	r30
     4f4:	bf 91       	pop	r27
     4f6:	af 91       	pop	r26
     4f8:	9f 91       	pop	r25
     4fa:	8f 91       	pop	r24
     4fc:	7f 91       	pop	r23
     4fe:	6f 91       	pop	r22
     500:	5f 91       	pop	r21
     502:	4f 91       	pop	r20
     504:	3f 91       	pop	r19
     506:	2f 91       	pop	r18
     508:	0f 90       	pop	r0
     50a:	0f be       	out	0x3f, r0	; 63
     50c:	0f 90       	pop	r0
     50e:	1f 90       	pop	r1
     510:	18 95       	reti

00000512 <DIO_u8SetPinVal>:
#include "dio_interface.h"
#include "dio_private.h"


uint8_t DIO_u8SetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinState)     
{
     512:	df 93       	push	r29
     514:	cf 93       	push	r28
     516:	00 d0       	rcall	.+0      	; 0x518 <DIO_u8SetPinVal+0x6>
     518:	00 d0       	rcall	.+0      	; 0x51a <DIO_u8SetPinVal+0x8>
     51a:	00 d0       	rcall	.+0      	; 0x51c <DIO_u8SetPinVal+0xa>
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	8a 83       	std	Y+2, r24	; 0x02
     522:	6b 83       	std	Y+3, r22	; 0x03
     524:	4c 83       	std	Y+4, r20	; 0x04
	uint8_t u8_ErrorState = u8_DIO_OK;
     526:	82 e0       	ldi	r24, 0x02	; 2
     528:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	88 30       	cpi	r24, 0x08	; 8
     52e:	08 f0       	brcs	.+2      	; 0x532 <DIO_u8SetPinVal+0x20>
     530:	ee c0       	rjmp	.+476    	; 0x70e <DIO_u8SetPinVal+0x1fc>
	{
		switch(u8_PortNum)
     532:	8a 81       	ldd	r24, Y+2	; 0x02
     534:	28 2f       	mov	r18, r24
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	3e 83       	std	Y+6, r19	; 0x06
     53a:	2d 83       	std	Y+5, r18	; 0x05
     53c:	8d 81       	ldd	r24, Y+5	; 0x05
     53e:	9e 81       	ldd	r25, Y+6	; 0x06
     540:	89 30       	cpi	r24, 0x09	; 9
     542:	91 05       	cpc	r25, r1
     544:	09 f4       	brne	.+2      	; 0x548 <DIO_u8SetPinVal+0x36>
     546:	4a c0       	rjmp	.+148    	; 0x5dc <DIO_u8SetPinVal+0xca>
     548:	2d 81       	ldd	r18, Y+5	; 0x05
     54a:	3e 81       	ldd	r19, Y+6	; 0x06
     54c:	2a 30       	cpi	r18, 0x0A	; 10
     54e:	31 05       	cpc	r19, r1
     550:	34 f4       	brge	.+12     	; 0x55e <DIO_u8SetPinVal+0x4c>
     552:	8d 81       	ldd	r24, Y+5	; 0x05
     554:	9e 81       	ldd	r25, Y+6	; 0x06
     556:	88 30       	cpi	r24, 0x08	; 8
     558:	91 05       	cpc	r25, r1
     55a:	71 f0       	breq	.+28     	; 0x578 <DIO_u8SetPinVal+0x66>
     55c:	d5 c0       	rjmp	.+426    	; 0x708 <DIO_u8SetPinVal+0x1f6>
     55e:	2d 81       	ldd	r18, Y+5	; 0x05
     560:	3e 81       	ldd	r19, Y+6	; 0x06
     562:	2a 30       	cpi	r18, 0x0A	; 10
     564:	31 05       	cpc	r19, r1
     566:	09 f4       	brne	.+2      	; 0x56a <DIO_u8SetPinVal+0x58>
     568:	6b c0       	rjmp	.+214    	; 0x640 <DIO_u8SetPinVal+0x12e>
     56a:	8d 81       	ldd	r24, Y+5	; 0x05
     56c:	9e 81       	ldd	r25, Y+6	; 0x06
     56e:	8b 30       	cpi	r24, 0x0B	; 11
     570:	91 05       	cpc	r25, r1
     572:	09 f4       	brne	.+2      	; 0x576 <DIO_u8SetPinVal+0x64>
     574:	97 c0       	rjmp	.+302    	; 0x6a4 <DIO_u8SetPinVal+0x192>
     576:	c8 c0       	rjmp	.+400    	; 0x708 <DIO_u8SetPinVal+0x1f6>
		{
			case u8_DIO_PORTA: if(u8_PinState == u8_DIO_PIN_LOW)
     578:	8c 81       	ldd	r24, Y+4	; 0x04
     57a:	88 23       	and	r24, r24
     57c:	a9 f4       	brne	.+42     	; 0x5a8 <DIO_u8SetPinVal+0x96>
								{
									CLR_BIT(Ru8_PORTA,u8_PinNum) ;
     57e:	ab e3       	ldi	r26, 0x3B	; 59
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	eb e3       	ldi	r30, 0x3B	; 59
     584:	f0 e0       	ldi	r31, 0x00	; 0
     586:	80 81       	ld	r24, Z
     588:	48 2f       	mov	r20, r24
     58a:	8b 81       	ldd	r24, Y+3	; 0x03
     58c:	28 2f       	mov	r18, r24
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	02 2e       	mov	r0, r18
     596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_u8SetPinVal+0x8a>
     598:	88 0f       	add	r24, r24
     59a:	99 1f       	adc	r25, r25
     59c:	0a 94       	dec	r0
     59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_u8SetPinVal+0x86>
     5a0:	80 95       	com	r24
     5a2:	84 23       	and	r24, r20
     5a4:	8c 93       	st	X, r24
     5a6:	b5 c0       	rjmp	.+362    	; 0x712 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
     5a8:	8c 81       	ldd	r24, Y+4	; 0x04
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	a1 f4       	brne	.+40     	; 0x5d6 <DIO_u8SetPinVal+0xc4>
								{
									SET_BIT(Ru8_PORTA,u8_PinNum) ;
     5ae:	ab e3       	ldi	r26, 0x3B	; 59
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	eb e3       	ldi	r30, 0x3B	; 59
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	48 2f       	mov	r20, r24
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	28 2f       	mov	r18, r24
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	02 2e       	mov	r0, r18
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_u8SetPinVal+0xba>
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	0a 94       	dec	r0
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_u8SetPinVal+0xb6>
     5d0:	84 2b       	or	r24, r20
     5d2:	8c 93       	st	X, r24
     5d4:	9e c0       	rjmp	.+316    	; 0x712 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	89 83       	std	Y+1, r24	; 0x01
     5da:	9b c0       	rjmp	.+310    	; 0x712 <DIO_u8SetPinVal+0x200>
								}

							   break;
							   
			case u8_DIO_PORTB:	if(u8_PinState == u8_DIO_PIN_LOW)
     5dc:	8c 81       	ldd	r24, Y+4	; 0x04
     5de:	88 23       	and	r24, r24
     5e0:	a9 f4       	brne	.+42     	; 0x60c <DIO_u8SetPinVal+0xfa>
								{
									CLR_BIT(Ru8_PORTB,u8_PinNum) ;
     5e2:	a8 e3       	ldi	r26, 0x38	; 56
     5e4:	b0 e0       	ldi	r27, 0x00	; 0
     5e6:	e8 e3       	ldi	r30, 0x38	; 56
     5e8:	f0 e0       	ldi	r31, 0x00	; 0
     5ea:	80 81       	ld	r24, Z
     5ec:	48 2f       	mov	r20, r24
     5ee:	8b 81       	ldd	r24, Y+3	; 0x03
     5f0:	28 2f       	mov	r18, r24
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	02 2e       	mov	r0, r18
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_u8SetPinVal+0xee>
     5fc:	88 0f       	add	r24, r24
     5fe:	99 1f       	adc	r25, r25
     600:	0a 94       	dec	r0
     602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_u8SetPinVal+0xea>
     604:	80 95       	com	r24
     606:	84 23       	and	r24, r20
     608:	8c 93       	st	X, r24
     60a:	83 c0       	rjmp	.+262    	; 0x712 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
     60c:	8c 81       	ldd	r24, Y+4	; 0x04
     60e:	81 30       	cpi	r24, 0x01	; 1
     610:	a1 f4       	brne	.+40     	; 0x63a <DIO_u8SetPinVal+0x128>
								{
									SET_BIT(Ru8_PORTB,u8_PinNum) ;
     612:	a8 e3       	ldi	r26, 0x38	; 56
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	e8 e3       	ldi	r30, 0x38	; 56
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	48 2f       	mov	r20, r24
     61e:	8b 81       	ldd	r24, Y+3	; 0x03
     620:	28 2f       	mov	r18, r24
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	02 2e       	mov	r0, r18
     62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_u8SetPinVal+0x11e>
     62c:	88 0f       	add	r24, r24
     62e:	99 1f       	adc	r25, r25
     630:	0a 94       	dec	r0
     632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_u8SetPinVal+0x11a>
     634:	84 2b       	or	r24, r20
     636:	8c 93       	st	X, r24
     638:	6c c0       	rjmp	.+216    	; 0x712 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	89 83       	std	Y+1, r24	; 0x01
     63e:	69 c0       	rjmp	.+210    	; 0x712 <DIO_u8SetPinVal+0x200>
								}
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinState == u8_DIO_PIN_LOW)
     640:	8c 81       	ldd	r24, Y+4	; 0x04
     642:	88 23       	and	r24, r24
     644:	a9 f4       	brne	.+42     	; 0x670 <DIO_u8SetPinVal+0x15e>
								{
									CLR_BIT(Ru8_PORTC,u8_PinNum) ;
     646:	a5 e3       	ldi	r26, 0x35	; 53
     648:	b0 e0       	ldi	r27, 0x00	; 0
     64a:	e5 e3       	ldi	r30, 0x35	; 53
     64c:	f0 e0       	ldi	r31, 0x00	; 0
     64e:	80 81       	ld	r24, Z
     650:	48 2f       	mov	r20, r24
     652:	8b 81       	ldd	r24, Y+3	; 0x03
     654:	28 2f       	mov	r18, r24
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	02 2e       	mov	r0, r18
     65e:	02 c0       	rjmp	.+4      	; 0x664 <DIO_u8SetPinVal+0x152>
     660:	88 0f       	add	r24, r24
     662:	99 1f       	adc	r25, r25
     664:	0a 94       	dec	r0
     666:	e2 f7       	brpl	.-8      	; 0x660 <DIO_u8SetPinVal+0x14e>
     668:	80 95       	com	r24
     66a:	84 23       	and	r24, r20
     66c:	8c 93       	st	X, r24
     66e:	51 c0       	rjmp	.+162    	; 0x712 <DIO_u8SetPinVal+0x200>
								}
								else if(u8_PinState == u8_DIO_PIN_HIGH)
     670:	8c 81       	ldd	r24, Y+4	; 0x04
     672:	81 30       	cpi	r24, 0x01	; 1
     674:	a1 f4       	brne	.+40     	; 0x69e <DIO_u8SetPinVal+0x18c>
								{
									SET_BIT(Ru8_PORTC,u8_PinNum) ;
     676:	a5 e3       	ldi	r26, 0x35	; 53
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e5 e3       	ldi	r30, 0x35	; 53
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	80 81       	ld	r24, Z
     680:	48 2f       	mov	r20, r24
     682:	8b 81       	ldd	r24, Y+3	; 0x03
     684:	28 2f       	mov	r18, r24
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	02 2e       	mov	r0, r18
     68e:	02 c0       	rjmp	.+4      	; 0x694 <DIO_u8SetPinVal+0x182>
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	0a 94       	dec	r0
     696:	e2 f7       	brpl	.-8      	; 0x690 <DIO_u8SetPinVal+0x17e>
     698:	84 2b       	or	r24, r20
     69a:	8c 93       	st	X, r24
     69c:	3a c0       	rjmp	.+116    	; 0x712 <DIO_u8SetPinVal+0x200>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     69e:	83 e0       	ldi	r24, 0x03	; 3
     6a0:	89 83       	std	Y+1, r24	; 0x01
     6a2:	37 c0       	rjmp	.+110    	; 0x712 <DIO_u8SetPinVal+0x200>
								}

								break;
								
			case u8_DIO_PORTD: if(u8_PinState == u8_DIO_PIN_LOW)
     6a4:	8c 81       	ldd	r24, Y+4	; 0x04
     6a6:	88 23       	and	r24, r24
     6a8:	a9 f4       	brne	.+42     	; 0x6d4 <DIO_u8SetPinVal+0x1c2>
							   {
									CLR_BIT(Ru8_PORTD,u8_PinNum) ;
     6aa:	a2 e3       	ldi	r26, 0x32	; 50
     6ac:	b0 e0       	ldi	r27, 0x00	; 0
     6ae:	e2 e3       	ldi	r30, 0x32	; 50
     6b0:	f0 e0       	ldi	r31, 0x00	; 0
     6b2:	80 81       	ld	r24, Z
     6b4:	48 2f       	mov	r20, r24
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	28 2f       	mov	r18, r24
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	02 2e       	mov	r0, r18
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_u8SetPinVal+0x1b6>
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	0a 94       	dec	r0
     6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_u8SetPinVal+0x1b2>
     6cc:	80 95       	com	r24
     6ce:	84 23       	and	r24, r20
     6d0:	8c 93       	st	X, r24
     6d2:	1f c0       	rjmp	.+62     	; 0x712 <DIO_u8SetPinVal+0x200>
							   }
							   else if(u8_PinState == u8_DIO_PIN_HIGH)
     6d4:	8c 81       	ldd	r24, Y+4	; 0x04
     6d6:	81 30       	cpi	r24, 0x01	; 1
     6d8:	a1 f4       	brne	.+40     	; 0x702 <DIO_u8SetPinVal+0x1f0>
							   {
									SET_BIT(Ru8_PORTD,u8_PinNum) ;
     6da:	a2 e3       	ldi	r26, 0x32	; 50
     6dc:	b0 e0       	ldi	r27, 0x00	; 0
     6de:	e2 e3       	ldi	r30, 0x32	; 50
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	48 2f       	mov	r20, r24
     6e6:	8b 81       	ldd	r24, Y+3	; 0x03
     6e8:	28 2f       	mov	r18, r24
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	02 2e       	mov	r0, r18
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <DIO_u8SetPinVal+0x1e6>
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	0a 94       	dec	r0
     6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <DIO_u8SetPinVal+0x1e2>
     6fc:	84 2b       	or	r24, r20
     6fe:	8c 93       	st	X, r24
     700:	08 c0       	rjmp	.+16     	; 0x712 <DIO_u8SetPinVal+0x200>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
     702:	83 e0       	ldi	r24, 0x03	; 3
     704:	89 83       	std	Y+1, r24	; 0x01
     706:	05 c0       	rjmp	.+10     	; 0x712 <DIO_u8SetPinVal+0x200>
							   }
								break;
								
			default          : u8_ErrorState = u8_DIO_NOK ; 
     708:	83 e0       	ldi	r24, 0x03	; 3
     70a:	89 83       	std	Y+1, r24	; 0x01
     70c:	02 c0       	rjmp	.+4      	; 0x712 <DIO_u8SetPinVal+0x200>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
     712:	89 81       	ldd	r24, Y+1	; 0x01
}
     714:	26 96       	adiw	r28, 0x06	; 6
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	cf 91       	pop	r28
     722:	df 91       	pop	r29
     724:	08 95       	ret

00000726 <DIO_u8SetPinDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPinDir(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t u8_PinDir)      
{
     726:	df 93       	push	r29
     728:	cf 93       	push	r28
     72a:	00 d0       	rcall	.+0      	; 0x72c <DIO_u8SetPinDir+0x6>
     72c:	00 d0       	rcall	.+0      	; 0x72e <DIO_u8SetPinDir+0x8>
     72e:	00 d0       	rcall	.+0      	; 0x730 <DIO_u8SetPinDir+0xa>
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	8a 83       	std	Y+2, r24	; 0x02
     736:	6b 83       	std	Y+3, r22	; 0x03
     738:	4c 83       	std	Y+4, r20	; 0x04
	
	uint8_t u8_ErrorState = u8_DIO_OK;
     73a:	82 e0       	ldi	r24, 0x02	; 2
     73c:	89 83       	std	Y+1, r24	; 0x01
	if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     73e:	8b 81       	ldd	r24, Y+3	; 0x03
     740:	88 30       	cpi	r24, 0x08	; 8
     742:	08 f0       	brcs	.+2      	; 0x746 <DIO_u8SetPinDir+0x20>
     744:	ee c0       	rjmp	.+476    	; 0x922 <__stack+0xc3>
	{
		switch(u8_PortNum)
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	28 2f       	mov	r18, r24
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	3e 83       	std	Y+6, r19	; 0x06
     74e:	2d 83       	std	Y+5, r18	; 0x05
     750:	8d 81       	ldd	r24, Y+5	; 0x05
     752:	9e 81       	ldd	r25, Y+6	; 0x06
     754:	89 30       	cpi	r24, 0x09	; 9
     756:	91 05       	cpc	r25, r1
     758:	09 f4       	brne	.+2      	; 0x75c <DIO_u8SetPinDir+0x36>
     75a:	4a c0       	rjmp	.+148    	; 0x7f0 <DIO_u8SetPinDir+0xca>
     75c:	2d 81       	ldd	r18, Y+5	; 0x05
     75e:	3e 81       	ldd	r19, Y+6	; 0x06
     760:	2a 30       	cpi	r18, 0x0A	; 10
     762:	31 05       	cpc	r19, r1
     764:	34 f4       	brge	.+12     	; 0x772 <DIO_u8SetPinDir+0x4c>
     766:	8d 81       	ldd	r24, Y+5	; 0x05
     768:	9e 81       	ldd	r25, Y+6	; 0x06
     76a:	88 30       	cpi	r24, 0x08	; 8
     76c:	91 05       	cpc	r25, r1
     76e:	71 f0       	breq	.+28     	; 0x78c <DIO_u8SetPinDir+0x66>
     770:	d5 c0       	rjmp	.+426    	; 0x91c <__stack+0xbd>
     772:	2d 81       	ldd	r18, Y+5	; 0x05
     774:	3e 81       	ldd	r19, Y+6	; 0x06
     776:	2a 30       	cpi	r18, 0x0A	; 10
     778:	31 05       	cpc	r19, r1
     77a:	09 f4       	brne	.+2      	; 0x77e <DIO_u8SetPinDir+0x58>
     77c:	6b c0       	rjmp	.+214    	; 0x854 <DIO_u8SetPinDir+0x12e>
     77e:	8d 81       	ldd	r24, Y+5	; 0x05
     780:	9e 81       	ldd	r25, Y+6	; 0x06
     782:	8b 30       	cpi	r24, 0x0B	; 11
     784:	91 05       	cpc	r25, r1
     786:	09 f4       	brne	.+2      	; 0x78a <DIO_u8SetPinDir+0x64>
     788:	97 c0       	rjmp	.+302    	; 0x8b8 <__stack+0x59>
     78a:	c8 c0       	rjmp	.+400    	; 0x91c <__stack+0xbd>
		{
			case u8_DIO_PORTA: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     78c:	8c 81       	ldd	r24, Y+4	; 0x04
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	a1 f4       	brne	.+40     	; 0x7ba <DIO_u8SetPinDir+0x94>
							   {
									SET_BIT(Ru8_DDRA,u8_PinNum) ;
     792:	aa e3       	ldi	r26, 0x3A	; 58
     794:	b0 e0       	ldi	r27, 0x00	; 0
     796:	ea e3       	ldi	r30, 0x3A	; 58
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	80 81       	ld	r24, Z
     79c:	48 2f       	mov	r20, r24
     79e:	8b 81       	ldd	r24, Y+3	; 0x03
     7a0:	28 2f       	mov	r18, r24
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	02 2e       	mov	r0, r18
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <DIO_u8SetPinDir+0x8a>
     7ac:	88 0f       	add	r24, r24
     7ae:	99 1f       	adc	r25, r25
     7b0:	0a 94       	dec	r0
     7b2:	e2 f7       	brpl	.-8      	; 0x7ac <DIO_u8SetPinDir+0x86>
     7b4:	84 2b       	or	r24, r20
     7b6:	8c 93       	st	X, r24
     7b8:	b6 c0       	rjmp	.+364    	; 0x926 <__stack+0xc7>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	88 23       	and	r24, r24
     7be:	a9 f4       	brne	.+42     	; 0x7ea <DIO_u8SetPinDir+0xc4>
							   {
									CLR_BIT(Ru8_DDRA,u8_PinNum) ;
     7c0:	aa e3       	ldi	r26, 0x3A	; 58
     7c2:	b0 e0       	ldi	r27, 0x00	; 0
     7c4:	ea e3       	ldi	r30, 0x3A	; 58
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	80 81       	ld	r24, Z
     7ca:	48 2f       	mov	r20, r24
     7cc:	8b 81       	ldd	r24, Y+3	; 0x03
     7ce:	28 2f       	mov	r18, r24
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	02 2e       	mov	r0, r18
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <DIO_u8SetPinDir+0xb8>
     7da:	88 0f       	add	r24, r24
     7dc:	99 1f       	adc	r25, r25
     7de:	0a 94       	dec	r0
     7e0:	e2 f7       	brpl	.-8      	; 0x7da <DIO_u8SetPinDir+0xb4>
     7e2:	80 95       	com	r24
     7e4:	84 23       	and	r24, r20
     7e6:	8c 93       	st	X, r24
     7e8:	9e c0       	rjmp	.+316    	; 0x926 <__stack+0xc7>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
     7ea:	83 e0       	ldi	r24, 0x03	; 3
     7ec:	89 83       	std	Y+1, r24	; 0x01
     7ee:	9b c0       	rjmp	.+310    	; 0x926 <__stack+0xc7>
							   }
							   break;
	
			case u8_DIO_PORTB: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     7f0:	8c 81       	ldd	r24, Y+4	; 0x04
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	a1 f4       	brne	.+40     	; 0x81e <DIO_u8SetPinDir+0xf8>
							   {
									SET_BIT(Ru8_DDRB,u8_PinNum) ;
     7f6:	a7 e3       	ldi	r26, 0x37	; 55
     7f8:	b0 e0       	ldi	r27, 0x00	; 0
     7fa:	e7 e3       	ldi	r30, 0x37	; 55
     7fc:	f0 e0       	ldi	r31, 0x00	; 0
     7fe:	80 81       	ld	r24, Z
     800:	48 2f       	mov	r20, r24
     802:	8b 81       	ldd	r24, Y+3	; 0x03
     804:	28 2f       	mov	r18, r24
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	02 2e       	mov	r0, r18
     80e:	02 c0       	rjmp	.+4      	; 0x814 <DIO_u8SetPinDir+0xee>
     810:	88 0f       	add	r24, r24
     812:	99 1f       	adc	r25, r25
     814:	0a 94       	dec	r0
     816:	e2 f7       	brpl	.-8      	; 0x810 <DIO_u8SetPinDir+0xea>
     818:	84 2b       	or	r24, r20
     81a:	8c 93       	st	X, r24
     81c:	84 c0       	rjmp	.+264    	; 0x926 <__stack+0xc7>
							   }
							   else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     81e:	8c 81       	ldd	r24, Y+4	; 0x04
     820:	88 23       	and	r24, r24
     822:	a9 f4       	brne	.+42     	; 0x84e <DIO_u8SetPinDir+0x128>
							   {
									CLR_BIT(Ru8_DDRB,u8_PinNum) ;
     824:	a7 e3       	ldi	r26, 0x37	; 55
     826:	b0 e0       	ldi	r27, 0x00	; 0
     828:	e7 e3       	ldi	r30, 0x37	; 55
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	48 2f       	mov	r20, r24
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	28 2f       	mov	r18, r24
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	02 2e       	mov	r0, r18
     83c:	02 c0       	rjmp	.+4      	; 0x842 <DIO_u8SetPinDir+0x11c>
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	0a 94       	dec	r0
     844:	e2 f7       	brpl	.-8      	; 0x83e <DIO_u8SetPinDir+0x118>
     846:	80 95       	com	r24
     848:	84 23       	and	r24, r20
     84a:	8c 93       	st	X, r24
     84c:	6c c0       	rjmp	.+216    	; 0x926 <__stack+0xc7>
							   }
							   else 
							   {
									u8_ErrorState = u8_DIO_NOK ; 
     84e:	83 e0       	ldi	r24, 0x03	; 3
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	69 c0       	rjmp	.+210    	; 0x926 <__stack+0xc7>
							   }
							   break;
							   
			case u8_DIO_PORTC:  if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     854:	8c 81       	ldd	r24, Y+4	; 0x04
     856:	81 30       	cpi	r24, 0x01	; 1
     858:	a1 f4       	brne	.+40     	; 0x882 <__stack+0x23>
							    {
									SET_BIT(Ru8_DDRC,u8_PinNum) ;
     85a:	a4 e3       	ldi	r26, 0x34	; 52
     85c:	b0 e0       	ldi	r27, 0x00	; 0
     85e:	e4 e3       	ldi	r30, 0x34	; 52
     860:	f0 e0       	ldi	r31, 0x00	; 0
     862:	80 81       	ld	r24, Z
     864:	48 2f       	mov	r20, r24
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	28 2f       	mov	r18, r24
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	81 e0       	ldi	r24, 0x01	; 1
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	02 2e       	mov	r0, r18
     872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
     874:	88 0f       	add	r24, r24
     876:	99 1f       	adc	r25, r25
     878:	0a 94       	dec	r0
     87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
     87c:	84 2b       	or	r24, r20
     87e:	8c 93       	st	X, r24
     880:	52 c0       	rjmp	.+164    	; 0x926 <__stack+0xc7>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     882:	8c 81       	ldd	r24, Y+4	; 0x04
     884:	88 23       	and	r24, r24
     886:	a9 f4       	brne	.+42     	; 0x8b2 <__stack+0x53>
								{
									CLR_BIT(Ru8_DDRC,u8_PinNum) ;
     888:	a4 e3       	ldi	r26, 0x34	; 52
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	e4 e3       	ldi	r30, 0x34	; 52
     88e:	f0 e0       	ldi	r31, 0x00	; 0
     890:	80 81       	ld	r24, Z
     892:	48 2f       	mov	r20, r24
     894:	8b 81       	ldd	r24, Y+3	; 0x03
     896:	28 2f       	mov	r18, r24
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	02 2e       	mov	r0, r18
     8a0:	02 c0       	rjmp	.+4      	; 0x8a6 <__stack+0x47>
     8a2:	88 0f       	add	r24, r24
     8a4:	99 1f       	adc	r25, r25
     8a6:	0a 94       	dec	r0
     8a8:	e2 f7       	brpl	.-8      	; 0x8a2 <__stack+0x43>
     8aa:	80 95       	com	r24
     8ac:	84 23       	and	r24, r20
     8ae:	8c 93       	st	X, r24
     8b0:	3a c0       	rjmp	.+116    	; 0x926 <__stack+0xc7>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     8b2:	83 e0       	ldi	r24, 0x03	; 3
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	37 c0       	rjmp	.+110    	; 0x926 <__stack+0xc7>
								}
								break;
		
			case u8_DIO_PORTD: if(u8_PinDir ==u8_DIO_OUTPUT_PIN)
     8b8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ba:	81 30       	cpi	r24, 0x01	; 1
     8bc:	a1 f4       	brne	.+40     	; 0x8e6 <__stack+0x87>
							    {
									SET_BIT(Ru8_DDRD,u8_PinNum) ;
     8be:	a1 e3       	ldi	r26, 0x31	; 49
     8c0:	b0 e0       	ldi	r27, 0x00	; 0
     8c2:	e1 e3       	ldi	r30, 0x31	; 49
     8c4:	f0 e0       	ldi	r31, 0x00	; 0
     8c6:	80 81       	ld	r24, Z
     8c8:	48 2f       	mov	r20, r24
     8ca:	8b 81       	ldd	r24, Y+3	; 0x03
     8cc:	28 2f       	mov	r18, r24
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	02 2e       	mov	r0, r18
     8d6:	02 c0       	rjmp	.+4      	; 0x8dc <__stack+0x7d>
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	0a 94       	dec	r0
     8de:	e2 f7       	brpl	.-8      	; 0x8d8 <__stack+0x79>
     8e0:	84 2b       	or	r24, r20
     8e2:	8c 93       	st	X, r24
     8e4:	20 c0       	rjmp	.+64     	; 0x926 <__stack+0xc7>
								}
								else if(u8_PinDir ==u8_DIO_INPUT_PIN)
     8e6:	8c 81       	ldd	r24, Y+4	; 0x04
     8e8:	88 23       	and	r24, r24
     8ea:	a9 f4       	brne	.+42     	; 0x916 <__stack+0xb7>
								{
									CLR_BIT(Ru8_DDRD,u8_PinNum) ;
     8ec:	a1 e3       	ldi	r26, 0x31	; 49
     8ee:	b0 e0       	ldi	r27, 0x00	; 0
     8f0:	e1 e3       	ldi	r30, 0x31	; 49
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	80 81       	ld	r24, Z
     8f6:	48 2f       	mov	r20, r24
     8f8:	8b 81       	ldd	r24, Y+3	; 0x03
     8fa:	28 2f       	mov	r18, r24
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	02 2e       	mov	r0, r18
     904:	02 c0       	rjmp	.+4      	; 0x90a <__stack+0xab>
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	0a 94       	dec	r0
     90c:	e2 f7       	brpl	.-8      	; 0x906 <__stack+0xa7>
     90e:	80 95       	com	r24
     910:	84 23       	and	r24, r20
     912:	8c 93       	st	X, r24
     914:	08 c0       	rjmp	.+16     	; 0x926 <__stack+0xc7>
								}
								else 
								{
									u8_ErrorState = u8_DIO_NOK ; 
     916:	83 e0       	ldi	r24, 0x03	; 3
     918:	89 83       	std	Y+1, r24	; 0x01
     91a:	05 c0       	rjmp	.+10     	; 0x926 <__stack+0xc7>
								}
								break;
			
			default          : u8_ErrorState = u8_DIO_NOK ; 
     91c:	83 e0       	ldi	r24, 0x03	; 3
     91e:	89 83       	std	Y+1, r24	; 0x01
     920:	02 c0       	rjmp	.+4      	; 0x926 <__stack+0xc7>
								break ; 
		}
	}
	else 
	{
		u8_ErrorState = u8_DIO_NOK ; 
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState  ; 
     926:	89 81       	ldd	r24, Y+1	; 0x01
}
     928:	26 96       	adiw	r28, 0x06	; 6
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	f8 94       	cli
     92e:	de bf       	out	0x3e, r29	; 62
     930:	0f be       	out	0x3f, r0	; 63
     932:	cd bf       	out	0x3d, r28	; 61
     934:	cf 91       	pop	r28
     936:	df 91       	pop	r29
     938:	08 95       	ret

0000093a <DIO_u8SetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortVal(uint8_t u8_PortNum,uint8_t u8_PortState)
{
     93a:	df 93       	push	r29
     93c:	cf 93       	push	r28
     93e:	00 d0       	rcall	.+0      	; 0x940 <DIO_u8SetPortVal+0x6>
     940:	00 d0       	rcall	.+0      	; 0x942 <DIO_u8SetPortVal+0x8>
     942:	0f 92       	push	r0
     944:	cd b7       	in	r28, 0x3d	; 61
     946:	de b7       	in	r29, 0x3e	; 62
     948:	8a 83       	std	Y+2, r24	; 0x02
     94a:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	89 83       	std	Y+1, r24	; 0x01

		switch(u8_PortNum)
     950:	8a 81       	ldd	r24, Y+2	; 0x02
     952:	28 2f       	mov	r18, r24
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	3d 83       	std	Y+5, r19	; 0x05
     958:	2c 83       	std	Y+4, r18	; 0x04
     95a:	8c 81       	ldd	r24, Y+4	; 0x04
     95c:	9d 81       	ldd	r25, Y+5	; 0x05
     95e:	89 30       	cpi	r24, 0x09	; 9
     960:	91 05       	cpc	r25, r1
     962:	d9 f0       	breq	.+54     	; 0x99a <DIO_u8SetPortVal+0x60>
     964:	2c 81       	ldd	r18, Y+4	; 0x04
     966:	3d 81       	ldd	r19, Y+5	; 0x05
     968:	2a 30       	cpi	r18, 0x0A	; 10
     96a:	31 05       	cpc	r19, r1
     96c:	34 f4       	brge	.+12     	; 0x97a <DIO_u8SetPortVal+0x40>
     96e:	8c 81       	ldd	r24, Y+4	; 0x04
     970:	9d 81       	ldd	r25, Y+5	; 0x05
     972:	88 30       	cpi	r24, 0x08	; 8
     974:	91 05       	cpc	r25, r1
     976:	61 f0       	breq	.+24     	; 0x990 <DIO_u8SetPortVal+0x56>
     978:	1f c0       	rjmp	.+62     	; 0x9b8 <DIO_u8SetPortVal+0x7e>
     97a:	2c 81       	ldd	r18, Y+4	; 0x04
     97c:	3d 81       	ldd	r19, Y+5	; 0x05
     97e:	2a 30       	cpi	r18, 0x0A	; 10
     980:	31 05       	cpc	r19, r1
     982:	81 f0       	breq	.+32     	; 0x9a4 <DIO_u8SetPortVal+0x6a>
     984:	8c 81       	ldd	r24, Y+4	; 0x04
     986:	9d 81       	ldd	r25, Y+5	; 0x05
     988:	8b 30       	cpi	r24, 0x0B	; 11
     98a:	91 05       	cpc	r25, r1
     98c:	81 f0       	breq	.+32     	; 0x9ae <DIO_u8SetPortVal+0x74>
     98e:	14 c0       	rjmp	.+40     	; 0x9b8 <DIO_u8SetPortVal+0x7e>
		{
			case u8_DIO_PORTA: Ru8_PORTA = u8_PortState ;  break ;			   
     990:	eb e3       	ldi	r30, 0x3B	; 59
     992:	f0 e0       	ldi	r31, 0x00	; 0
     994:	8b 81       	ldd	r24, Y+3	; 0x03
     996:	80 83       	st	Z, r24
     998:	11 c0       	rjmp	.+34     	; 0x9bc <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTB: Ru8_PORTB = u8_PortState ;  break ;	
     99a:	e8 e3       	ldi	r30, 0x38	; 56
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	8b 81       	ldd	r24, Y+3	; 0x03
     9a0:	80 83       	st	Z, r24
     9a2:	0c c0       	rjmp	.+24     	; 0x9bc <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTC: Ru8_PORTC = u8_PortState ;  break ;	
     9a4:	e5 e3       	ldi	r30, 0x35	; 53
     9a6:	f0 e0       	ldi	r31, 0x00	; 0
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	80 83       	st	Z, r24
     9ac:	07 c0       	rjmp	.+14     	; 0x9bc <DIO_u8SetPortVal+0x82>
			case u8_DIO_PORTD: Ru8_PORTD = u8_PortState ;  break ;	
     9ae:	e2 e3       	ldi	r30, 0x32	; 50
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	8b 81       	ldd	r24, Y+3	; 0x03
     9b4:	80 83       	st	Z, r24
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <DIO_u8SetPortVal+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
     9b8:	83 e0       	ldi	r24, 0x03	; 3
     9ba:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
     9bc:	89 81       	ldd	r24, Y+1	; 0x01
}
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	cf 91       	pop	r28
     9ca:	df 91       	pop	r29
     9cc:	08 95       	ret

000009ce <DIO_u8SetPortDir>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8SetPortDir(uint8_t u8_PortNum,uint8_t u8_PortDir)
{
     9ce:	df 93       	push	r29
     9d0:	cf 93       	push	r28
     9d2:	00 d0       	rcall	.+0      	; 0x9d4 <DIO_u8SetPortDir+0x6>
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <DIO_u8SetPortDir+0x8>
     9d6:	0f 92       	push	r0
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	8a 83       	std	Y+2, r24	; 0x02
     9de:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	89 83       	std	Y+1, r24	; 0x01
		switch(u8_PortNum)
     9e4:	8a 81       	ldd	r24, Y+2	; 0x02
     9e6:	28 2f       	mov	r18, r24
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	3d 83       	std	Y+5, r19	; 0x05
     9ec:	2c 83       	std	Y+4, r18	; 0x04
     9ee:	8c 81       	ldd	r24, Y+4	; 0x04
     9f0:	9d 81       	ldd	r25, Y+5	; 0x05
     9f2:	89 30       	cpi	r24, 0x09	; 9
     9f4:	91 05       	cpc	r25, r1
     9f6:	d9 f0       	breq	.+54     	; 0xa2e <DIO_u8SetPortDir+0x60>
     9f8:	2c 81       	ldd	r18, Y+4	; 0x04
     9fa:	3d 81       	ldd	r19, Y+5	; 0x05
     9fc:	2a 30       	cpi	r18, 0x0A	; 10
     9fe:	31 05       	cpc	r19, r1
     a00:	34 f4       	brge	.+12     	; 0xa0e <DIO_u8SetPortDir+0x40>
     a02:	8c 81       	ldd	r24, Y+4	; 0x04
     a04:	9d 81       	ldd	r25, Y+5	; 0x05
     a06:	88 30       	cpi	r24, 0x08	; 8
     a08:	91 05       	cpc	r25, r1
     a0a:	61 f0       	breq	.+24     	; 0xa24 <DIO_u8SetPortDir+0x56>
     a0c:	1f c0       	rjmp	.+62     	; 0xa4c <DIO_u8SetPortDir+0x7e>
     a0e:	2c 81       	ldd	r18, Y+4	; 0x04
     a10:	3d 81       	ldd	r19, Y+5	; 0x05
     a12:	2a 30       	cpi	r18, 0x0A	; 10
     a14:	31 05       	cpc	r19, r1
     a16:	81 f0       	breq	.+32     	; 0xa38 <DIO_u8SetPortDir+0x6a>
     a18:	8c 81       	ldd	r24, Y+4	; 0x04
     a1a:	9d 81       	ldd	r25, Y+5	; 0x05
     a1c:	8b 30       	cpi	r24, 0x0B	; 11
     a1e:	91 05       	cpc	r25, r1
     a20:	81 f0       	breq	.+32     	; 0xa42 <DIO_u8SetPortDir+0x74>
     a22:	14 c0       	rjmp	.+40     	; 0xa4c <DIO_u8SetPortDir+0x7e>
		{
			case u8_DIO_PORTA: Ru8_DDRA = u8_PortDir ;     break ;			   
     a24:	ea e3       	ldi	r30, 0x3A	; 58
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	8b 81       	ldd	r24, Y+3	; 0x03
     a2a:	80 83       	st	Z, r24
     a2c:	11 c0       	rjmp	.+34     	; 0xa50 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTB: Ru8_DDRB = u8_PortDir ;     break ;	
     a2e:	e7 e3       	ldi	r30, 0x37	; 55
     a30:	f0 e0       	ldi	r31, 0x00	; 0
     a32:	8b 81       	ldd	r24, Y+3	; 0x03
     a34:	80 83       	st	Z, r24
     a36:	0c c0       	rjmp	.+24     	; 0xa50 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTC: Ru8_DDRC = u8_PortDir ;     break ;	
     a38:	e4 e3       	ldi	r30, 0x34	; 52
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	80 83       	st	Z, r24
     a40:	07 c0       	rjmp	.+14     	; 0xa50 <DIO_u8SetPortDir+0x82>
			case u8_DIO_PORTD: Ru8_DDRD = u8_PortDir ;     break ;	
     a42:	e1 e3       	ldi	r30, 0x31	; 49
     a44:	f0 e0       	ldi	r31, 0x00	; 0
     a46:	8b 81       	ldd	r24, Y+3	; 0x03
     a48:	80 83       	st	Z, r24
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <DIO_u8SetPortDir+0x82>
			default          : u8_ErrorState = u8_DIO_NOK; break ; 
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	89 83       	std	Y+1, r24	; 0x01
		}
		
	return u8_ErrorState  ; 
     a50:	89 81       	ldd	r24, Y+1	; 0x01
}
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	0f 90       	pop	r0
     a5c:	cf 91       	pop	r28
     a5e:	df 91       	pop	r29
     a60:	08 95       	ret

00000a62 <DIO_u8GetPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum,uint8_t* pu8_ReturnedPinVal)      
{
     a62:	df 93       	push	r29
     a64:	cf 93       	push	r28
     a66:	cd b7       	in	r28, 0x3d	; 61
     a68:	de b7       	in	r29, 0x3e	; 62
     a6a:	27 97       	sbiw	r28, 0x07	; 7
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	de bf       	out	0x3e, r29	; 62
     a72:	0f be       	out	0x3f, r0	; 63
     a74:	cd bf       	out	0x3d, r28	; 61
     a76:	8a 83       	std	Y+2, r24	; 0x02
     a78:	6b 83       	std	Y+3, r22	; 0x03
     a7a:	5d 83       	std	Y+5, r21	; 0x05
     a7c:	4c 83       	std	Y+4, r20	; 0x04
		uint8_t u8_ErrorState = u8_DIO_OK;
     a7e:	82 e0       	ldi	r24, 0x02	; 2
     a80:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     a82:	8b 81       	ldd	r24, Y+3	; 0x03
     a84:	88 30       	cpi	r24, 0x08	; 8
     a86:	08 f0       	brcs	.+2      	; 0xa8a <DIO_u8GetPinVal+0x28>
     a88:	74 c0       	rjmp	.+232    	; 0xb72 <DIO_u8GetPinVal+0x110>
		{
			switch(u8_PortNum)
     a8a:	8a 81       	ldd	r24, Y+2	; 0x02
     a8c:	28 2f       	mov	r18, r24
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	3f 83       	std	Y+7, r19	; 0x07
     a92:	2e 83       	std	Y+6, r18	; 0x06
     a94:	4e 81       	ldd	r20, Y+6	; 0x06
     a96:	5f 81       	ldd	r21, Y+7	; 0x07
     a98:	49 30       	cpi	r20, 0x09	; 9
     a9a:	51 05       	cpc	r21, r1
     a9c:	59 f1       	breq	.+86     	; 0xaf4 <DIO_u8GetPinVal+0x92>
     a9e:	8e 81       	ldd	r24, Y+6	; 0x06
     aa0:	9f 81       	ldd	r25, Y+7	; 0x07
     aa2:	8a 30       	cpi	r24, 0x0A	; 10
     aa4:	91 05       	cpc	r25, r1
     aa6:	34 f4       	brge	.+12     	; 0xab4 <DIO_u8GetPinVal+0x52>
     aa8:	2e 81       	ldd	r18, Y+6	; 0x06
     aaa:	3f 81       	ldd	r19, Y+7	; 0x07
     aac:	28 30       	cpi	r18, 0x08	; 8
     aae:	31 05       	cpc	r19, r1
     ab0:	69 f0       	breq	.+26     	; 0xacc <DIO_u8GetPinVal+0x6a>
     ab2:	5c c0       	rjmp	.+184    	; 0xb6c <DIO_u8GetPinVal+0x10a>
     ab4:	4e 81       	ldd	r20, Y+6	; 0x06
     ab6:	5f 81       	ldd	r21, Y+7	; 0x07
     ab8:	4a 30       	cpi	r20, 0x0A	; 10
     aba:	51 05       	cpc	r21, r1
     abc:	79 f1       	breq	.+94     	; 0xb1c <DIO_u8GetPinVal+0xba>
     abe:	8e 81       	ldd	r24, Y+6	; 0x06
     ac0:	9f 81       	ldd	r25, Y+7	; 0x07
     ac2:	8b 30       	cpi	r24, 0x0B	; 11
     ac4:	91 05       	cpc	r25, r1
     ac6:	09 f4       	brne	.+2      	; 0xaca <DIO_u8GetPinVal+0x68>
     ac8:	3d c0       	rjmp	.+122    	; 0xb44 <DIO_u8GetPinVal+0xe2>
     aca:	50 c0       	rjmp	.+160    	; 0xb6c <DIO_u8GetPinVal+0x10a>
			{
				case u8_DIO_PORTA: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINA,u8_PinNum)  ; break ;
     acc:	e9 e3       	ldi	r30, 0x39	; 57
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	28 2f       	mov	r18, r24
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	8b 81       	ldd	r24, Y+3	; 0x03
     ad8:	88 2f       	mov	r24, r24
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a9 01       	movw	r20, r18
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <DIO_u8GetPinVal+0x82>
     ae0:	55 95       	asr	r21
     ae2:	47 95       	ror	r20
     ae4:	8a 95       	dec	r24
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <DIO_u8GetPinVal+0x7e>
     ae8:	ca 01       	movw	r24, r20
     aea:	81 70       	andi	r24, 0x01	; 1
     aec:	ec 81       	ldd	r30, Y+4	; 0x04
     aee:	fd 81       	ldd	r31, Y+5	; 0x05
     af0:	80 83       	st	Z, r24
     af2:	41 c0       	rjmp	.+130    	; 0xb76 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTB: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINB,u8_PinNum)  ; break ;
     af4:	e6 e3       	ldi	r30, 0x36	; 54
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	28 2f       	mov	r18, r24
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	8b 81       	ldd	r24, Y+3	; 0x03
     b00:	88 2f       	mov	r24, r24
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a9 01       	movw	r20, r18
     b06:	02 c0       	rjmp	.+4      	; 0xb0c <DIO_u8GetPinVal+0xaa>
     b08:	55 95       	asr	r21
     b0a:	47 95       	ror	r20
     b0c:	8a 95       	dec	r24
     b0e:	e2 f7       	brpl	.-8      	; 0xb08 <DIO_u8GetPinVal+0xa6>
     b10:	ca 01       	movw	r24, r20
     b12:	81 70       	andi	r24, 0x01	; 1
     b14:	ec 81       	ldd	r30, Y+4	; 0x04
     b16:	fd 81       	ldd	r31, Y+5	; 0x05
     b18:	80 83       	st	Z, r24
     b1a:	2d c0       	rjmp	.+90     	; 0xb76 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTC: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PINC,u8_PinNum)  ; break ;
     b1c:	e3 e3       	ldi	r30, 0x33	; 51
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	28 2f       	mov	r18, r24
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	8b 81       	ldd	r24, Y+3	; 0x03
     b28:	88 2f       	mov	r24, r24
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a9 01       	movw	r20, r18
     b2e:	02 c0       	rjmp	.+4      	; 0xb34 <DIO_u8GetPinVal+0xd2>
     b30:	55 95       	asr	r21
     b32:	47 95       	ror	r20
     b34:	8a 95       	dec	r24
     b36:	e2 f7       	brpl	.-8      	; 0xb30 <DIO_u8GetPinVal+0xce>
     b38:	ca 01       	movw	r24, r20
     b3a:	81 70       	andi	r24, 0x01	; 1
     b3c:	ec 81       	ldd	r30, Y+4	; 0x04
     b3e:	fd 81       	ldd	r31, Y+5	; 0x05
     b40:	80 83       	st	Z, r24
     b42:	19 c0       	rjmp	.+50     	; 0xb76 <DIO_u8GetPinVal+0x114>
				case u8_DIO_PORTD: (*pu8_ReturnedPinVal) = GET_BIT(Ru8_PIND,u8_PinNum)  ; break ;
     b44:	e0 e3       	ldi	r30, 0x30	; 48
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	88 2f       	mov	r24, r24
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	a9 01       	movw	r20, r18
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <DIO_u8GetPinVal+0xfa>
     b58:	55 95       	asr	r21
     b5a:	47 95       	ror	r20
     b5c:	8a 95       	dec	r24
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <DIO_u8GetPinVal+0xf6>
     b60:	ca 01       	movw	r24, r20
     b62:	81 70       	andi	r24, 0x01	; 1
     b64:	ec 81       	ldd	r30, Y+4	; 0x04
     b66:	fd 81       	ldd	r31, Y+5	; 0x05
     b68:	80 83       	st	Z, r24
     b6a:	05 c0       	rjmp	.+10     	; 0xb76 <DIO_u8GetPinVal+0x114>
				default          : u8_ErrorState = u8_DIO_NOK; 							 break ; 
     b6c:	83 e0       	ldi	r24, 0x03	; 3
     b6e:	89 83       	std	Y+1, r24	; 0x01
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <DIO_u8GetPinVal+0x114>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
     b72:	83 e0       	ldi	r24, 0x03	; 3
     b74:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
     b76:	89 81       	ldd	r24, Y+1	; 0x01
}
     b78:	27 96       	adiw	r28, 0x07	; 7
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	f8 94       	cli
     b7e:	de bf       	out	0x3e, r29	; 62
     b80:	0f be       	out	0x3f, r0	; 63
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <DIO_u8GetPortVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8GetPortVal(uint8_t u8_PortNum,uint8_t* pu8_ReturnedPortVal)           
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <DIO_u8GetPortVal+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <DIO_u8GetPortVal+0x8>
     b92:	00 d0       	rcall	.+0      	; 0xb94 <DIO_u8GetPortVal+0xa>
     b94:	cd b7       	in	r28, 0x3d	; 61
     b96:	de b7       	in	r29, 0x3e	; 62
     b98:	8a 83       	std	Y+2, r24	; 0x02
     b9a:	7c 83       	std	Y+4, r23	; 0x04
     b9c:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorState = u8_DIO_OK;
     b9e:	82 e0       	ldi	r24, 0x02	; 2
     ba0:	89 83       	std	Y+1, r24	; 0x01

	switch(u8_PortNum)
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	28 2f       	mov	r18, r24
     ba6:	30 e0       	ldi	r19, 0x00	; 0
     ba8:	3e 83       	std	Y+6, r19	; 0x06
     baa:	2d 83       	std	Y+5, r18	; 0x05
     bac:	8d 81       	ldd	r24, Y+5	; 0x05
     bae:	9e 81       	ldd	r25, Y+6	; 0x06
     bb0:	89 30       	cpi	r24, 0x09	; 9
     bb2:	91 05       	cpc	r25, r1
     bb4:	e9 f0       	breq	.+58     	; 0xbf0 <DIO_u8GetPortVal+0x66>
     bb6:	2d 81       	ldd	r18, Y+5	; 0x05
     bb8:	3e 81       	ldd	r19, Y+6	; 0x06
     bba:	2a 30       	cpi	r18, 0x0A	; 10
     bbc:	31 05       	cpc	r19, r1
     bbe:	34 f4       	brge	.+12     	; 0xbcc <DIO_u8GetPortVal+0x42>
     bc0:	8d 81       	ldd	r24, Y+5	; 0x05
     bc2:	9e 81       	ldd	r25, Y+6	; 0x06
     bc4:	88 30       	cpi	r24, 0x08	; 8
     bc6:	91 05       	cpc	r25, r1
     bc8:	61 f0       	breq	.+24     	; 0xbe2 <DIO_u8GetPortVal+0x58>
     bca:	27 c0       	rjmp	.+78     	; 0xc1a <DIO_u8GetPortVal+0x90>
     bcc:	2d 81       	ldd	r18, Y+5	; 0x05
     bce:	3e 81       	ldd	r19, Y+6	; 0x06
     bd0:	2a 30       	cpi	r18, 0x0A	; 10
     bd2:	31 05       	cpc	r19, r1
     bd4:	a1 f0       	breq	.+40     	; 0xbfe <DIO_u8GetPortVal+0x74>
     bd6:	8d 81       	ldd	r24, Y+5	; 0x05
     bd8:	9e 81       	ldd	r25, Y+6	; 0x06
     bda:	8b 30       	cpi	r24, 0x0B	; 11
     bdc:	91 05       	cpc	r25, r1
     bde:	b1 f0       	breq	.+44     	; 0xc0c <DIO_u8GetPortVal+0x82>
     be0:	1c c0       	rjmp	.+56     	; 0xc1a <DIO_u8GetPortVal+0x90>
	{
		case u8_DIO_PORTA: (*pu8_ReturnedPortVal) = Ru8_PINA ;  break ;
     be2:	e9 e3       	ldi	r30, 0x39	; 57
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	eb 81       	ldd	r30, Y+3	; 0x03
     bea:	fc 81       	ldd	r31, Y+4	; 0x04
     bec:	80 83       	st	Z, r24
     bee:	17 c0       	rjmp	.+46     	; 0xc1e <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTB: (*pu8_ReturnedPortVal) = Ru8_PINB ;  break ;
     bf0:	e6 e3       	ldi	r30, 0x36	; 54
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	eb 81       	ldd	r30, Y+3	; 0x03
     bf8:	fc 81       	ldd	r31, Y+4	; 0x04
     bfa:	80 83       	st	Z, r24
     bfc:	10 c0       	rjmp	.+32     	; 0xc1e <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTC: (*pu8_ReturnedPortVal) = Ru8_PINC ;  break ;
     bfe:	e3 e3       	ldi	r30, 0x33	; 51
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	80 81       	ld	r24, Z
     c04:	eb 81       	ldd	r30, Y+3	; 0x03
     c06:	fc 81       	ldd	r31, Y+4	; 0x04
     c08:	80 83       	st	Z, r24
     c0a:	09 c0       	rjmp	.+18     	; 0xc1e <DIO_u8GetPortVal+0x94>
		case u8_DIO_PORTD: (*pu8_ReturnedPortVal) = Ru8_PIND ;  break ;
     c0c:	e0 e3       	ldi	r30, 0x30	; 48
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	eb 81       	ldd	r30, Y+3	; 0x03
     c14:	fc 81       	ldd	r31, Y+4	; 0x04
     c16:	80 83       	st	Z, r24
     c18:	02 c0       	rjmp	.+4      	; 0xc1e <DIO_u8GetPortVal+0x94>
		default          :  u8_ErrorState = u8_DIO_NOK; 	    break ;
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8_ErrorState  ; 
     c1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     c20:	26 96       	adiw	r28, 0x06	; 6
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <DIO_u8TogPinVal>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t DIO_u8TogPinVal(uint8_t u8_PortNum,uint8_t u8_PinNum)           
{
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	00 d0       	rcall	.+0      	; 0xc38 <DIO_u8TogPinVal+0x6>
     c38:	00 d0       	rcall	.+0      	; 0xc3a <DIO_u8TogPinVal+0x8>
     c3a:	0f 92       	push	r0
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	8a 83       	std	Y+2, r24	; 0x02
     c42:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorState = u8_DIO_OK;
     c44:	82 e0       	ldi	r24, 0x02	; 2
     c46:	89 83       	std	Y+1, r24	; 0x01
		if(u8_PinNum>=u8_DIO_PIN0 && u8_PinNum<=u8_DIO_PIN7)
     c48:	8b 81       	ldd	r24, Y+3	; 0x03
     c4a:	88 30       	cpi	r24, 0x08	; 8
     c4c:	08 f0       	brcs	.+2      	; 0xc50 <DIO_u8TogPinVal+0x1e>
     c4e:	73 c0       	rjmp	.+230    	; 0xd36 <DIO_u8TogPinVal+0x104>
		{
			switch(u8_PortNum)
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	3d 83       	std	Y+5, r19	; 0x05
     c58:	2c 83       	std	Y+4, r18	; 0x04
     c5a:	8c 81       	ldd	r24, Y+4	; 0x04
     c5c:	9d 81       	ldd	r25, Y+5	; 0x05
     c5e:	89 30       	cpi	r24, 0x09	; 9
     c60:	91 05       	cpc	r25, r1
     c62:	51 f1       	breq	.+84     	; 0xcb8 <DIO_u8TogPinVal+0x86>
     c64:	2c 81       	ldd	r18, Y+4	; 0x04
     c66:	3d 81       	ldd	r19, Y+5	; 0x05
     c68:	2a 30       	cpi	r18, 0x0A	; 10
     c6a:	31 05       	cpc	r19, r1
     c6c:	34 f4       	brge	.+12     	; 0xc7a <DIO_u8TogPinVal+0x48>
     c6e:	8c 81       	ldd	r24, Y+4	; 0x04
     c70:	9d 81       	ldd	r25, Y+5	; 0x05
     c72:	88 30       	cpi	r24, 0x08	; 8
     c74:	91 05       	cpc	r25, r1
     c76:	61 f0       	breq	.+24     	; 0xc90 <DIO_u8TogPinVal+0x5e>
     c78:	5b c0       	rjmp	.+182    	; 0xd30 <DIO_u8TogPinVal+0xfe>
     c7a:	2c 81       	ldd	r18, Y+4	; 0x04
     c7c:	3d 81       	ldd	r19, Y+5	; 0x05
     c7e:	2a 30       	cpi	r18, 0x0A	; 10
     c80:	31 05       	cpc	r19, r1
     c82:	71 f1       	breq	.+92     	; 0xce0 <DIO_u8TogPinVal+0xae>
     c84:	8c 81       	ldd	r24, Y+4	; 0x04
     c86:	9d 81       	ldd	r25, Y+5	; 0x05
     c88:	8b 30       	cpi	r24, 0x0B	; 11
     c8a:	91 05       	cpc	r25, r1
     c8c:	e9 f1       	breq	.+122    	; 0xd08 <DIO_u8TogPinVal+0xd6>
     c8e:	50 c0       	rjmp	.+160    	; 0xd30 <DIO_u8TogPinVal+0xfe>
			{
				case u8_DIO_PORTA: TOG_BIT(Ru8_PORTA,u8_PinNum) ;  break ;
     c90:	ab e3       	ldi	r26, 0x3B	; 59
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	eb e3       	ldi	r30, 0x3B	; 59
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	48 2f       	mov	r20, r24
     c9c:	8b 81       	ldd	r24, Y+3	; 0x03
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	02 2e       	mov	r0, r18
     ca8:	02 c0       	rjmp	.+4      	; 0xcae <DIO_u8TogPinVal+0x7c>
     caa:	88 0f       	add	r24, r24
     cac:	99 1f       	adc	r25, r25
     cae:	0a 94       	dec	r0
     cb0:	e2 f7       	brpl	.-8      	; 0xcaa <DIO_u8TogPinVal+0x78>
     cb2:	84 27       	eor	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	41 c0       	rjmp	.+130    	; 0xd3a <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTB: TOG_BIT(Ru8_PORTB,u8_PinNum) ;  break ;
     cb8:	a8 e3       	ldi	r26, 0x38	; 56
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 e3       	ldi	r30, 0x38	; 56
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_u8TogPinVal+0xa4>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_u8TogPinVal+0xa0>
     cda:	84 27       	eor	r24, r20
     cdc:	8c 93       	st	X, r24
     cde:	2d c0       	rjmp	.+90     	; 0xd3a <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTC: TOG_BIT(Ru8_PORTC,u8_PinNum) ;  break ;
     ce0:	a5 e3       	ldi	r26, 0x35	; 53
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e5 e3       	ldi	r30, 0x35	; 53
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	48 2f       	mov	r20, r24
     cec:	8b 81       	ldd	r24, Y+3	; 0x03
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	02 2e       	mov	r0, r18
     cf8:	02 c0       	rjmp	.+4      	; 0xcfe <DIO_u8TogPinVal+0xcc>
     cfa:	88 0f       	add	r24, r24
     cfc:	99 1f       	adc	r25, r25
     cfe:	0a 94       	dec	r0
     d00:	e2 f7       	brpl	.-8      	; 0xcfa <DIO_u8TogPinVal+0xc8>
     d02:	84 27       	eor	r24, r20
     d04:	8c 93       	st	X, r24
     d06:	19 c0       	rjmp	.+50     	; 0xd3a <DIO_u8TogPinVal+0x108>
				case u8_DIO_PORTD: TOG_BIT(Ru8_PORTD,u8_PinNum) ;  break ;
     d08:	a2 e3       	ldi	r26, 0x32	; 50
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e2 e3       	ldi	r30, 0x32	; 50
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_u8TogPinVal+0xf4>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_u8TogPinVal+0xf0>
     d2a:	84 27       	eor	r24, r20
     d2c:	8c 93       	st	X, r24
     d2e:	05 c0       	rjmp	.+10     	; 0xd3a <DIO_u8TogPinVal+0x108>
				default          :  u8_ErrorState = u8_DIO_NOK;   break ; 
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	89 83       	std	Y+1, r24	; 0x01
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <DIO_u8TogPinVal+0x108>
			}
		}
		else 
		{
			u8_ErrorState = u8_DIO_NOK;
     d36:	83 e0       	ldi	r24, 0x03	; 3
     d38:	89 83       	std	Y+1, r24	; 0x01
		}
	return u8_ErrorState  ; 
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	0f 90       	pop	r0
     d42:	0f 90       	pop	r0
     d44:	0f 90       	pop	r0
     d46:	cf 91       	pop	r28
     d48:	df 91       	pop	r29
     d4a:	08 95       	ret

00000d4c <DIO_voidDisablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidDisablePullUps(void)   
{
     d4c:	df 93       	push	r29
     d4e:	cf 93       	push	r28
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(Ru8_SFIOR,u8_PUD) ;
     d54:	a0 e5       	ldi	r26, 0x50	; 80
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e0 e5       	ldi	r30, 0x50	; 80
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	84 60       	ori	r24, 0x04	; 4
     d60:	8c 93       	st	X, r24
}
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <DIO_voidEnablePullUps>:

////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void DIO_voidEnablePullUps(void)  
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	cd b7       	in	r28, 0x3d	; 61
     d6e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_SFIOR,u8_PUD) ;
     d70:	a0 e5       	ldi	r26, 0x50	; 80
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e0 e5       	ldi	r30, 0x50	; 80
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	8b 7f       	andi	r24, 0xFB	; 251
     d7c:	8c 93       	st	X, r24
}
     d7e:	cf 91       	pop	r28
     d80:	df 91       	pop	r29
     d82:	08 95       	ret

00000d84 <TIMERS_voidInit>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////


void TIMERS_voidInit(void)
{
     d84:	df 93       	push	r29
     d86:	cf 93       	push	r28
     d88:	cd b7       	in	r28, 0x3d	; 61
     d8a:	de b7       	in	r29, 0x3e	; 62
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE
		CLR_BIT(Ru8_TCCR0,u8_WGM00_BIT) ;
     d8c:	a3 e5       	ldi	r26, 0x53	; 83
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	e3 e5       	ldi	r30, 0x53	; 83
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	8f 7b       	andi	r24, 0xBF	; 191
     d98:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_WGM01_BIT) ;
     d9a:	a3 e5       	ldi	r26, 0x53	; 83
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e3 e5       	ldi	r30, 0x53	; 83
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	87 7f       	andi	r24, 0xF7	; 247
     da6:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_FOC0_BIT) ;
     da8:	a3 e5       	ldi	r26, 0x53	; 83
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	e3 e5       	ldi	r30, 0x53	; 83
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	8f 77       	andi	r24, 0x7F	; 127
     db4:	8c 93       	st	X, r24
	
	
	
	#if	u8_TIMER0_MODE_CONFIG==u8_NORMAL_MODE||u8_TIMER0_MODE_CONFIG==u8_CTC_MODE
		#if u8_TIMER0_COMP_MATCH_NON_PWM_CONFIG==u8_OC0_DISCONNECTED
			CLR_BIT(Ru8_TCCR0,u8_COM00_BIT) ;
     db6:	a3 e5       	ldi	r26, 0x53	; 83
     db8:	b0 e0       	ldi	r27, 0x00	; 0
     dba:	e3 e5       	ldi	r30, 0x53	; 83
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	8f 7d       	andi	r24, 0xDF	; 223
     dc2:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_COM01_BIT) ;
     dc4:	a3 e5       	ldi	r26, 0x53	; 83
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e3 e5       	ldi	r30, 0x53	; 83
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	8f 7e       	andi	r24, 0xEF	; 239
     dd0:	8c 93       	st	X, r24
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_NO_PRE
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
		CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#elif u8_TIMER0_1_CLOCK_SELECT==u8_INTERNAL_CLK_PRE_8
		CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     dd2:	a3 e5       	ldi	r26, 0x53	; 83
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e3 e5       	ldi	r30, 0x53	; 83
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	8b 7f       	andi	r24, 0xFB	; 251
     dde:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     de0:	a3 e5       	ldi	r26, 0x53	; 83
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e3 e5       	ldi	r30, 0x53	; 83
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	82 60       	ori	r24, 0x02	; 2
     dec:	8c 93       	st	X, r24
		CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     dee:	a3 e5       	ldi	r26, 0x53	; 83
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e3 e5       	ldi	r30, 0x53	; 83
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	8e 7f       	andi	r24, 0xFE	; 254
     dfa:	8c 93       	st	X, r24
		SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
	#else
		#error "wrong clock select config"
	#endif

}
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <TIMER0_u8StartWithclockAndPrescalerSelect>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8StartWithclockAndPrescalerSelect(uint8_t u8_preScallerVal) 
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <TIMER0_u8StartWithclockAndPrescalerSelect+0x6>
     e08:	00 d0       	rcall	.+0      	; 0xe0a <TIMER0_u8StartWithclockAndPrescalerSelect+0x8>
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_preScallerVal)
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	3c 83       	std	Y+4, r19	; 0x04
     e1c:	2b 83       	std	Y+3, r18	; 0x03
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	89 30       	cpi	r24, 0x09	; 9
     e24:	91 05       	cpc	r25, r1
     e26:	09 f4       	brne	.+2      	; 0xe2a <TIMER0_u8StartWithclockAndPrescalerSelect+0x28>
     e28:	6b c0       	rjmp	.+214    	; 0xf00 <TIMER0_u8StartWithclockAndPrescalerSelect+0xfe>
     e2a:	2b 81       	ldd	r18, Y+3	; 0x03
     e2c:	3c 81       	ldd	r19, Y+4	; 0x04
     e2e:	2a 30       	cpi	r18, 0x0A	; 10
     e30:	31 05       	cpc	r19, r1
     e32:	8c f4       	brge	.+34     	; 0xe56 <TIMER0_u8StartWithclockAndPrescalerSelect+0x54>
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	9c 81       	ldd	r25, Y+4	; 0x04
     e38:	87 30       	cpi	r24, 0x07	; 7
     e3a:	91 05       	cpc	r25, r1
     e3c:	a9 f1       	breq	.+106    	; 0xea8 <TIMER0_u8StartWithclockAndPrescalerSelect+0xa6>
     e3e:	2b 81       	ldd	r18, Y+3	; 0x03
     e40:	3c 81       	ldd	r19, Y+4	; 0x04
     e42:	28 30       	cpi	r18, 0x08	; 8
     e44:	31 05       	cpc	r19, r1
     e46:	0c f0       	brlt	.+2      	; 0xe4a <TIMER0_u8StartWithclockAndPrescalerSelect+0x48>
     e48:	45 c0       	rjmp	.+138    	; 0xed4 <TIMER0_u8StartWithclockAndPrescalerSelect+0xd2>
     e4a:	8b 81       	ldd	r24, Y+3	; 0x03
     e4c:	9c 81       	ldd	r25, Y+4	; 0x04
     e4e:	86 30       	cpi	r24, 0x06	; 6
     e50:	91 05       	cpc	r25, r1
     e52:	a1 f0       	breq	.+40     	; 0xe7c <TIMER0_u8StartWithclockAndPrescalerSelect+0x7a>
     e54:	ad c0       	rjmp	.+346    	; 0xfb0 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
     e56:	2b 81       	ldd	r18, Y+3	; 0x03
     e58:	3c 81       	ldd	r19, Y+4	; 0x04
     e5a:	2b 30       	cpi	r18, 0x0B	; 11
     e5c:	31 05       	cpc	r19, r1
     e5e:	09 f4       	brne	.+2      	; 0xe62 <TIMER0_u8StartWithclockAndPrescalerSelect+0x60>
     e60:	7b c0       	rjmp	.+246    	; 0xf58 <TIMER0_u8StartWithclockAndPrescalerSelect+0x156>
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	8b 30       	cpi	r24, 0x0B	; 11
     e68:	91 05       	cpc	r25, r1
     e6a:	0c f4       	brge	.+2      	; 0xe6e <TIMER0_u8StartWithclockAndPrescalerSelect+0x6c>
     e6c:	5f c0       	rjmp	.+190    	; 0xf2c <TIMER0_u8StartWithclockAndPrescalerSelect+0x12a>
     e6e:	2b 81       	ldd	r18, Y+3	; 0x03
     e70:	3c 81       	ldd	r19, Y+4	; 0x04
     e72:	2c 30       	cpi	r18, 0x0C	; 12
     e74:	31 05       	cpc	r19, r1
     e76:	09 f4       	brne	.+2      	; 0xe7a <TIMER0_u8StartWithclockAndPrescalerSelect+0x78>
     e78:	85 c0       	rjmp	.+266    	; 0xf84 <TIMER0_u8StartWithclockAndPrescalerSelect+0x182>
     e7a:	9a c0       	rjmp	.+308    	; 0xfb0 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1ae>
	{
		case u8_INTERNAL_CLK_NO_PRE:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     e7c:	a3 e5       	ldi	r26, 0x53	; 83
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e3 e5       	ldi	r30, 0x53	; 83
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	8b 7f       	andi	r24, 0xFB	; 251
     e88:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     e8a:	a3 e5       	ldi	r26, 0x53	; 83
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e3 e5       	ldi	r30, 0x53	; 83
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	8d 7f       	andi	r24, 0xFD	; 253
     e96:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     e98:	a3 e5       	ldi	r26, 0x53	; 83
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e3 e5       	ldi	r30, 0x53	; 83
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	81 60       	ori	r24, 0x01	; 1
     ea4:	8c 93       	st	X, r24
     ea6:	85 c0       	rjmp	.+266    	; 0xfb2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_8:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     ea8:	a3 e5       	ldi	r26, 0x53	; 83
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	e3 e5       	ldi	r30, 0x53	; 83
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	8b 7f       	andi	r24, 0xFB	; 251
     eb4:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e3 e5       	ldi	r30, 0x53	; 83
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	82 60       	ori	r24, 0x02	; 2
     ec2:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     ec4:	a3 e5       	ldi	r26, 0x53	; 83
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e3 e5       	ldi	r30, 0x53	; 83
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	8e 7f       	andi	r24, 0xFE	; 254
     ed0:	8c 93       	st	X, r24
     ed2:	6f c0       	rjmp	.+222    	; 0xfb2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_64:
			CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     ed4:	a3 e5       	ldi	r26, 0x53	; 83
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e3 e5       	ldi	r30, 0x53	; 83
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	8b 7f       	andi	r24, 0xFB	; 251
     ee0:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     ee2:	a3 e5       	ldi	r26, 0x53	; 83
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e3 e5       	ldi	r30, 0x53	; 83
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	82 60       	ori	r24, 0x02	; 2
     eee:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     ef0:	a3 e5       	ldi	r26, 0x53	; 83
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	e3 e5       	ldi	r30, 0x53	; 83
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
     efe:	59 c0       	rjmp	.+178    	; 0xfb2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_INTERNAL_CLK_PRE_256:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     f00:	a3 e5       	ldi	r26, 0x53	; 83
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e3 e5       	ldi	r30, 0x53	; 83
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	84 60       	ori	r24, 0x04	; 4
     f0c:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     f0e:	a3 e5       	ldi	r26, 0x53	; 83
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e3 e5       	ldi	r30, 0x53	; 83
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8d 7f       	andi	r24, 0xFD	; 253
     f1a:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     f1c:	a3 e5       	ldi	r26, 0x53	; 83
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	e3 e5       	ldi	r30, 0x53	; 83
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8e 7f       	andi	r24, 0xFE	; 254
     f28:	8c 93       	st	X, r24
     f2a:	43 c0       	rjmp	.+134    	; 0xfb2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		case u8_INTERNAL_CLK_PRE_1024:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     f2c:	a3 e5       	ldi	r26, 0x53	; 83
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e3 e5       	ldi	r30, 0x53	; 83
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	84 60       	ori	r24, 0x04	; 4
     f38:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     f3a:	a3 e5       	ldi	r26, 0x53	; 83
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e3 e5       	ldi	r30, 0x53	; 83
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8d 7f       	andi	r24, 0xFD	; 253
     f46:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     f48:	a3 e5       	ldi	r26, 0x53	; 83
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e3 e5       	ldi	r30, 0x53	; 83
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	81 60       	ori	r24, 0x01	; 1
     f54:	8c 93       	st	X, r24
     f56:	2d c0       	rjmp	.+90     	; 0xfb2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_FALLING : 
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     f58:	a3 e5       	ldi	r26, 0x53	; 83
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e3 e5       	ldi	r30, 0x53	; 83
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	80 81       	ld	r24, Z
     f62:	84 60       	ori	r24, 0x04	; 4
     f64:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     f66:	a3 e5       	ldi	r26, 0x53	; 83
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e3 e5       	ldi	r30, 0x53	; 83
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	82 60       	ori	r24, 0x02	; 2
     f72:	8c 93       	st	X, r24
			CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     f74:	a3 e5       	ldi	r26, 0x53	; 83
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e3 e5       	ldi	r30, 0x53	; 83
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	8e 7f       	andi	r24, 0xFE	; 254
     f80:	8c 93       	st	X, r24
     f82:	17 c0       	rjmp	.+46     	; 0xfb2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ;
		case u8_EXTERNAL_CLK_RISING:
			SET_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     f84:	a3 e5       	ldi	r26, 0x53	; 83
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e3 e5       	ldi	r30, 0x53	; 83
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	84 60       	ori	r24, 0x04	; 4
     f90:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     f92:	a3 e5       	ldi	r26, 0x53	; 83
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e3 e5       	ldi	r30, 0x53	; 83
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	82 60       	ori	r24, 0x02	; 2
     f9e:	8c 93       	st	X, r24
			SET_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     fa0:	a3 e5       	ldi	r26, 0x53	; 83
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	e3 e5       	ldi	r30, 0x53	; 83
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	81 60       	ori	r24, 0x01	; 1
     fac:	8c 93       	st	X, r24
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <TIMER0_u8StartWithclockAndPrescalerSelect+0x1b0>
			break ; 
		
		default : u8_ErrorFlag = u8_NOK ; 
     fb0:	19 82       	std	Y+1, r1	; 0x01
		break ;
	}
	return u8_ErrorFlag ; 
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	0f 90       	pop	r0
     fba:	0f 90       	pop	r0
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <TIMER0_voidstop>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void TIMER0_voidstop(void)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(Ru8_TCCR0,u8_CS02_BIT) ;
     fca:	a3 e5       	ldi	r26, 0x53	; 83
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e3 e5       	ldi	r30, 0x53	; 83
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	8b 7f       	andi	r24, 0xFB	; 251
     fd6:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS01_BIT) ;
     fd8:	a3 e5       	ldi	r26, 0x53	; 83
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e3 e5       	ldi	r30, 0x53	; 83
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	8d 7f       	andi	r24, 0xFD	; 253
     fe4:	8c 93       	st	X, r24
	CLR_BIT(Ru8_TCCR0,u8_CS00_BIT) ;
     fe6:	a3 e5       	ldi	r26, 0x53	; 83
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e3 e5       	ldi	r30, 0x53	; 83
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	8e 7f       	andi	r24, 0xFE	; 254
     ff2:	8c 93       	st	X, r24
}
     ff4:	cf 91       	pop	r28
     ff6:	df 91       	pop	r29
     ff8:	08 95       	ret

00000ffa <TIMERS_u8ClearIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8ClearIntFlag(uint8_t u8_wantedIntClearFlag)
{
     ffa:	df 93       	push	r29
     ffc:	cf 93       	push	r28
     ffe:	00 d0       	rcall	.+0      	; 0x1000 <TIMERS_u8ClearIntFlag+0x6>
    1000:	00 d0       	rcall	.+0      	; 0x1002 <TIMERS_u8ClearIntFlag+0x8>
    1002:	cd b7       	in	r28, 0x3d	; 61
    1004:	de b7       	in	r29, 0x3e	; 62
    1006:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t u8_ErrorFlag = u8_OK ; 
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	3c 83       	std	Y+4, r19	; 0x04
    1014:	2b 83       	std	Y+3, r18	; 0x03
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	9c 81       	ldd	r25, Y+4	; 0x04
    101a:	81 31       	cpi	r24, 0x11	; 17
    101c:	91 05       	cpc	r25, r1
    101e:	31 f0       	breq	.+12     	; 0x102c <TIMERS_u8ClearIntFlag+0x32>
    1020:	2b 81       	ldd	r18, Y+3	; 0x03
    1022:	3c 81       	ldd	r19, Y+4	; 0x04
    1024:	22 31       	cpi	r18, 0x12	; 18
    1026:	31 05       	cpc	r19, r1
    1028:	49 f0       	breq	.+18     	; 0x103c <TIMERS_u8ClearIntFlag+0x42>
    102a:	10 c0       	rjmp	.+32     	; 0x104c <TIMERS_u8ClearIntFlag+0x52>
	{
		case u8_TIMER0_OVER_FLOW			: SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
    102c:	a8 e5       	ldi	r26, 0x58	; 88
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e8 e5       	ldi	r30, 0x58	; 88
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	8c 93       	st	X, r24
    103a:	09 c0       	rjmp	.+18     	; 0x104e <TIMERS_u8ClearIntFlag+0x54>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
    103c:	a8 e5       	ldi	r26, 0x58	; 88
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e8 e5       	ldi	r30, 0x58	; 88
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	82 60       	ori	r24, 0x02	; 2
    1048:	8c 93       	st	X, r24
    104a:	01 c0       	rjmp	.+2      	; 0x104e <TIMERS_u8ClearIntFlag+0x54>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
    104c:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
    104e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	cf 91       	pop	r28
    105a:	df 91       	pop	r29
    105c:	08 95       	ret

0000105e <TIMERS_u8GetIntFlag>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8GetIntFlag(uint8_t u8_wantedIntClearFlag,uint8_t* pu8_retturnIntFlag)
{
    105e:	df 93       	push	r29
    1060:	cf 93       	push	r28
    1062:	00 d0       	rcall	.+0      	; 0x1064 <TIMERS_u8GetIntFlag+0x6>
    1064:	00 d0       	rcall	.+0      	; 0x1066 <TIMERS_u8GetIntFlag+0x8>
    1066:	00 d0       	rcall	.+0      	; 0x1068 <TIMERS_u8GetIntFlag+0xa>
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	8a 83       	std	Y+2, r24	; 0x02
    106e:	7c 83       	std	Y+4, r23	; 0x04
    1070:	6b 83       	std	Y+3, r22	; 0x03
		uint8_t u8_ErrorFlag = u8_OK ; 
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntClearFlag)
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3e 83       	std	Y+6, r19	; 0x06
    107e:	2d 83       	std	Y+5, r18	; 0x05
    1080:	8d 81       	ldd	r24, Y+5	; 0x05
    1082:	9e 81       	ldd	r25, Y+6	; 0x06
    1084:	81 31       	cpi	r24, 0x11	; 17
    1086:	91 05       	cpc	r25, r1
    1088:	31 f0       	breq	.+12     	; 0x1096 <TIMERS_u8GetIntFlag+0x38>
    108a:	2d 81       	ldd	r18, Y+5	; 0x05
    108c:	3e 81       	ldd	r19, Y+6	; 0x06
    108e:	22 31       	cpi	r18, 0x12	; 18
    1090:	31 05       	cpc	r19, r1
    1092:	49 f0       	breq	.+18     	; 0x10a6 <TIMERS_u8GetIntFlag+0x48>
    1094:	11 c0       	rjmp	.+34     	; 0x10b8 <TIMERS_u8GetIntFlag+0x5a>
	{
		case u8_TIMER0_OVER_FLOW			: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
    1096:	e8 e5       	ldi	r30, 0x58	; 88
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	81 70       	andi	r24, 0x01	; 1
    109e:	eb 81       	ldd	r30, Y+3	; 0x03
    10a0:	fc 81       	ldd	r31, Y+4	; 0x04
    10a2:	80 83       	st	Z, r24
    10a4:	0a c0       	rjmp	.+20     	; 0x10ba <TIMERS_u8GetIntFlag+0x5c>
											  break ;
		case u8_TIMER0_COMPARE_ON_MATCH		: (*pu8_retturnIntFlag) = GET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
    10a6:	e8 e5       	ldi	r30, 0x58	; 88
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	86 95       	lsr	r24
    10ae:	81 70       	andi	r24, 0x01	; 1
    10b0:	eb 81       	ldd	r30, Y+3	; 0x03
    10b2:	fc 81       	ldd	r31, Y+4	; 0x04
    10b4:	80 83       	st	Z, r24
    10b6:	01 c0       	rjmp	.+2      	; 0x10ba <TIMERS_u8GetIntFlag+0x5c>
											  break ;
		default								: u8_ErrorFlag = u8_NOK ;
    10b8:	19 82       	std	Y+1, r1	; 0x01
											  break ; 
	}
	return u8_ErrorFlag ; 
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    10bc:	26 96       	adiw	r28, 0x06	; 6
    10be:	0f b6       	in	r0, 0x3f	; 63
    10c0:	f8 94       	cli
    10c2:	de bf       	out	0x3e, r29	; 62
    10c4:	0f be       	out	0x3f, r0	; 63
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	cf 91       	pop	r28
    10ca:	df 91       	pop	r29
    10cc:	08 95       	ret

000010ce <TIMERS_u8IntModesEn>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesEn(uint8_t u8_wantedIntModeEn)
{
    10ce:	df 93       	push	r29
    10d0:	cf 93       	push	r28
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <TIMERS_u8IntModesEn+0x6>
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <TIMERS_u8IntModesEn+0x8>
    10d6:	cd b7       	in	r28, 0x3d	; 61
    10d8:	de b7       	in	r29, 0x3e	; 62
    10da:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeEn)
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	3c 83       	std	Y+4, r19	; 0x04
    10e8:	2b 83       	std	Y+3, r18	; 0x03
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	9c 81       	ldd	r25, Y+4	; 0x04
    10ee:	81 31       	cpi	r24, 0x11	; 17
    10f0:	91 05       	cpc	r25, r1
    10f2:	31 f0       	breq	.+12     	; 0x1100 <TIMERS_u8IntModesEn+0x32>
    10f4:	2b 81       	ldd	r18, Y+3	; 0x03
    10f6:	3c 81       	ldd	r19, Y+4	; 0x04
    10f8:	22 31       	cpi	r18, 0x12	; 18
    10fa:	31 05       	cpc	r19, r1
    10fc:	81 f0       	breq	.+32     	; 0x111e <TIMERS_u8IntModesEn+0x50>
    10fe:	1e c0       	rjmp	.+60     	; 0x113c <TIMERS_u8IntModesEn+0x6e>
	{
		case u8_TIMER0_OVER_FLOW			:  SET_BIT(Ru8_TIFR,u8_TOV0_BIT) ;
    1100:	a8 e5       	ldi	r26, 0x58	; 88
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e8 e5       	ldi	r30, 0x58	; 88
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	81 60       	ori	r24, 0x01	; 1
    110c:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
    110e:	a9 e5       	ldi	r26, 0x59	; 89
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e9 e5       	ldi	r30, 0x59	; 89
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	81 60       	ori	r24, 0x01	; 1
    111a:	8c 93       	st	X, r24
    111c:	10 c0       	rjmp	.+32     	; 0x113e <TIMERS_u8IntModesEn+0x70>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  SET_BIT(Ru8_TIFR,u8_OCF0_BIT) ;
    111e:	a8 e5       	ldi	r26, 0x58	; 88
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e8 e5       	ldi	r30, 0x58	; 88
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	82 60       	ori	r24, 0x02	; 2
    112a:	8c 93       	st	X, r24
											   SET_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
    112c:	a9 e5       	ldi	r26, 0x59	; 89
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e9 e5       	ldi	r30, 0x59	; 89
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	82 60       	ori	r24, 0x02	; 2
    1138:	8c 93       	st	X, r24
    113a:	01 c0       	rjmp	.+2      	; 0x113e <TIMERS_u8IntModesEn+0x70>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
    113c:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
    113e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <TIMERS_u8IntModesDis>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMERS_u8IntModesDis(uint8_t u8_wantedIntModeDis)
{
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	00 d0       	rcall	.+0      	; 0x1154 <TIMERS_u8IntModesDis+0x6>
    1154:	00 d0       	rcall	.+0      	; 0x1156 <TIMERS_u8IntModesDis+0x8>
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	89 83       	std	Y+1, r24	; 0x01
	switch(u8_wantedIntModeDis)
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3c 83       	std	Y+4, r19	; 0x04
    1168:	2b 83       	std	Y+3, r18	; 0x03
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	81 31       	cpi	r24, 0x11	; 17
    1170:	91 05       	cpc	r25, r1
    1172:	31 f0       	breq	.+12     	; 0x1180 <TIMERS_u8IntModesDis+0x32>
    1174:	2b 81       	ldd	r18, Y+3	; 0x03
    1176:	3c 81       	ldd	r19, Y+4	; 0x04
    1178:	22 31       	cpi	r18, 0x12	; 18
    117a:	31 05       	cpc	r19, r1
    117c:	49 f0       	breq	.+18     	; 0x1190 <TIMERS_u8IntModesDis+0x42>
    117e:	10 c0       	rjmp	.+32     	; 0x11a0 <TIMERS_u8IntModesDis+0x52>
	{
		case u8_TIMER0_OVER_FLOW			:  CLR_BIT(Ru8_TIMSK,u8_TOIE0_BIT);
    1180:	a9 e5       	ldi	r26, 0x59	; 89
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e9 e5       	ldi	r30, 0x59	; 89
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	8e 7f       	andi	r24, 0xFE	; 254
    118c:	8c 93       	st	X, r24
    118e:	09 c0       	rjmp	.+18     	; 0x11a2 <TIMERS_u8IntModesDis+0x54>
											   break ; 
		case u8_TIMER0_COMPARE_ON_MATCH		:  CLR_BIT(Ru8_TIMSK,u8_OCIE0_BIT);
    1190:	a9 e5       	ldi	r26, 0x59	; 89
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	e9 e5       	ldi	r30, 0x59	; 89
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	8d 7f       	andi	r24, 0xFD	; 253
    119c:	8c 93       	st	X, r24
    119e:	01 c0       	rjmp	.+2      	; 0x11a2 <TIMERS_u8IntModesDis+0x54>
											   break ;
		default 							:  u8_ErrorFlag = u8_NOK ; 
    11a0:	19 82       	std	Y+1, r1	; 0x01
											   break ; 
	}
	return u8_ErrorFlag ; 
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <Timer0_u8setOverFlowRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setOverFlowRegTicksBeforeOV(uint8_t u8_wantedTicksBeforeOV)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <Timer0_u8setOverFlowRegTicksBeforeOV+0x6>
    11b8:	0f 92       	push	r0
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
    11be:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_SetTimer0CounterReg ; 
	if(u8_wantedTicksBeforeOV<=u8_MAX_8BIT_REG_HOLD)
	{
		u8_SetTimer0CounterReg = u8_MAX_8BIT_REG_HOLD-u8_wantedTicksBeforeOV ; 
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	80 95       	com	r24
    11c8:	89 83       	std	Y+1, r24	; 0x01
		Ru8_TCNT0=u8_SetTimer0CounterReg ;
    11ca:	e2 e5       	ldi	r30, 0x52	; 82
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <Timer0_u8setCompareRegTicksBeforeOV>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t Timer0_u8setCompareRegTicksBeforeOV(uint8_t u8_wantedTicksToCompare)
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <Timer0_u8setCompareRegTicksBeforeOV+0x6>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_ErrorFlag = u8_OK ; 
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	89 83       	std	Y+1, r24	; 0x01
	if(u8_wantedTicksToCompare<=u8_MAX_8BIT_REG_HOLD)
	{
		Ru8_OCR0 = u8_wantedTicksToCompare ;
    11f0:	ec e5       	ldi	r30, 0x5C	; 92
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	80 83       	st	Z, r24
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
	}
	return u8_ErrorFlag ; 
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	cf 91       	pop	r28
    1200:	df 91       	pop	r29
    1202:	08 95       	ret

00001204 <TIMER0_u8setCallBack>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8setCallBack(uint8_t u8_wantedISRModeToSet,void(*ISRFuncToSet)(void)) 
{
    1204:	df 93       	push	r29
    1206:	cf 93       	push	r28
    1208:	00 d0       	rcall	.+0      	; 0x120a <TIMER0_u8setCallBack+0x6>
    120a:	00 d0       	rcall	.+0      	; 0x120c <TIMER0_u8setCallBack+0x8>
    120c:	00 d0       	rcall	.+0      	; 0x120e <TIMER0_u8setCallBack+0xa>
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	8a 83       	std	Y+2, r24	; 0x02
    1214:	7c 83       	std	Y+4, r23	; 0x04
    1216:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8_ErrorFlag = u8_OK ; 
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	89 83       	std	Y+1, r24	; 0x01
	if(ISRFuncToSet!=NULL_POINTER)
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	9c 81       	ldd	r25, Y+4	; 0x04
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	01 f1       	breq	.+64     	; 0x1264 <TIMER0_u8setCallBack+0x60>
	{
		switch(u8_wantedISRModeToSet)
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	3e 83       	std	Y+6, r19	; 0x06
    122c:	2d 83       	std	Y+5, r18	; 0x05
    122e:	8d 81       	ldd	r24, Y+5	; 0x05
    1230:	9e 81       	ldd	r25, Y+6	; 0x06
    1232:	81 31       	cpi	r24, 0x11	; 17
    1234:	91 05       	cpc	r25, r1
    1236:	31 f0       	breq	.+12     	; 0x1244 <TIMER0_u8setCallBack+0x40>
    1238:	2d 81       	ldd	r18, Y+5	; 0x05
    123a:	3e 81       	ldd	r19, Y+6	; 0x06
    123c:	22 31       	cpi	r18, 0x12	; 18
    123e:	31 05       	cpc	r19, r1
    1240:	41 f0       	breq	.+16     	; 0x1252 <TIMER0_u8setCallBack+0x4e>
    1242:	0e c0       	rjmp	.+28     	; 0x1260 <TIMER0_u8setCallBack+0x5c>
		{
			case u8_TIMER0_OVER_FLOW			:  Timer0OverFlowSetCallBackISR = ISRFuncToSet ; 
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	9c 81       	ldd	r25, Y+4	; 0x04
    1248:	90 93 75 00 	sts	0x0075, r25
    124c:	80 93 74 00 	sts	0x0074, r24
    1250:	0a c0       	rjmp	.+20     	; 0x1266 <TIMER0_u8setCallBack+0x62>
												   break ; 
			case u8_TIMER0_COMPARE_ON_MATCH		:  Timer0CompareMatchSetCallBackISR = ISRFuncToSet ; 
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	90 93 73 00 	sts	0x0073, r25
    125a:	80 93 72 00 	sts	0x0072, r24
    125e:	03 c0       	rjmp	.+6      	; 0x1266 <TIMER0_u8setCallBack+0x62>
											       break ;
			default 							:  u8_ErrorFlag = u8_NOK ; 
    1260:	19 82       	std	Y+1, r1	; 0x01
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <TIMER0_u8setCallBack+0x62>
											       break ; 
		}
	}
	else 
	{
		u8_ErrorFlag = u8_NOK ; 
    1264:	19 82       	std	Y+1, r1	; 0x01
	}
	return u8_ErrorFlag ; 
    1266:	89 81       	ldd	r24, Y+1	; 0x01
}
    1268:	26 96       	adiw	r28, 0x06	; 6
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <__vector_10>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_10 (void)      __attribute__((signal));
void __vector_10 (void)
{
    127a:	1f 92       	push	r1
    127c:	0f 92       	push	r0
    127e:	0f b6       	in	r0, 0x3f	; 63
    1280:	0f 92       	push	r0
    1282:	11 24       	eor	r1, r1
    1284:	2f 93       	push	r18
    1286:	3f 93       	push	r19
    1288:	4f 93       	push	r20
    128a:	5f 93       	push	r21
    128c:	6f 93       	push	r22
    128e:	7f 93       	push	r23
    1290:	8f 93       	push	r24
    1292:	9f 93       	push	r25
    1294:	af 93       	push	r26
    1296:	bf 93       	push	r27
    1298:	ef 93       	push	r30
    129a:	ff 93       	push	r31
    129c:	df 93       	push	r29
    129e:	cf 93       	push	r28
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
	if(Timer0CompareMatchSetCallBackISR!=NULL_POINTER)
    12a4:	80 91 72 00 	lds	r24, 0x0072
    12a8:	90 91 73 00 	lds	r25, 0x0073
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	29 f0       	breq	.+10     	; 0x12ba <__vector_10+0x40>
	{
		Timer0CompareMatchSetCallBackISR();
    12b0:	e0 91 72 00 	lds	r30, 0x0072
    12b4:	f0 91 73 00 	lds	r31, 0x0073
    12b8:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	ff 91       	pop	r31
    12c0:	ef 91       	pop	r30
    12c2:	bf 91       	pop	r27
    12c4:	af 91       	pop	r26
    12c6:	9f 91       	pop	r25
    12c8:	8f 91       	pop	r24
    12ca:	7f 91       	pop	r23
    12cc:	6f 91       	pop	r22
    12ce:	5f 91       	pop	r21
    12d0:	4f 91       	pop	r20
    12d2:	3f 91       	pop	r19
    12d4:	2f 91       	pop	r18
    12d6:	0f 90       	pop	r0
    12d8:	0f be       	out	0x3f, r0	; 63
    12da:	0f 90       	pop	r0
    12dc:	1f 90       	pop	r1
    12de:	18 95       	reti

000012e0 <__vector_11>:
///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void __vector_11 (void)      __attribute__((signal));
void __vector_11 (void)
{
    12e0:	1f 92       	push	r1
    12e2:	0f 92       	push	r0
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	0f 92       	push	r0
    12e8:	11 24       	eor	r1, r1
    12ea:	2f 93       	push	r18
    12ec:	3f 93       	push	r19
    12ee:	4f 93       	push	r20
    12f0:	5f 93       	push	r21
    12f2:	6f 93       	push	r22
    12f4:	7f 93       	push	r23
    12f6:	8f 93       	push	r24
    12f8:	9f 93       	push	r25
    12fa:	af 93       	push	r26
    12fc:	bf 93       	push	r27
    12fe:	ef 93       	push	r30
    1300:	ff 93       	push	r31
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
	if(Timer0OverFlowSetCallBackISR!=NULL_POINTER)
    130a:	80 91 74 00 	lds	r24, 0x0074
    130e:	90 91 75 00 	lds	r25, 0x0075
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	29 f0       	breq	.+10     	; 0x1320 <__vector_11+0x40>
	{
		Timer0OverFlowSetCallBackISR() ;
    1316:	e0 91 74 00 	lds	r30, 0x0074
    131a:	f0 91 75 00 	lds	r31, 0x0075
    131e:	09 95       	icall
	}
	else 
	{
		//do nothing
	}
}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	ff 91       	pop	r31
    1326:	ef 91       	pop	r30
    1328:	bf 91       	pop	r27
    132a:	af 91       	pop	r26
    132c:	9f 91       	pop	r25
    132e:	8f 91       	pop	r24
    1330:	7f 91       	pop	r23
    1332:	6f 91       	pop	r22
    1334:	5f 91       	pop	r21
    1336:	4f 91       	pop	r20
    1338:	3f 91       	pop	r19
    133a:	2f 91       	pop	r18
    133c:	0f 90       	pop	r0
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	0f 90       	pop	r0
    1342:	1f 90       	pop	r1
    1344:	18 95       	reti

00001346 <TIMER0_u8BusyWaitMS>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER0_u8BusyWaitMS(uint32_t u32_BusyTimeInMilliSec)
{
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	c9 54       	subi	r28, 0x49	; 73
    1354:	d0 40       	sbci	r29, 0x00	; 0
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	6b 87       	std	Y+11, r22	; 0x0b
    1362:	7c 87       	std	Y+12, r23	; 0x0c
    1364:	8d 87       	std	Y+13, r24	; 0x0d
    1366:	9e 87       	std	Y+14, r25	; 0x0e
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
    1368:	83 e1       	ldi	r24, 0x13	; 19
    136a:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used== u8_TIMER0_FLAG_NOT_USED)
    136c:	80 91 6e 00 	lds	r24, 0x006E
    1370:	83 31       	cpi	r24, 0x13	; 19
    1372:	09 f0       	breq	.+2      	; 0x1376 <TIMER0_u8BusyWaitMS+0x30>
    1374:	c4 c1       	rjmp	.+904    	; 0x16fe <TIMER0_u8BusyWaitMS+0x3b8>
	{
		volatile uint64_t u64_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
    1376:	1a 82       	std	Y+2, r1	; 0x02
    1378:	1b 82       	std	Y+3, r1	; 0x03
    137a:	1c 82       	std	Y+4, r1	; 0x04
    137c:	1d 82       	std	Y+5, r1	; 0x05
    137e:	1e 82       	std	Y+6, r1	; 0x06
    1380:	1f 82       	std	Y+7, r1	; 0x07
    1382:	18 86       	std	Y+8, r1	; 0x08
    1384:	19 86       	std	Y+9, r1	; 0x09
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
    1386:	81 e1       	ldi	r24, 0x11	; 17
    1388:	0e 94 a7 08 	call	0x114e	; 0x114e <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
    138c:	82 e1       	ldi	r24, 0x12	; 18
    138e:	0e 94 a7 08 	call	0x114e	; 0x114e <TIMERS_u8IntModesDis>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    1392:	87 e0       	ldi	r24, 0x07	; 7
    1394:	0e 94 01 07 	call	0xe02	; 0xe02 <TIMER0_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
    1398:	82 e1       	ldi	r24, 0x12	; 18
    139a:	0e 94 fd 07 	call	0xffa	; 0xffa <TIMERS_u8ClearIntFlag>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    139e:	8a ef       	ldi	r24, 0xFA	; 250
    13a0:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <Timer0_u8setOverFlowRegTicksBeforeOV>
    13aa:	3a c1       	rjmp	.+628    	; 0x1620 <TIMER0_u8BusyWaitMS+0x2da>
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
		{
			TIMERS_u8GetIntFlag(u8_TIMER0_COMPARE_ON_MATCH,(&u8_CheckCompareFlag)) ;
    13ac:	9e 01       	movw	r18, r28
    13ae:	26 5f       	subi	r18, 0xF6	; 246
    13b0:	3f 4f       	sbci	r19, 0xFF	; 255
    13b2:	82 e1       	ldi	r24, 0x12	; 18
    13b4:	b9 01       	movw	r22, r18
    13b6:	0e 94 2f 08 	call	0x105e	; 0x105e <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
    13ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	09 f0       	breq	.+2      	; 0x13c2 <TIMER0_u8BusyWaitMS+0x7c>
    13c0:	2f c1       	rjmp	.+606    	; 0x1620 <TIMER0_u8BusyWaitMS+0x2da>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
    13c2:	82 e1       	ldi	r24, 0x12	; 18
    13c4:	0e 94 fd 07 	call	0xffa	; 0xffa <TIMERS_u8ClearIntFlag>
				u64_BusyWaitcounter++ ;
    13c8:	0a 81       	ldd	r16, Y+2	; 0x02
    13ca:	0f 8f       	std	Y+31, r16	; 0x1f
    13cc:	1b 81       	ldd	r17, Y+3	; 0x03
    13ce:	18 a3       	std	Y+32, r17	; 0x20
    13d0:	2c 81       	ldd	r18, Y+4	; 0x04
    13d2:	29 a3       	std	Y+33, r18	; 0x21
    13d4:	3d 81       	ldd	r19, Y+5	; 0x05
    13d6:	3a a3       	std	Y+34, r19	; 0x22
    13d8:	4e 81       	ldd	r20, Y+6	; 0x06
    13da:	4b a3       	std	Y+35, r20	; 0x23
    13dc:	5f 81       	ldd	r21, Y+7	; 0x07
    13de:	5c a3       	std	Y+36, r21	; 0x24
    13e0:	68 85       	ldd	r22, Y+8	; 0x08
    13e2:	6d a3       	std	Y+37, r22	; 0x25
    13e4:	79 85       	ldd	r23, Y+9	; 0x09
    13e6:	7e a3       	std	Y+38, r23	; 0x26
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	8f a3       	std	Y+39, r24	; 0x27
    13ec:	18 a6       	std	Y+40, r1	; 0x28
    13ee:	19 a6       	std	Y+41, r1	; 0x29
    13f0:	1a a6       	std	Y+42, r1	; 0x2a
    13f2:	1b a6       	std	Y+43, r1	; 0x2b
    13f4:	1c a6       	std	Y+44, r1	; 0x2c
    13f6:	1d a6       	std	Y+45, r1	; 0x2d
    13f8:	1e a6       	std	Y+46, r1	; 0x2e
    13fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    13fc:	0f a1       	ldd	r16, Y+39	; 0x27
    13fe:	90 0f       	add	r25, r16
    1400:	9f a7       	std	Y+47, r25	; 0x2f
    1402:	11 e0       	ldi	r17, 0x01	; 1
    1404:	1f ab       	std	Y+55, r17	; 0x37
    1406:	2f a5       	ldd	r18, Y+47	; 0x2f
    1408:	3f 8d       	ldd	r19, Y+31	; 0x1f
    140a:	23 17       	cp	r18, r19
    140c:	08 f0       	brcs	.+2      	; 0x1410 <TIMER0_u8BusyWaitMS+0xca>
    140e:	1f aa       	std	Y+55, r1	; 0x37
    1410:	48 a1       	ldd	r20, Y+32	; 0x20
    1412:	58 a5       	ldd	r21, Y+40	; 0x28
    1414:	45 0f       	add	r20, r21
    1416:	48 ab       	std	Y+48, r20	; 0x30
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	68 af       	std	Y+56, r22	; 0x38
    141c:	78 a9       	ldd	r23, Y+48	; 0x30
    141e:	88 a1       	ldd	r24, Y+32	; 0x20
    1420:	78 17       	cp	r23, r24
    1422:	08 f0       	brcs	.+2      	; 0x1426 <TIMER0_u8BusyWaitMS+0xe0>
    1424:	18 ae       	std	Y+56, r1	; 0x38
    1426:	9f a9       	ldd	r25, Y+55	; 0x37
    1428:	08 a9       	ldd	r16, Y+48	; 0x30
    142a:	90 0f       	add	r25, r16
    142c:	99 af       	std	Y+57, r25	; 0x39
    142e:	11 e0       	ldi	r17, 0x01	; 1
    1430:	1a af       	std	Y+58, r17	; 0x3a
    1432:	29 ad       	ldd	r18, Y+57	; 0x39
    1434:	38 a9       	ldd	r19, Y+48	; 0x30
    1436:	23 17       	cp	r18, r19
    1438:	08 f0       	brcs	.+2      	; 0x143c <TIMER0_u8BusyWaitMS+0xf6>
    143a:	1a ae       	std	Y+58, r1	; 0x3a
    143c:	48 ad       	ldd	r20, Y+56	; 0x38
    143e:	5a ad       	ldd	r21, Y+58	; 0x3a
    1440:	45 2b       	or	r20, r21
    1442:	48 af       	std	Y+56, r20	; 0x38
    1444:	69 ad       	ldd	r22, Y+57	; 0x39
    1446:	68 ab       	std	Y+48, r22	; 0x30
    1448:	79 a1       	ldd	r23, Y+33	; 0x21
    144a:	89 a5       	ldd	r24, Y+41	; 0x29
    144c:	78 0f       	add	r23, r24
    144e:	79 ab       	std	Y+49, r23	; 0x31
    1450:	91 e0       	ldi	r25, 0x01	; 1
    1452:	9b af       	std	Y+59, r25	; 0x3b
    1454:	09 a9       	ldd	r16, Y+49	; 0x31
    1456:	19 a1       	ldd	r17, Y+33	; 0x21
    1458:	01 17       	cp	r16, r17
    145a:	08 f0       	brcs	.+2      	; 0x145e <TIMER0_u8BusyWaitMS+0x118>
    145c:	1b ae       	std	Y+59, r1	; 0x3b
    145e:	28 ad       	ldd	r18, Y+56	; 0x38
    1460:	39 a9       	ldd	r19, Y+49	; 0x31
    1462:	23 0f       	add	r18, r19
    1464:	2c af       	std	Y+60, r18	; 0x3c
    1466:	41 e0       	ldi	r20, 0x01	; 1
    1468:	4d af       	std	Y+61, r20	; 0x3d
    146a:	5c ad       	ldd	r21, Y+60	; 0x3c
    146c:	69 a9       	ldd	r22, Y+49	; 0x31
    146e:	56 17       	cp	r21, r22
    1470:	08 f0       	brcs	.+2      	; 0x1474 <TIMER0_u8BusyWaitMS+0x12e>
    1472:	1d ae       	std	Y+61, r1	; 0x3d
    1474:	7b ad       	ldd	r23, Y+59	; 0x3b
    1476:	8d ad       	ldd	r24, Y+61	; 0x3d
    1478:	78 2b       	or	r23, r24
    147a:	7b af       	std	Y+59, r23	; 0x3b
    147c:	9c ad       	ldd	r25, Y+60	; 0x3c
    147e:	99 ab       	std	Y+49, r25	; 0x31
    1480:	0a a1       	ldd	r16, Y+34	; 0x22
    1482:	1a a5       	ldd	r17, Y+42	; 0x2a
    1484:	01 0f       	add	r16, r17
    1486:	0a ab       	std	Y+50, r16	; 0x32
    1488:	21 e0       	ldi	r18, 0x01	; 1
    148a:	2e af       	std	Y+62, r18	; 0x3e
    148c:	3a a9       	ldd	r19, Y+50	; 0x32
    148e:	4a a1       	ldd	r20, Y+34	; 0x22
    1490:	34 17       	cp	r19, r20
    1492:	08 f0       	brcs	.+2      	; 0x1496 <TIMER0_u8BusyWaitMS+0x150>
    1494:	1e ae       	std	Y+62, r1	; 0x3e
    1496:	5b ad       	ldd	r21, Y+59	; 0x3b
    1498:	6a a9       	ldd	r22, Y+50	; 0x32
    149a:	56 0f       	add	r21, r22
    149c:	5f af       	std	Y+63, r21	; 0x3f
    149e:	71 e0       	ldi	r23, 0x01	; 1
    14a0:	21 96       	adiw	r28, 0x01	; 1
    14a2:	7f af       	std	Y+63, r23	; 0x3f
    14a4:	21 97       	sbiw	r28, 0x01	; 1
    14a6:	8f ad       	ldd	r24, Y+63	; 0x3f
    14a8:	9a a9       	ldd	r25, Y+50	; 0x32
    14aa:	89 17       	cp	r24, r25
    14ac:	18 f0       	brcs	.+6      	; 0x14b4 <TIMER0_u8BusyWaitMS+0x16e>
    14ae:	21 96       	adiw	r28, 0x01	; 1
    14b0:	1f ae       	std	Y+63, r1	; 0x3f
    14b2:	21 97       	sbiw	r28, 0x01	; 1
    14b4:	0e ad       	ldd	r16, Y+62	; 0x3e
    14b6:	21 96       	adiw	r28, 0x01	; 1
    14b8:	1f ad       	ldd	r17, Y+63	; 0x3f
    14ba:	21 97       	sbiw	r28, 0x01	; 1
    14bc:	01 2b       	or	r16, r17
    14be:	0e af       	std	Y+62, r16	; 0x3e
    14c0:	2f ad       	ldd	r18, Y+63	; 0x3f
    14c2:	2a ab       	std	Y+50, r18	; 0x32
    14c4:	3b a1       	ldd	r19, Y+35	; 0x23
    14c6:	4b a5       	ldd	r20, Y+43	; 0x2b
    14c8:	34 0f       	add	r19, r20
    14ca:	3b ab       	std	Y+51, r19	; 0x33
    14cc:	51 e0       	ldi	r21, 0x01	; 1
    14ce:	22 96       	adiw	r28, 0x02	; 2
    14d0:	5f af       	std	Y+63, r21	; 0x3f
    14d2:	22 97       	sbiw	r28, 0x02	; 2
    14d4:	6b a9       	ldd	r22, Y+51	; 0x33
    14d6:	7b a1       	ldd	r23, Y+35	; 0x23
    14d8:	67 17       	cp	r22, r23
    14da:	18 f0       	brcs	.+6      	; 0x14e2 <TIMER0_u8BusyWaitMS+0x19c>
    14dc:	22 96       	adiw	r28, 0x02	; 2
    14de:	1f ae       	std	Y+63, r1	; 0x3f
    14e0:	22 97       	sbiw	r28, 0x02	; 2
    14e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    14e4:	9b a9       	ldd	r25, Y+51	; 0x33
    14e6:	89 0f       	add	r24, r25
    14e8:	23 96       	adiw	r28, 0x03	; 3
    14ea:	8f af       	std	Y+63, r24	; 0x3f
    14ec:	23 97       	sbiw	r28, 0x03	; 3
    14ee:	01 e0       	ldi	r16, 0x01	; 1
    14f0:	24 96       	adiw	r28, 0x04	; 4
    14f2:	0f af       	std	Y+63, r16	; 0x3f
    14f4:	24 97       	sbiw	r28, 0x04	; 4
    14f6:	23 96       	adiw	r28, 0x03	; 3
    14f8:	1f ad       	ldd	r17, Y+63	; 0x3f
    14fa:	23 97       	sbiw	r28, 0x03	; 3
    14fc:	2b a9       	ldd	r18, Y+51	; 0x33
    14fe:	12 17       	cp	r17, r18
    1500:	18 f0       	brcs	.+6      	; 0x1508 <TIMER0_u8BusyWaitMS+0x1c2>
    1502:	24 96       	adiw	r28, 0x04	; 4
    1504:	1f ae       	std	Y+63, r1	; 0x3f
    1506:	24 97       	sbiw	r28, 0x04	; 4
    1508:	22 96       	adiw	r28, 0x02	; 2
    150a:	3f ad       	ldd	r19, Y+63	; 0x3f
    150c:	22 97       	sbiw	r28, 0x02	; 2
    150e:	24 96       	adiw	r28, 0x04	; 4
    1510:	4f ad       	ldd	r20, Y+63	; 0x3f
    1512:	24 97       	sbiw	r28, 0x04	; 4
    1514:	34 2b       	or	r19, r20
    1516:	22 96       	adiw	r28, 0x02	; 2
    1518:	3f af       	std	Y+63, r19	; 0x3f
    151a:	22 97       	sbiw	r28, 0x02	; 2
    151c:	23 96       	adiw	r28, 0x03	; 3
    151e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1520:	23 97       	sbiw	r28, 0x03	; 3
    1522:	5b ab       	std	Y+51, r21	; 0x33
    1524:	6c a1       	ldd	r22, Y+36	; 0x24
    1526:	7c a5       	ldd	r23, Y+44	; 0x2c
    1528:	67 0f       	add	r22, r23
    152a:	6c ab       	std	Y+52, r22	; 0x34
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	25 96       	adiw	r28, 0x05	; 5
    1530:	8f af       	std	Y+63, r24	; 0x3f
    1532:	25 97       	sbiw	r28, 0x05	; 5
    1534:	9c a9       	ldd	r25, Y+52	; 0x34
    1536:	0c a1       	ldd	r16, Y+36	; 0x24
    1538:	90 17       	cp	r25, r16
    153a:	18 f0       	brcs	.+6      	; 0x1542 <TIMER0_u8BusyWaitMS+0x1fc>
    153c:	25 96       	adiw	r28, 0x05	; 5
    153e:	1f ae       	std	Y+63, r1	; 0x3f
    1540:	25 97       	sbiw	r28, 0x05	; 5
    1542:	22 96       	adiw	r28, 0x02	; 2
    1544:	1f ad       	ldd	r17, Y+63	; 0x3f
    1546:	22 97       	sbiw	r28, 0x02	; 2
    1548:	2c a9       	ldd	r18, Y+52	; 0x34
    154a:	12 0f       	add	r17, r18
    154c:	26 96       	adiw	r28, 0x06	; 6
    154e:	1f af       	std	Y+63, r17	; 0x3f
    1550:	26 97       	sbiw	r28, 0x06	; 6
    1552:	31 e0       	ldi	r19, 0x01	; 1
    1554:	27 96       	adiw	r28, 0x07	; 7
    1556:	3f af       	std	Y+63, r19	; 0x3f
    1558:	27 97       	sbiw	r28, 0x07	; 7
    155a:	26 96       	adiw	r28, 0x06	; 6
    155c:	4f ad       	ldd	r20, Y+63	; 0x3f
    155e:	26 97       	sbiw	r28, 0x06	; 6
    1560:	5c a9       	ldd	r21, Y+52	; 0x34
    1562:	45 17       	cp	r20, r21
    1564:	18 f0       	brcs	.+6      	; 0x156c <TIMER0_u8BusyWaitMS+0x226>
    1566:	27 96       	adiw	r28, 0x07	; 7
    1568:	1f ae       	std	Y+63, r1	; 0x3f
    156a:	27 97       	sbiw	r28, 0x07	; 7
    156c:	25 96       	adiw	r28, 0x05	; 5
    156e:	6f ad       	ldd	r22, Y+63	; 0x3f
    1570:	25 97       	sbiw	r28, 0x05	; 5
    1572:	27 96       	adiw	r28, 0x07	; 7
    1574:	7f ad       	ldd	r23, Y+63	; 0x3f
    1576:	27 97       	sbiw	r28, 0x07	; 7
    1578:	67 2b       	or	r22, r23
    157a:	25 96       	adiw	r28, 0x05	; 5
    157c:	6f af       	std	Y+63, r22	; 0x3f
    157e:	25 97       	sbiw	r28, 0x05	; 5
    1580:	26 96       	adiw	r28, 0x06	; 6
    1582:	8f ad       	ldd	r24, Y+63	; 0x3f
    1584:	26 97       	sbiw	r28, 0x06	; 6
    1586:	8c ab       	std	Y+52, r24	; 0x34
    1588:	9d a1       	ldd	r25, Y+37	; 0x25
    158a:	0d a5       	ldd	r16, Y+45	; 0x2d
    158c:	90 0f       	add	r25, r16
    158e:	9d ab       	std	Y+53, r25	; 0x35
    1590:	11 e0       	ldi	r17, 0x01	; 1
    1592:	28 96       	adiw	r28, 0x08	; 8
    1594:	1f af       	std	Y+63, r17	; 0x3f
    1596:	28 97       	sbiw	r28, 0x08	; 8
    1598:	2d a9       	ldd	r18, Y+53	; 0x35
    159a:	3d a1       	ldd	r19, Y+37	; 0x25
    159c:	23 17       	cp	r18, r19
    159e:	18 f0       	brcs	.+6      	; 0x15a6 <TIMER0_u8BusyWaitMS+0x260>
    15a0:	28 96       	adiw	r28, 0x08	; 8
    15a2:	1f ae       	std	Y+63, r1	; 0x3f
    15a4:	28 97       	sbiw	r28, 0x08	; 8
    15a6:	25 96       	adiw	r28, 0x05	; 5
    15a8:	4f ad       	ldd	r20, Y+63	; 0x3f
    15aa:	25 97       	sbiw	r28, 0x05	; 5
    15ac:	5d a9       	ldd	r21, Y+53	; 0x35
    15ae:	45 0f       	add	r20, r21
    15b0:	29 96       	adiw	r28, 0x09	; 9
    15b2:	4f af       	std	Y+63, r20	; 0x3f
    15b4:	29 97       	sbiw	r28, 0x09	; 9
    15b6:	61 e0       	ldi	r22, 0x01	; 1
    15b8:	2a 96       	adiw	r28, 0x0a	; 10
    15ba:	6f af       	std	Y+63, r22	; 0x3f
    15bc:	2a 97       	sbiw	r28, 0x0a	; 10
    15be:	29 96       	adiw	r28, 0x09	; 9
    15c0:	7f ad       	ldd	r23, Y+63	; 0x3f
    15c2:	29 97       	sbiw	r28, 0x09	; 9
    15c4:	8d a9       	ldd	r24, Y+53	; 0x35
    15c6:	78 17       	cp	r23, r24
    15c8:	18 f0       	brcs	.+6      	; 0x15d0 <TIMER0_u8BusyWaitMS+0x28a>
    15ca:	2a 96       	adiw	r28, 0x0a	; 10
    15cc:	1f ae       	std	Y+63, r1	; 0x3f
    15ce:	2a 97       	sbiw	r28, 0x0a	; 10
    15d0:	28 96       	adiw	r28, 0x08	; 8
    15d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    15d4:	28 97       	sbiw	r28, 0x08	; 8
    15d6:	2a 96       	adiw	r28, 0x0a	; 10
    15d8:	0f ad       	ldd	r16, Y+63	; 0x3f
    15da:	2a 97       	sbiw	r28, 0x0a	; 10
    15dc:	90 2b       	or	r25, r16
    15de:	28 96       	adiw	r28, 0x08	; 8
    15e0:	9f af       	std	Y+63, r25	; 0x3f
    15e2:	28 97       	sbiw	r28, 0x08	; 8
    15e4:	29 96       	adiw	r28, 0x09	; 9
    15e6:	1f ad       	ldd	r17, Y+63	; 0x3f
    15e8:	29 97       	sbiw	r28, 0x09	; 9
    15ea:	1d ab       	std	Y+53, r17	; 0x35
    15ec:	2e a1       	ldd	r18, Y+38	; 0x26
    15ee:	3e a5       	ldd	r19, Y+46	; 0x2e
    15f0:	23 0f       	add	r18, r19
    15f2:	2e ab       	std	Y+54, r18	; 0x36
    15f4:	28 96       	adiw	r28, 0x08	; 8
    15f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    15f8:	28 97       	sbiw	r28, 0x08	; 8
    15fa:	4e a9       	ldd	r20, Y+54	; 0x36
    15fc:	84 0f       	add	r24, r20
    15fe:	8e ab       	std	Y+54, r24	; 0x36
    1600:	2f a5       	ldd	r18, Y+47	; 0x2f
    1602:	38 a9       	ldd	r19, Y+48	; 0x30
    1604:	49 a9       	ldd	r20, Y+49	; 0x31
    1606:	5a a9       	ldd	r21, Y+50	; 0x32
    1608:	6b a9       	ldd	r22, Y+51	; 0x33
    160a:	7c a9       	ldd	r23, Y+52	; 0x34
    160c:	8d a9       	ldd	r24, Y+53	; 0x35
    160e:	9e a9       	ldd	r25, Y+54	; 0x36
    1610:	2a 83       	std	Y+2, r18	; 0x02
    1612:	3b 83       	std	Y+3, r19	; 0x03
    1614:	4c 83       	std	Y+4, r20	; 0x04
    1616:	5d 83       	std	Y+5, r21	; 0x05
    1618:	6e 83       	std	Y+6, r22	; 0x06
    161a:	7f 83       	std	Y+7, r23	; 0x07
    161c:	88 87       	std	Y+8, r24	; 0x08
    161e:	99 87       	std	Y+9, r25	; 0x09
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
		while(u64_BusyWaitcounter <=(uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre))
    1620:	8b 85       	ldd	r24, Y+11	; 0x0b
    1622:	9c 85       	ldd	r25, Y+12	; 0x0c
    1624:	ad 85       	ldd	r26, Y+13	; 0x0d
    1626:	be 85       	ldd	r27, Y+14	; 0x0e
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	aa 1f       	adc	r26, r26
    162e:	bb 1f       	adc	r27, r27
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	aa 1f       	adc	r26, r26
    1636:	bb 1f       	adc	r27, r27
    1638:	8c 01       	movw	r16, r24
    163a:	9d 01       	movw	r18, r26
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	0f 8b       	std	Y+23, r16	; 0x17
    1646:	18 8f       	std	Y+24, r17	; 0x18
    1648:	29 8f       	std	Y+25, r18	; 0x19
    164a:	3a 8f       	std	Y+26, r19	; 0x1a
    164c:	4b 8f       	std	Y+27, r20	; 0x1b
    164e:	5c 8f       	std	Y+28, r21	; 0x1c
    1650:	6d 8f       	std	Y+29, r22	; 0x1d
    1652:	7e 8f       	std	Y+30, r23	; 0x1e
    1654:	1a 81       	ldd	r17, Y+2	; 0x02
    1656:	1f 87       	std	Y+15, r17	; 0x0f
    1658:	2b 81       	ldd	r18, Y+3	; 0x03
    165a:	28 8b       	std	Y+16, r18	; 0x10
    165c:	3c 81       	ldd	r19, Y+4	; 0x04
    165e:	39 8b       	std	Y+17, r19	; 0x11
    1660:	4d 81       	ldd	r20, Y+5	; 0x05
    1662:	4a 8b       	std	Y+18, r20	; 0x12
    1664:	5e 81       	ldd	r21, Y+6	; 0x06
    1666:	5b 8b       	std	Y+19, r21	; 0x13
    1668:	6f 81       	ldd	r22, Y+7	; 0x07
    166a:	6c 8b       	std	Y+20, r22	; 0x14
    166c:	78 85       	ldd	r23, Y+8	; 0x08
    166e:	7d 8b       	std	Y+21, r23	; 0x15
    1670:	89 85       	ldd	r24, Y+9	; 0x09
    1672:	8e 8b       	std	Y+22, r24	; 0x16
    1674:	9e 89       	ldd	r25, Y+22	; 0x16
    1676:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1678:	09 17       	cp	r16, r25
    167a:	08 f4       	brcc	.+2      	; 0x167e <TIMER0_u8BusyWaitMS+0x338>
    167c:	42 c0       	rjmp	.+132    	; 0x1702 <TIMER0_u8BusyWaitMS+0x3bc>
    167e:	1e 89       	ldd	r17, Y+22	; 0x16
    1680:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1682:	12 17       	cp	r17, r18
    1684:	09 f0       	breq	.+2      	; 0x1688 <TIMER0_u8BusyWaitMS+0x342>
    1686:	92 ce       	rjmp	.-732    	; 0x13ac <TIMER0_u8BusyWaitMS+0x66>
    1688:	3d 89       	ldd	r19, Y+21	; 0x15
    168a:	4d 8d       	ldd	r20, Y+29	; 0x1d
    168c:	43 17       	cp	r20, r19
    168e:	c8 f1       	brcs	.+114    	; 0x1702 <TIMER0_u8BusyWaitMS+0x3bc>
    1690:	5d 89       	ldd	r21, Y+21	; 0x15
    1692:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1694:	56 17       	cp	r21, r22
    1696:	09 f0       	breq	.+2      	; 0x169a <TIMER0_u8BusyWaitMS+0x354>
    1698:	89 ce       	rjmp	.-750    	; 0x13ac <TIMER0_u8BusyWaitMS+0x66>
    169a:	7c 89       	ldd	r23, Y+20	; 0x14
    169c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    169e:	87 17       	cp	r24, r23
    16a0:	80 f1       	brcs	.+96     	; 0x1702 <TIMER0_u8BusyWaitMS+0x3bc>
    16a2:	9c 89       	ldd	r25, Y+20	; 0x14
    16a4:	0c 8d       	ldd	r16, Y+28	; 0x1c
    16a6:	90 17       	cp	r25, r16
    16a8:	09 f0       	breq	.+2      	; 0x16ac <TIMER0_u8BusyWaitMS+0x366>
    16aa:	80 ce       	rjmp	.-768    	; 0x13ac <TIMER0_u8BusyWaitMS+0x66>
    16ac:	1b 89       	ldd	r17, Y+19	; 0x13
    16ae:	2b 8d       	ldd	r18, Y+27	; 0x1b
    16b0:	21 17       	cp	r18, r17
    16b2:	38 f1       	brcs	.+78     	; 0x1702 <TIMER0_u8BusyWaitMS+0x3bc>
    16b4:	3b 89       	ldd	r19, Y+19	; 0x13
    16b6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    16b8:	34 17       	cp	r19, r20
    16ba:	09 f0       	breq	.+2      	; 0x16be <TIMER0_u8BusyWaitMS+0x378>
    16bc:	77 ce       	rjmp	.-786    	; 0x13ac <TIMER0_u8BusyWaitMS+0x66>
    16be:	5a 89       	ldd	r21, Y+18	; 0x12
    16c0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    16c2:	65 17       	cp	r22, r21
    16c4:	f0 f0       	brcs	.+60     	; 0x1702 <TIMER0_u8BusyWaitMS+0x3bc>
    16c6:	7a 89       	ldd	r23, Y+18	; 0x12
    16c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    16ca:	78 17       	cp	r23, r24
    16cc:	09 f0       	breq	.+2      	; 0x16d0 <TIMER0_u8BusyWaitMS+0x38a>
    16ce:	6e ce       	rjmp	.-804    	; 0x13ac <TIMER0_u8BusyWaitMS+0x66>
    16d0:	99 89       	ldd	r25, Y+17	; 0x11
    16d2:	09 8d       	ldd	r16, Y+25	; 0x19
    16d4:	09 17       	cp	r16, r25
    16d6:	a8 f0       	brcs	.+42     	; 0x1702 <TIMER0_u8BusyWaitMS+0x3bc>
    16d8:	19 89       	ldd	r17, Y+17	; 0x11
    16da:	29 8d       	ldd	r18, Y+25	; 0x19
    16dc:	12 17       	cp	r17, r18
    16de:	09 f0       	breq	.+2      	; 0x16e2 <TIMER0_u8BusyWaitMS+0x39c>
    16e0:	65 ce       	rjmp	.-822    	; 0x13ac <TIMER0_u8BusyWaitMS+0x66>
    16e2:	38 89       	ldd	r19, Y+16	; 0x10
    16e4:	48 8d       	ldd	r20, Y+24	; 0x18
    16e6:	43 17       	cp	r20, r19
    16e8:	60 f0       	brcs	.+24     	; 0x1702 <TIMER0_u8BusyWaitMS+0x3bc>
    16ea:	58 89       	ldd	r21, Y+16	; 0x10
    16ec:	68 8d       	ldd	r22, Y+24	; 0x18
    16ee:	56 17       	cp	r21, r22
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <TIMER0_u8BusyWaitMS+0x3ae>
    16f2:	5c ce       	rjmp	.-840    	; 0x13ac <TIMER0_u8BusyWaitMS+0x66>
    16f4:	7f 85       	ldd	r23, Y+15	; 0x0f
    16f6:	8f 89       	ldd	r24, Y+23	; 0x17
    16f8:	87 17       	cp	r24, r23
    16fa:	18 f0       	brcs	.+6      	; 0x1702 <TIMER0_u8BusyWaitMS+0x3bc>
    16fc:	57 ce       	rjmp	.-850    	; 0x13ac <TIMER0_u8BusyWaitMS+0x66>
			}
		}
	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
    16fe:	84 e1       	ldi	r24, 0x14	; 20
    1700:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
    1702:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    1704:	c7 5b       	subi	r28, 0xB7	; 183
    1706:	df 4f       	sbci	r29, 0xFF	; 255
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	08 95       	ret

0000171c <TIMER0_u8BusyWaitUS>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//busy wait with prescaller 8
uint8_t TIMER0_u8BusyWaitUS(uint32_t u32_BusyTimeInMicroSec)
{
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	2a 97       	sbiw	r28, 0x0a	; 10
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	de bf       	out	0x3e, r29	; 62
    172c:	0f be       	out	0x3f, r0	; 63
    172e:	cd bf       	out	0x3d, r28	; 61
    1730:	6f 83       	std	Y+7, r22	; 0x07
    1732:	78 87       	std	Y+8, r23	; 0x08
    1734:	89 87       	std	Y+9, r24	; 0x09
    1736:	9a 87       	std	Y+10, r25	; 0x0a
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
    1738:	83 e1       	ldi	r24, 0x13	; 19
    173a:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used== u8_TIMER0_FLAG_NOT_USED)
    173c:	80 91 6e 00 	lds	r24, 0x006E
    1740:	83 31       	cpi	r24, 0x13	; 19
    1742:	e9 f5       	brne	.+122    	; 0x17be <TIMER0_u8BusyWaitUS+0xa2>
	{
		volatile uint32_t u32_BusyWaitcounter = u8_INTIAL_COUNTER_VAL ;
    1744:	1a 82       	std	Y+2, r1	; 0x02
    1746:	1b 82       	std	Y+3, r1	; 0x03
    1748:	1c 82       	std	Y+4, r1	; 0x04
    174a:	1d 82       	std	Y+5, r1	; 0x05
		volatile uint8_t u8_CheckCompareFlag ;
		TIMERS_u8IntModesDis(u8_TIMER0_OVER_FLOW) ;
    174c:	81 e1       	ldi	r24, 0x11	; 17
    174e:	0e 94 a7 08 	call	0x114e	; 0x114e <TIMERS_u8IntModesDis>
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
    1752:	82 e1       	ldi	r24, 0x12	; 18
    1754:	0e 94 a7 08 	call	0x114e	; 0x114e <TIMERS_u8IntModesDis>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    1758:	87 e0       	ldi	r24, 0x07	; 7
    175a:	0e 94 01 07 	call	0xe02	; 0xe02 <TIMER0_u8StartWithclockAndPrescalerSelect>
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
    175e:	82 e1       	ldi	r24, 0x12	; 18
    1760:	0e 94 fd 07 	call	0xffa	; 0xffa <TIMERS_u8ClearIntFlag>
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    1764:	8a ef       	ldi	r24, 0xFA	; 250
    1766:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <Timer0_u8setOverFlowRegTicksBeforeOV>
    1770:	18 c0       	rjmp	.+48     	; 0x17a2 <TIMER0_u8BusyWaitUS+0x86>
		while(u32_BusyWaitcounter <=u32_BusyTimeInMicroSec)
		{
			TIMERS_u8GetIntFlag(u8_TIMER0_COMPARE_ON_MATCH,(&u8_CheckCompareFlag)) ;
    1772:	9e 01       	movw	r18, r28
    1774:	2a 5f       	subi	r18, 0xFA	; 250
    1776:	3f 4f       	sbci	r19, 0xFF	; 255
    1778:	82 e1       	ldi	r24, 0x12	; 18
    177a:	b9 01       	movw	r22, r18
    177c:	0e 94 2f 08 	call	0x105e	; 0x105e <TIMERS_u8GetIntFlag>
			if(u8_CheckCompareFlag == u8_Flag_RAISED )
    1780:	8e 81       	ldd	r24, Y+6	; 0x06
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	71 f4       	brne	.+28     	; 0x17a2 <TIMER0_u8BusyWaitUS+0x86>
			{
				TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
    1786:	82 e1       	ldi	r24, 0x12	; 18
    1788:	0e 94 fd 07 	call	0xffa	; 0xffa <TIMERS_u8ClearIntFlag>
				u32_BusyWaitcounter++ ;
    178c:	8a 81       	ldd	r24, Y+2	; 0x02
    178e:	9b 81       	ldd	r25, Y+3	; 0x03
    1790:	ac 81       	ldd	r26, Y+4	; 0x04
    1792:	bd 81       	ldd	r27, Y+5	; 0x05
    1794:	01 96       	adiw	r24, 0x01	; 1
    1796:	a1 1d       	adc	r26, r1
    1798:	b1 1d       	adc	r27, r1
    179a:	8a 83       	std	Y+2, r24	; 0x02
    179c:	9b 83       	std	Y+3, r25	; 0x03
    179e:	ac 83       	std	Y+4, r26	; 0x04
    17a0:	bd 83       	std	Y+5, r27	; 0x05
		TIMERS_u8IntModesDis(u8_TIMER0_COMPARE_ON_MATCH) ;
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
		TIMERS_u8ClearIntFlag(u8_TIMER0_COMPARE_ON_MATCH) ;
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
		while(u32_BusyWaitcounter <=u32_BusyTimeInMicroSec)
    17a2:	2a 81       	ldd	r18, Y+2	; 0x02
    17a4:	3b 81       	ldd	r19, Y+3	; 0x03
    17a6:	4c 81       	ldd	r20, Y+4	; 0x04
    17a8:	5d 81       	ldd	r21, Y+5	; 0x05
    17aa:	8f 81       	ldd	r24, Y+7	; 0x07
    17ac:	98 85       	ldd	r25, Y+8	; 0x08
    17ae:	a9 85       	ldd	r26, Y+9	; 0x09
    17b0:	ba 85       	ldd	r27, Y+10	; 0x0a
    17b2:	82 17       	cp	r24, r18
    17b4:	93 07       	cpc	r25, r19
    17b6:	a4 07       	cpc	r26, r20
    17b8:	b5 07       	cpc	r27, r21
    17ba:	d8 f6       	brcc	.-74     	; 0x1772 <TIMER0_u8BusyWaitUS+0x56>
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <TIMER0_u8BusyWaitUS+0xa6>
			}
		}
	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
    17be:	84 e1       	ldi	r24, 0x14	; 20
    17c0:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    17c4:	2a 96       	adiw	r28, 0x0a	; 10
    17c6:	0f b6       	in	r0, 0x3f	; 63
    17c8:	f8 94       	cli
    17ca:	de bf       	out	0x3e, r29	; 62
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	cd bf       	out	0x3d, r28	; 61
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	08 95       	ret

000017d6 <TIMER0_u8InterruptWait>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

uint8_t TIMER0_u8InterruptWait(uint32_t u32_BusyTimeInMilliSec)
{
    17d6:	df 93       	push	r29
    17d8:	cf 93       	push	r28
    17da:	00 d0       	rcall	.+0      	; 0x17dc <TIMER0_u8InterruptWait+0x6>
    17dc:	00 d0       	rcall	.+0      	; 0x17de <TIMER0_u8InterruptWait+0x8>
    17de:	0f 92       	push	r0
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	6a 83       	std	Y+2, r22	; 0x02
    17e6:	7b 83       	std	Y+3, r23	; 0x03
    17e8:	8c 83       	std	Y+4, r24	; 0x04
    17ea:	9d 83       	std	Y+5, r25	; 0x05
	uint8_t u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_NOT_USED ;
    17ec:	83 e1       	ldi	r24, 0x13	; 19
    17ee:	89 83       	std	Y+1, r24	; 0x01
	if(gu8_FlagIfTimer0Used==u8_TIMER0_FLAG_NOT_USED &&gu8_FinishIntWaitFlag != u8_BEGIN_INTERRUPT_WAITING )
    17f0:	80 91 6e 00 	lds	r24, 0x006E
    17f4:	83 31       	cpi	r24, 0x13	; 19
    17f6:	09 f0       	breq	.+2      	; 0x17fa <TIMER0_u8InterruptWait+0x24>
    17f8:	3f c0       	rjmp	.+126    	; 0x1878 <TIMER0_u8InterruptWait+0xa2>
    17fa:	80 91 6d 00 	lds	r24, 0x006D
    17fe:	87 31       	cpi	r24, 0x17	; 23
    1800:	d9 f1       	breq	.+118    	; 0x1878 <TIMER0_u8InterruptWait+0xa2>
	{
		gu64_IntWaitcounter = (uint64_t)(u32_BusyTimeInMilliSec*u8_NUMBER_OF_COUNTS_TO_COMP_1mS_with_8_pre) ;
    1802:	8a 81       	ldd	r24, Y+2	; 0x02
    1804:	9b 81       	ldd	r25, Y+3	; 0x03
    1806:	ac 81       	ldd	r26, Y+4	; 0x04
    1808:	bd 81       	ldd	r27, Y+5	; 0x05
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	aa 1f       	adc	r26, r26
    1810:	bb 1f       	adc	r27, r27
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	aa 1f       	adc	r26, r26
    1818:	bb 1f       	adc	r27, r27
    181a:	9c 01       	movw	r18, r24
    181c:	ad 01       	movw	r20, r26
    181e:	60 e0       	ldi	r22, 0x00	; 0
    1820:	70 e0       	ldi	r23, 0x00	; 0
    1822:	80 e0       	ldi	r24, 0x00	; 0
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	20 93 76 00 	sts	0x0076, r18
    182a:	30 93 77 00 	sts	0x0077, r19
    182e:	40 93 78 00 	sts	0x0078, r20
    1832:	50 93 79 00 	sts	0x0079, r21
    1836:	60 93 7a 00 	sts	0x007A, r22
    183a:	70 93 7b 00 	sts	0x007B, r23
    183e:	80 93 7c 00 	sts	0x007C, r24
    1842:	90 93 7d 00 	sts	0x007D, r25
		Timer0_u8setCompareRegTicksBeforeOV(u8_NUM_OF_COUNTS_FOR_250_uS_with_8_pre) ;
    1846:	8a ef       	ldi	r24, 0xFA	; 250
    1848:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <Timer0_u8setCompareRegTicksBeforeOV>
		Timer0_u8setOverFlowRegTicksBeforeOV(u8_MAX_TIMER0_COUNTS) ;
    184c:	8f ef       	ldi	r24, 0xFF	; 255
    184e:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <Timer0_u8setOverFlowRegTicksBeforeOV>
		gu8_FlagIfTimer0Used = u8_TIMER0_FLAG_USED ;
    1852:	84 e1       	ldi	r24, 0x14	; 20
    1854:	80 93 6e 00 	sts	0x006E, r24
		TIMERS_u8IntModesEn(u8_TIMER0_COMPARE_ON_MATCH);
    1858:	82 e1       	ldi	r24, 0x12	; 18
    185a:	0e 94 67 08 	call	0x10ce	; 0x10ce <TIMERS_u8IntModesEn>
		TIMER0_u8setCallBack(u8_TIMER0_COMPARE_ON_MATCH,void_IntWaitControlFlagCount) ;
    185e:	27 e4       	ldi	r18, 0x47	; 71
    1860:	3c e0       	ldi	r19, 0x0C	; 12
    1862:	82 e1       	ldi	r24, 0x12	; 18
    1864:	b9 01       	movw	r22, r18
    1866:	0e 94 02 09 	call	0x1204	; 0x1204 <TIMER0_u8setCallBack>
		TIMER0_u8StartWithclockAndPrescalerSelect(u8_INTERNAL_CLK_PRE_8) ;
    186a:	87 e0       	ldi	r24, 0x07	; 7
    186c:	0e 94 01 07 	call	0xe02	; 0xe02 <TIMER0_u8StartWithclockAndPrescalerSelect>
		gu8_FinishIntWaitFlag = u8_BEGIN_INTERRUPT_WAITING ;
    1870:	87 e1       	ldi	r24, 0x17	; 23
    1872:	80 93 6d 00 	sts	0x006D, r24
    1876:	02 c0       	rjmp	.+4      	; 0x187c <TIMER0_u8InterruptWait+0xa6>

	}
	else
	{
		u8_Timer0FlagIfUsed = u8_TIMER0_FLAG_USED ;
    1878:	84 e1       	ldi	r24, 0x14	; 20
    187a:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_Timer0FlagIfUsed ;
    187c:	89 81       	ldd	r24, Y+1	; 0x01
}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <void_IntWaitControlFlagCount>:

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

void void_IntWaitControlFlagCount(void)
{
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	ab 97       	sbiw	r28, 0x2b	; 43
    1898:	0f b6       	in	r0, 0x3f	; 63
    189a:	f8 94       	cli
    189c:	de bf       	out	0x3e, r29	; 62
    189e:	0f be       	out	0x3f, r0	; 63
    18a0:	cd bf       	out	0x3d, r28	; 61

	if(gu8_FlagIfTimer0Used==u8_TIMER0_FLAG_USED&&gu64_IntWaitcounter > u8_INTIAL_COUNTER_VAL)
    18a2:	80 91 6e 00 	lds	r24, 0x006E
    18a6:	84 31       	cpi	r24, 0x14	; 20
    18a8:	09 f0       	breq	.+2      	; 0x18ac <void_IntWaitControlFlagCount+0x1e>
    18aa:	17 c1       	rjmp	.+558    	; 0x1ada <void_IntWaitControlFlagCount+0x24c>
    18ac:	20 91 76 00 	lds	r18, 0x0076
    18b0:	30 91 77 00 	lds	r19, 0x0077
    18b4:	40 91 78 00 	lds	r20, 0x0078
    18b8:	50 91 79 00 	lds	r21, 0x0079
    18bc:	60 91 7a 00 	lds	r22, 0x007A
    18c0:	70 91 7b 00 	lds	r23, 0x007B
    18c4:	80 91 7c 00 	lds	r24, 0x007C
    18c8:	90 91 7d 00 	lds	r25, 0x007D
    18cc:	e2 2f       	mov	r30, r18
    18ce:	e3 2b       	or	r30, r19
    18d0:	e4 2b       	or	r30, r20
    18d2:	e5 2b       	or	r30, r21
    18d4:	e6 2b       	or	r30, r22
    18d6:	e7 2b       	or	r30, r23
    18d8:	e8 2b       	or	r30, r24
    18da:	e9 2b       	or	r30, r25
    18dc:	ee 23       	and	r30, r30
    18de:	09 f4       	brne	.+2      	; 0x18e2 <void_IntWaitControlFlagCount+0x54>
    18e0:	fc c0       	rjmp	.+504    	; 0x1ada <void_IntWaitControlFlagCount+0x24c>
	{
		gu64_IntWaitcounter-- ;
    18e2:	80 91 76 00 	lds	r24, 0x0076
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	90 91 77 00 	lds	r25, 0x0077
    18ec:	9a 83       	std	Y+2, r25	; 0x02
    18ee:	80 91 78 00 	lds	r24, 0x0078
    18f2:	8b 83       	std	Y+3, r24	; 0x03
    18f4:	90 91 79 00 	lds	r25, 0x0079
    18f8:	9c 83       	std	Y+4, r25	; 0x04
    18fa:	80 91 7a 00 	lds	r24, 0x007A
    18fe:	8d 83       	std	Y+5, r24	; 0x05
    1900:	90 91 7b 00 	lds	r25, 0x007B
    1904:	9e 83       	std	Y+6, r25	; 0x06
    1906:	80 91 7c 00 	lds	r24, 0x007C
    190a:	8f 83       	std	Y+7, r24	; 0x07
    190c:	90 91 7d 00 	lds	r25, 0x007D
    1910:	98 87       	std	Y+8, r25	; 0x08
    1912:	8f ef       	ldi	r24, 0xFF	; 255
    1914:	89 87       	std	Y+9, r24	; 0x09
    1916:	9f ef       	ldi	r25, 0xFF	; 255
    1918:	9a 87       	std	Y+10, r25	; 0x0a
    191a:	8f ef       	ldi	r24, 0xFF	; 255
    191c:	8b 87       	std	Y+11, r24	; 0x0b
    191e:	9f ef       	ldi	r25, 0xFF	; 255
    1920:	9c 87       	std	Y+12, r25	; 0x0c
    1922:	8f ef       	ldi	r24, 0xFF	; 255
    1924:	8d 87       	std	Y+13, r24	; 0x0d
    1926:	9f ef       	ldi	r25, 0xFF	; 255
    1928:	9e 87       	std	Y+14, r25	; 0x0e
    192a:	8f ef       	ldi	r24, 0xFF	; 255
    192c:	8f 87       	std	Y+15, r24	; 0x0f
    192e:	9f ef       	ldi	r25, 0xFF	; 255
    1930:	98 8b       	std	Y+16, r25	; 0x10
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	99 85       	ldd	r25, Y+9	; 0x09
    1936:	89 0f       	add	r24, r25
    1938:	89 8b       	std	Y+17, r24	; 0x11
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	89 8f       	std	Y+25, r24	; 0x19
    193e:	99 89       	ldd	r25, Y+17	; 0x11
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	98 17       	cp	r25, r24
    1944:	08 f0       	brcs	.+2      	; 0x1948 <void_IntWaitControlFlagCount+0xba>
    1946:	19 8e       	std	Y+25, r1	; 0x19
    1948:	9a 81       	ldd	r25, Y+2	; 0x02
    194a:	8a 85       	ldd	r24, Y+10	; 0x0a
    194c:	98 0f       	add	r25, r24
    194e:	9a 8b       	std	Y+18, r25	; 0x12
    1950:	91 e0       	ldi	r25, 0x01	; 1
    1952:	9a 8f       	std	Y+26, r25	; 0x1a
    1954:	8a 89       	ldd	r24, Y+18	; 0x12
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	89 17       	cp	r24, r25
    195a:	08 f0       	brcs	.+2      	; 0x195e <void_IntWaitControlFlagCount+0xd0>
    195c:	1a 8e       	std	Y+26, r1	; 0x1a
    195e:	89 8d       	ldd	r24, Y+25	; 0x19
    1960:	9a 89       	ldd	r25, Y+18	; 0x12
    1962:	89 0f       	add	r24, r25
    1964:	8b 8f       	std	Y+27, r24	; 0x1b
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	8c 8f       	std	Y+28, r24	; 0x1c
    196a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    196c:	8a 89       	ldd	r24, Y+18	; 0x12
    196e:	98 17       	cp	r25, r24
    1970:	08 f0       	brcs	.+2      	; 0x1974 <void_IntWaitControlFlagCount+0xe6>
    1972:	1c 8e       	std	Y+28, r1	; 0x1c
    1974:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1976:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1978:	98 2b       	or	r25, r24
    197a:	9a 8f       	std	Y+26, r25	; 0x1a
    197c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    197e:	9a 8b       	std	Y+18, r25	; 0x12
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9b 85       	ldd	r25, Y+11	; 0x0b
    1984:	89 0f       	add	r24, r25
    1986:	8b 8b       	std	Y+19, r24	; 0x13
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	8d 8f       	std	Y+29, r24	; 0x1d
    198c:	9b 89       	ldd	r25, Y+19	; 0x13
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	98 17       	cp	r25, r24
    1992:	08 f0       	brcs	.+2      	; 0x1996 <void_IntWaitControlFlagCount+0x108>
    1994:	1d 8e       	std	Y+29, r1	; 0x1d
    1996:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1998:	8b 89       	ldd	r24, Y+19	; 0x13
    199a:	98 0f       	add	r25, r24
    199c:	9e 8f       	std	Y+30, r25	; 0x1e
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	9f 8f       	std	Y+31, r25	; 0x1f
    19a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19a4:	9b 89       	ldd	r25, Y+19	; 0x13
    19a6:	89 17       	cp	r24, r25
    19a8:	08 f0       	brcs	.+2      	; 0x19ac <void_IntWaitControlFlagCount+0x11e>
    19aa:	1f 8e       	std	Y+31, r1	; 0x1f
    19ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19b0:	89 2b       	or	r24, r25
    19b2:	8d 8f       	std	Y+29, r24	; 0x1d
    19b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19b6:	8b 8b       	std	Y+19, r24	; 0x13
    19b8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    19bc:	98 0f       	add	r25, r24
    19be:	9c 8b       	std	Y+20, r25	; 0x14
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	98 a3       	std	Y+32, r25	; 0x20
    19c4:	8c 89       	ldd	r24, Y+20	; 0x14
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	89 17       	cp	r24, r25
    19ca:	08 f0       	brcs	.+2      	; 0x19ce <void_IntWaitControlFlagCount+0x140>
    19cc:	18 a2       	std	Y+32, r1	; 0x20
    19ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19d0:	9c 89       	ldd	r25, Y+20	; 0x14
    19d2:	89 0f       	add	r24, r25
    19d4:	89 a3       	std	Y+33, r24	; 0x21
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	8a a3       	std	Y+34, r24	; 0x22
    19da:	99 a1       	ldd	r25, Y+33	; 0x21
    19dc:	8c 89       	ldd	r24, Y+20	; 0x14
    19de:	98 17       	cp	r25, r24
    19e0:	08 f0       	brcs	.+2      	; 0x19e4 <void_IntWaitControlFlagCount+0x156>
    19e2:	1a a2       	std	Y+34, r1	; 0x22
    19e4:	98 a1       	ldd	r25, Y+32	; 0x20
    19e6:	8a a1       	ldd	r24, Y+34	; 0x22
    19e8:	98 2b       	or	r25, r24
    19ea:	98 a3       	std	Y+32, r25	; 0x20
    19ec:	99 a1       	ldd	r25, Y+33	; 0x21
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8d 81       	ldd	r24, Y+5	; 0x05
    19f2:	9d 85       	ldd	r25, Y+13	; 0x0d
    19f4:	89 0f       	add	r24, r25
    19f6:	8d 8b       	std	Y+21, r24	; 0x15
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	8b a3       	std	Y+35, r24	; 0x23
    19fc:	9d 89       	ldd	r25, Y+21	; 0x15
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	98 17       	cp	r25, r24
    1a02:	08 f0       	brcs	.+2      	; 0x1a06 <void_IntWaitControlFlagCount+0x178>
    1a04:	1b a2       	std	Y+35, r1	; 0x23
    1a06:	98 a1       	ldd	r25, Y+32	; 0x20
    1a08:	8d 89       	ldd	r24, Y+21	; 0x15
    1a0a:	98 0f       	add	r25, r24
    1a0c:	9c a3       	std	Y+36, r25	; 0x24
    1a0e:	91 e0       	ldi	r25, 0x01	; 1
    1a10:	9d a3       	std	Y+37, r25	; 0x25
    1a12:	8c a1       	ldd	r24, Y+36	; 0x24
    1a14:	9d 89       	ldd	r25, Y+21	; 0x15
    1a16:	89 17       	cp	r24, r25
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <void_IntWaitControlFlagCount+0x18e>
    1a1a:	1d a2       	std	Y+37, r1	; 0x25
    1a1c:	8b a1       	ldd	r24, Y+35	; 0x23
    1a1e:	9d a1       	ldd	r25, Y+37	; 0x25
    1a20:	89 2b       	or	r24, r25
    1a22:	8b a3       	std	Y+35, r24	; 0x23
    1a24:	8c a1       	ldd	r24, Y+36	; 0x24
    1a26:	8d 8b       	std	Y+21, r24	; 0x15
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a2c:	98 0f       	add	r25, r24
    1a2e:	9e 8b       	std	Y+22, r25	; 0x16
    1a30:	91 e0       	ldi	r25, 0x01	; 1
    1a32:	9e a3       	std	Y+38, r25	; 0x26
    1a34:	8e 89       	ldd	r24, Y+22	; 0x16
    1a36:	9e 81       	ldd	r25, Y+6	; 0x06
    1a38:	89 17       	cp	r24, r25
    1a3a:	08 f0       	brcs	.+2      	; 0x1a3e <void_IntWaitControlFlagCount+0x1b0>
    1a3c:	1e a2       	std	Y+38, r1	; 0x26
    1a3e:	8b a1       	ldd	r24, Y+35	; 0x23
    1a40:	9e 89       	ldd	r25, Y+22	; 0x16
    1a42:	89 0f       	add	r24, r25
    1a44:	8f a3       	std	Y+39, r24	; 0x27
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	88 a7       	std	Y+40, r24	; 0x28
    1a4a:	9f a1       	ldd	r25, Y+39	; 0x27
    1a4c:	8e 89       	ldd	r24, Y+22	; 0x16
    1a4e:	98 17       	cp	r25, r24
    1a50:	08 f0       	brcs	.+2      	; 0x1a54 <void_IntWaitControlFlagCount+0x1c6>
    1a52:	18 a6       	std	Y+40, r1	; 0x28
    1a54:	9e a1       	ldd	r25, Y+38	; 0x26
    1a56:	88 a5       	ldd	r24, Y+40	; 0x28
    1a58:	98 2b       	or	r25, r24
    1a5a:	9e a3       	std	Y+38, r25	; 0x26
    1a5c:	9f a1       	ldd	r25, Y+39	; 0x27
    1a5e:	9e 8b       	std	Y+22, r25	; 0x16
    1a60:	8f 81       	ldd	r24, Y+7	; 0x07
    1a62:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a64:	89 0f       	add	r24, r25
    1a66:	8f 8b       	std	Y+23, r24	; 0x17
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	89 a7       	std	Y+41, r24	; 0x29
    1a6c:	9f 89       	ldd	r25, Y+23	; 0x17
    1a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a70:	98 17       	cp	r25, r24
    1a72:	08 f0       	brcs	.+2      	; 0x1a76 <void_IntWaitControlFlagCount+0x1e8>
    1a74:	19 a6       	std	Y+41, r1	; 0x29
    1a76:	9e a1       	ldd	r25, Y+38	; 0x26
    1a78:	8f 89       	ldd	r24, Y+23	; 0x17
    1a7a:	98 0f       	add	r25, r24
    1a7c:	9a a7       	std	Y+42, r25	; 0x2a
    1a7e:	91 e0       	ldi	r25, 0x01	; 1
    1a80:	9b a7       	std	Y+43, r25	; 0x2b
    1a82:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a84:	9f 89       	ldd	r25, Y+23	; 0x17
    1a86:	89 17       	cp	r24, r25
    1a88:	08 f0       	brcs	.+2      	; 0x1a8c <void_IntWaitControlFlagCount+0x1fe>
    1a8a:	1b a6       	std	Y+43, r1	; 0x2b
    1a8c:	89 a5       	ldd	r24, Y+41	; 0x29
    1a8e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a90:	89 2b       	or	r24, r25
    1a92:	89 a7       	std	Y+41, r24	; 0x29
    1a94:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a96:	8f 8b       	std	Y+23, r24	; 0x17
    1a98:	98 85       	ldd	r25, Y+8	; 0x08
    1a9a:	88 89       	ldd	r24, Y+16	; 0x10
    1a9c:	98 0f       	add	r25, r24
    1a9e:	98 8f       	std	Y+24, r25	; 0x18
    1aa0:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa4:	89 0f       	add	r24, r25
    1aa6:	88 8f       	std	Y+24, r24	; 0x18
    1aa8:	29 89       	ldd	r18, Y+17	; 0x11
    1aaa:	3a 89       	ldd	r19, Y+18	; 0x12
    1aac:	4b 89       	ldd	r20, Y+19	; 0x13
    1aae:	5c 89       	ldd	r21, Y+20	; 0x14
    1ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab8:	20 93 76 00 	sts	0x0076, r18
    1abc:	30 93 77 00 	sts	0x0077, r19
    1ac0:	40 93 78 00 	sts	0x0078, r20
    1ac4:	50 93 79 00 	sts	0x0079, r21
    1ac8:	60 93 7a 00 	sts	0x007A, r22
    1acc:	70 93 7b 00 	sts	0x007B, r23
    1ad0:	80 93 7c 00 	sts	0x007C, r24
    1ad4:	90 93 7d 00 	sts	0x007D, r25
    1ad8:	06 c0       	rjmp	.+12     	; 0x1ae6 <void_IntWaitControlFlagCount+0x258>
	}
	else
	{
		gu8_FlagIfTimer0Used = u8_TIMER0_FLAG_NOT_USED ;
    1ada:	83 e1       	ldi	r24, 0x13	; 19
    1adc:	80 93 6e 00 	sts	0x006E, r24
		gu8_FinishIntWaitFlag = u8_FINISH_INTERRUPT_WAITING ;
    1ae0:	86 e1       	ldi	r24, 0x16	; 22
    1ae2:	80 93 6d 00 	sts	0x006D, r24
	}
}
    1ae6:	ab 96       	adiw	r28, 0x2b	; 43
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <LCD_voidInit>:




void LCD_voidInit(void) 
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
	TIMER0_u8BusyWaitMS(u8_INTIAL_1st_WAITING_TIME_MS)  ;
    1b00:	62 e3       	ldi	r22, 0x32	; 50
    1b02:	70 e0       	ldi	r23, 0x00	; 0
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_RS,u8_DIO_OUTPUT_PIN) ; 
    1b0c:	88 e0       	ldi	r24, 0x08	; 8
    1b0e:	61 e0       	ldi	r22, 0x01	; 1
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	0e 94 93 03 	call	0x726	; 0x726 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_RW,u8_DIO_OUTPUT_PIN) ;
    1b16:	88 e0       	ldi	r24, 0x08	; 8
    1b18:	62 e0       	ldi	r22, 0x02	; 2
    1b1a:	41 e0       	ldi	r20, 0x01	; 1
    1b1c:	0e 94 93 03 	call	0x726	; 0x726 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_E,u8_DIO_OUTPUT_PIN) ;
    1b20:	88 e0       	ldi	r24, 0x08	; 8
    1b22:	63 e0       	ldi	r22, 0x03	; 3
    1b24:	41 e0       	ldi	r20, 0x01	; 1
    1b26:	0e 94 93 03 	call	0x726	; 0x726 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_D4,u8_DIO_OUTPUT_PIN) ;
    1b2a:	88 e0       	ldi	r24, 0x08	; 8
    1b2c:	64 e0       	ldi	r22, 0x04	; 4
    1b2e:	41 e0       	ldi	r20, 0x01	; 1
    1b30:	0e 94 93 03 	call	0x726	; 0x726 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_D5,u8_DIO_OUTPUT_PIN) ;
    1b34:	88 e0       	ldi	r24, 0x08	; 8
    1b36:	65 e0       	ldi	r22, 0x05	; 5
    1b38:	41 e0       	ldi	r20, 0x01	; 1
    1b3a:	0e 94 93 03 	call	0x726	; 0x726 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_D6,u8_DIO_OUTPUT_PIN) ;
    1b3e:	88 e0       	ldi	r24, 0x08	; 8
    1b40:	66 e0       	ldi	r22, 0x06	; 6
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	0e 94 93 03 	call	0x726	; 0x726 <DIO_u8SetPinDir>
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_LCD_D7,u8_DIO_OUTPUT_PIN) ;
    1b48:	88 e0       	ldi	r24, 0x08	; 8
    1b4a:	67 e0       	ldi	r22, 0x07	; 7
    1b4c:	41 e0       	ldi	r20, 0x01	; 1
    1b4e:	0e 94 93 03 	call	0x726	; 0x726 <DIO_u8SetPinDir>


	//INTIALIZING COMMANDS TO LCD
	LCD_voidsendCommandData(0x3,0,0) ;
    1b52:	83 e0       	ldi	r24, 0x03	; 3
    1b54:	60 e0       	ldi	r22, 0x00	; 0
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    1b5c:	6a e0       	ldi	r22, 0x0A	; 10
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>
	LCD_voidsendCommandData(0x3,0,0) ;
    1b68:	83 e0       	ldi	r24, 0x03	; 3
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	40 e0       	ldi	r20, 0x00	; 0
    1b6e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    1b72:	6a e0       	ldi	r22, 0x0A	; 10
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x3,0,0) ;
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	40 e0       	ldi	r20, 0x00	; 0
    1b84:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    1b88:	6a e0       	ldi	r22, 0x0A	; 10
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x2,0,0) ;
    1b94:	82 e0       	ldi	r24, 0x02	; 2
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	40 e0       	ldi	r20, 0x00	; 0
    1b9a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    1b9e:	6a e0       	ldi	r22, 0x0A	; 10
    1ba0:	70 e0       	ldi	r23, 0x00	; 0
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x20,0,0) ;
    1baa:	80 e2       	ldi	r24, 0x20	; 32
    1bac:	60 e0       	ldi	r22, 0x00	; 0
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    1bb4:	6a e0       	ldi	r22, 0x0A	; 10
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x08,0,0) ;
    1bc0:	88 e0       	ldi	r24, 0x08	; 8
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    1bca:	6a e0       	ldi	r22, 0x0A	; 10
    1bcc:	70 e0       	ldi	r23, 0x00	; 0
    1bce:	80 e0       	ldi	r24, 0x00	; 0
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x01,0,0) ;
    1bd6:	81 e0       	ldi	r24, 0x01	; 1
    1bd8:	60 e0       	ldi	r22, 0x00	; 0
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    1be0:	6a e0       	ldi	r22, 0x0A	; 10
    1be2:	70 e0       	ldi	r23, 0x00	; 0
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x06,0,0) ;
    1bec:	86 e0       	ldi	r24, 0x06	; 6
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    1bf6:	6a e0       	ldi	r22, 0x0A	; 10
    1bf8:	70 e0       	ldi	r23, 0x00	; 0
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>

	LCD_voidsendCommandData(0x0C,0,0) ;
    1c02:	8c e0       	ldi	r24, 0x0C	; 12
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	40 e0       	ldi	r20, 0x00	; 0
    1c08:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
	TIMER0_u8BusyWaitMS(10) ;
    1c0c:	6a e0       	ldi	r22, 0x0A	; 10
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>


	
	
}
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <LCD_voidsendCommandData>:

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//CHOOSE TO VALUES OF RS AND RW AND SEND THE COMMAND OR DATA YOU WANT 
void LCD_voidsendCommandData(uint8_t u8_WantedCommand,uint8_t u8_SetRsVal,uint8_t u8_SetRwVal)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	00 d0       	rcall	.+0      	; 0x1c24 <LCD_voidsendCommandData+0x6>
    1c24:	0f 92       	push	r0
    1c26:	cd b7       	in	r28, 0x3d	; 61
    1c28:	de b7       	in	r29, 0x3e	; 62
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	6a 83       	std	Y+2, r22	; 0x02
    1c2e:	4b 83       	std	Y+3, r20	; 0x03
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_HIGH) ;
    1c30:	88 e0       	ldi	r24, 0x08	; 8
    1c32:	63 e0       	ldi	r22, 0x03	; 3
    1c34:	41 e0       	ldi	r20, 0x01	; 1
    1c36:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_RS,u8_SetRsVal) ;
    1c3a:	88 e0       	ldi	r24, 0x08	; 8
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	4a 81       	ldd	r20, Y+2	; 0x02
    1c40:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_RW,u8_SetRwVal) ;
    1c44:	88 e0       	ldi	r24, 0x08	; 8
    1c46:	62 e0       	ldi	r22, 0x02	; 2
    1c48:	4b 81       	ldd	r20, Y+3	; 0x03
    1c4a:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	
	/*SETTING HIGHER SIGNIFICANT BITS */
	TIMER0_u8BusyWaitMS(10) ;
    1c4e:	6a e0       	ldi	r22, 0x0A	; 10
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D7,GET_BIT(u8_WantedCommand,u8_LCD_D7_BIT));
    1c5a:	89 81       	ldd	r24, Y+1	; 0x01
    1c5c:	98 2f       	mov	r25, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	99 27       	eor	r25, r25
    1c62:	99 1f       	adc	r25, r25
    1c64:	88 e0       	ldi	r24, 0x08	; 8
    1c66:	67 e0       	ldi	r22, 0x07	; 7
    1c68:	49 2f       	mov	r20, r25
    1c6a:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D6,GET_BIT(u8_WantedCommand,u8_LCD_D6_BIT));
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	82 95       	swap	r24
    1c72:	86 95       	lsr	r24
    1c74:	86 95       	lsr	r24
    1c76:	83 70       	andi	r24, 0x03	; 3
    1c78:	98 2f       	mov	r25, r24
    1c7a:	91 70       	andi	r25, 0x01	; 1
    1c7c:	88 e0       	ldi	r24, 0x08	; 8
    1c7e:	66 e0       	ldi	r22, 0x06	; 6
    1c80:	49 2f       	mov	r20, r25
    1c82:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D5,GET_BIT(u8_WantedCommand,u8_LCD_D5_BIT)) ;
    1c86:	89 81       	ldd	r24, Y+1	; 0x01
    1c88:	82 95       	swap	r24
    1c8a:	86 95       	lsr	r24
    1c8c:	87 70       	andi	r24, 0x07	; 7
    1c8e:	98 2f       	mov	r25, r24
    1c90:	91 70       	andi	r25, 0x01	; 1
    1c92:	88 e0       	ldi	r24, 0x08	; 8
    1c94:	65 e0       	ldi	r22, 0x05	; 5
    1c96:	49 2f       	mov	r20, r25
    1c98:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D4,GET_BIT(u8_WantedCommand,u8_LCD_D4_BIT)) ;
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	82 95       	swap	r24
    1ca0:	8f 70       	andi	r24, 0x0F	; 15
    1ca2:	98 2f       	mov	r25, r24
    1ca4:	91 70       	andi	r25, 0x01	; 1
    1ca6:	88 e0       	ldi	r24, 0x08	; 8
    1ca8:	64 e0       	ldi	r22, 0x04	; 4
    1caa:	49 2f       	mov	r20, r25
    1cac:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_LOW) ;
    1cb0:	88 e0       	ldi	r24, 0x08	; 8
    1cb2:	63 e0       	ldi	r22, 0x03	; 3
    1cb4:	40 e0       	ldi	r20, 0x00	; 0
    1cb6:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	TIMER0_u8BusyWaitMS(10) ;
    1cba:	6a e0       	ldi	r22, 0x0A	; 10
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>
	
	/*SETTING LOWER SIGNIFICANT BITS */
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_HIGH) ;
    1cc6:	88 e0       	ldi	r24, 0x08	; 8
    1cc8:	63 e0       	ldi	r22, 0x03	; 3
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D7,GET_BIT(u8_WantedCommand,u8_LCD_D3_BIT));
    1cd0:	89 81       	ldd	r24, Y+1	; 0x01
    1cd2:	86 95       	lsr	r24
    1cd4:	86 95       	lsr	r24
    1cd6:	86 95       	lsr	r24
    1cd8:	98 2f       	mov	r25, r24
    1cda:	91 70       	andi	r25, 0x01	; 1
    1cdc:	88 e0       	ldi	r24, 0x08	; 8
    1cde:	67 e0       	ldi	r22, 0x07	; 7
    1ce0:	49 2f       	mov	r20, r25
    1ce2:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D6,GET_BIT(u8_WantedCommand,u8_LCD_D2_BIT));
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	86 95       	lsr	r24
    1cea:	86 95       	lsr	r24
    1cec:	98 2f       	mov	r25, r24
    1cee:	91 70       	andi	r25, 0x01	; 1
    1cf0:	88 e0       	ldi	r24, 0x08	; 8
    1cf2:	66 e0       	ldi	r22, 0x06	; 6
    1cf4:	49 2f       	mov	r20, r25
    1cf6:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D5,GET_BIT(u8_WantedCommand,u8_LCD_D1_BIT)) ;
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	86 95       	lsr	r24
    1cfe:	98 2f       	mov	r25, r24
    1d00:	91 70       	andi	r25, 0x01	; 1
    1d02:	88 e0       	ldi	r24, 0x08	; 8
    1d04:	65 e0       	ldi	r22, 0x05	; 5
    1d06:	49 2f       	mov	r20, r25
    1d08:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_D4,GET_BIT(u8_WantedCommand,u8_LCD_D0_BIT)) ;
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	98 2f       	mov	r25, r24
    1d10:	91 70       	andi	r25, 0x01	; 1
    1d12:	88 e0       	ldi	r24, 0x08	; 8
    1d14:	64 e0       	ldi	r22, 0x04	; 4
    1d16:	49 2f       	mov	r20, r25
    1d18:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	TIMER0_u8BusyWaitMS(10) ;
    1d1c:	6a e0       	ldi	r22, 0x0A	; 10
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_LCD_E,u8_DIO_PIN_LOW) ;
    1d28:	88 e0       	ldi	r24, 0x08	; 8
    1d2a:	63 e0       	ldi	r22, 0x03	; 3
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	TIMER0_u8BusyWaitMS(10) ;
    1d32:	6a e0       	ldi	r22, 0x0A	; 10
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>
	
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	0f 90       	pop	r0
    1d44:	cf 91       	pop	r28
    1d46:	df 91       	pop	r29
    1d48:	08 95       	ret

00001d4a <LCD_voidPrintChar>:

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//PRINT CHAR ON LCD
void LCD_voidPrintChar(uint8_t u8_WantedCharPrint)
{
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	0f 92       	push	r0
    1d50:	cd b7       	in	r28, 0x3d	; 61
    1d52:	de b7       	in	r29, 0x3e	; 62
    1d54:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidsendCommandData(u8_WantedCharPrint,1,0) ; 
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	40 e0       	ldi	r20, 0x00	; 0
    1d5c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
}
    1d60:	0f 90       	pop	r0
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <LCD_voidPrintStr>:

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//PRINT STRING ON LCD 
void LCD_voidPrintStr(uint8_t* u8_WantedStrPrint) 
{
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <LCD_voidPrintStr+0x6>
    1d6e:	0f 92       	push	r0
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	9b 83       	std	Y+3, r25	; 0x03
    1d76:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_IndexCounter = u8_LCD_INTIALIZING_VAR ; 
    1d78:	19 82       	std	Y+1, r1	; 0x01
    1d7a:	10 c0       	rjmp	.+32     	; 0x1d9c <LCD_voidPrintStr+0x34>
	while(u8_WantedStrPrint[u8_IndexCounter]!=NULL_CHAR)
	{
		LCD_voidsendCommandData(u8_WantedStrPrint[u8_IndexCounter],1,0) ; 
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	28 2f       	mov	r18, r24
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	9b 81       	ldd	r25, Y+3	; 0x03
    1d86:	fc 01       	movw	r30, r24
    1d88:	e2 0f       	add	r30, r18
    1d8a:	f3 1f       	adc	r31, r19
    1d8c:	80 81       	ld	r24, Z
    1d8e:	61 e0       	ldi	r22, 0x01	; 1
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
		u8_IndexCounter++ ; 
    1d96:	89 81       	ldd	r24, Y+1	; 0x01
    1d98:	8f 5f       	subi	r24, 0xFF	; 255
    1d9a:	89 83       	std	Y+1, r24	; 0x01
/////////////////////////////////////////////////////////////////////////////////////////
//PRINT STRING ON LCD 
void LCD_voidPrintStr(uint8_t* u8_WantedStrPrint) 
{
	uint8_t u8_IndexCounter = u8_LCD_INTIALIZING_VAR ; 
	while(u8_WantedStrPrint[u8_IndexCounter]!=NULL_CHAR)
    1d9c:	89 81       	ldd	r24, Y+1	; 0x01
    1d9e:	28 2f       	mov	r18, r24
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	9b 81       	ldd	r25, Y+3	; 0x03
    1da6:	fc 01       	movw	r30, r24
    1da8:	e2 0f       	add	r30, r18
    1daa:	f3 1f       	adc	r31, r19
    1dac:	80 81       	ld	r24, Z
    1dae:	88 23       	and	r24, r24
    1db0:	29 f7       	brne	.-54     	; 0x1d7c <LCD_voidPrintStr+0x14>
	{
		LCD_voidsendCommandData(u8_WantedStrPrint[u8_IndexCounter],1,0) ; 
		u8_IndexCounter++ ; 
	}
}
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	0f 90       	pop	r0
    1db8:	cf 91       	pop	r28
    1dba:	df 91       	pop	r29
    1dbc:	08 95       	ret

00001dbe <LCD_voidPrintNum>:

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//PRINT NUMBER TO LCD 
void LCD_voidPrintNum(uint32_t u32_WantedNumPrint) 
{
    1dbe:	df 93       	push	r29
    1dc0:	cf 93       	push	r28
    1dc2:	cd b7       	in	r28, 0x3d	; 61
    1dc4:	de b7       	in	r29, 0x3e	; 62
    1dc6:	2e 97       	sbiw	r28, 0x0e	; 14
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	de bf       	out	0x3e, r29	; 62
    1dce:	0f be       	out	0x3f, r0	; 63
    1dd0:	cd bf       	out	0x3d, r28	; 61
    1dd2:	6b 87       	std	Y+11, r22	; 0x0b
    1dd4:	7c 87       	std	Y+12, r23	; 0x0c
    1dd6:	8d 87       	std	Y+13, r24	; 0x0d
    1dd8:	9e 87       	std	Y+14, r25	; 0x0e
	uint8_t u8_PrintCounter =  u8_LCD_INTIALIZING_VAR  ;
    1dda:	1a 86       	std	Y+10, r1	; 0x0a
	uint8_t u8_TempPrintVal = u8_LCD_INTIALIZING_VAR  ; 
    1ddc:	19 86       	std	Y+9, r1	; 0x09
	uint32_t u32_CopyNumPrint = u32_WantedNumPrint ; 
    1dde:	8b 85       	ldd	r24, Y+11	; 0x0b
    1de0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1de2:	ad 85       	ldd	r26, Y+13	; 0x0d
    1de4:	be 85       	ldd	r27, Y+14	; 0x0e
    1de6:	8d 83       	std	Y+5, r24	; 0x05
    1de8:	9e 83       	std	Y+6, r25	; 0x06
    1dea:	af 83       	std	Y+7, r26	; 0x07
    1dec:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t u32_u32WeightOfPrnitedNum = u8_INTIALIZING_WEIGHT_VAR ;
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	a0 e0       	ldi	r26, 0x00	; 0
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	9a 83       	std	Y+2, r25	; 0x02
    1dfa:	ab 83       	std	Y+3, r26	; 0x03
    1dfc:	bc 83       	std	Y+4, r27	; 0x04
    1dfe:	2a c0       	rjmp	.+84     	; 0x1e54 <LCD_voidPrintNum+0x96>
	//GET THE WEIGHT OF THE PRINTED NUMBERS AND THE NUBER OF ITERATION NEEDED 
	while(u32_CopyNumPrint>u8_LCD_INTIALIZING_VAR)
	{
		u8_PrintCounter++ ;
    1e00:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e02:	8f 5f       	subi	r24, 0xFF	; 255
    1e04:	8a 87       	std	Y+10, r24	; 0x0a
		if(u8_PrintCounter>u8_INTIALIZING_WEIGHT_VAR)
    1e06:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e08:	82 30       	cpi	r24, 0x02	; 2
    1e0a:	90 f0       	brcs	.+36     	; 0x1e30 <LCD_voidPrintNum+0x72>
			u32_u32WeightOfPrnitedNum*= 10 ;  
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	ab 81       	ldd	r26, Y+3	; 0x03
    1e12:	bc 81       	ldd	r27, Y+4	; 0x04
    1e14:	2a e0       	ldi	r18, 0x0A	; 10
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	50 e0       	ldi	r21, 0x00	; 0
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__mulsi3>
    1e24:	dc 01       	movw	r26, r24
    1e26:	cb 01       	movw	r24, r22
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	9a 83       	std	Y+2, r25	; 0x02
    1e2c:	ab 83       	std	Y+3, r26	; 0x03
    1e2e:	bc 83       	std	Y+4, r27	; 0x04
		u32_CopyNumPrint = u32_CopyNumPrint/10 ; 
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	9e 81       	ldd	r25, Y+6	; 0x06
    1e34:	af 81       	ldd	r26, Y+7	; 0x07
    1e36:	b8 85       	ldd	r27, Y+8	; 0x08
    1e38:	2a e0       	ldi	r18, 0x0A	; 10
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	40 e0       	ldi	r20, 0x00	; 0
    1e3e:	50 e0       	ldi	r21, 0x00	; 0
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 88 10 	call	0x2110	; 0x2110 <__udivmodsi4>
    1e48:	da 01       	movw	r26, r20
    1e4a:	c9 01       	movw	r24, r18
    1e4c:	8d 83       	std	Y+5, r24	; 0x05
    1e4e:	9e 83       	std	Y+6, r25	; 0x06
    1e50:	af 83       	std	Y+7, r26	; 0x07
    1e52:	b8 87       	std	Y+8, r27	; 0x08
	uint8_t u8_PrintCounter =  u8_LCD_INTIALIZING_VAR  ;
	uint8_t u8_TempPrintVal = u8_LCD_INTIALIZING_VAR  ; 
	uint32_t u32_CopyNumPrint = u32_WantedNumPrint ; 
	uint32_t u32_u32WeightOfPrnitedNum = u8_INTIALIZING_WEIGHT_VAR ;
	//GET THE WEIGHT OF THE PRINTED NUMBERS AND THE NUBER OF ITERATION NEEDED 
	while(u32_CopyNumPrint>u8_LCD_INTIALIZING_VAR)
    1e54:	8d 81       	ldd	r24, Y+5	; 0x05
    1e56:	9e 81       	ldd	r25, Y+6	; 0x06
    1e58:	af 81       	ldd	r26, Y+7	; 0x07
    1e5a:	b8 85       	ldd	r27, Y+8	; 0x08
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	a1 05       	cpc	r26, r1
    1e60:	b1 05       	cpc	r27, r1
    1e62:	71 f6       	brne	.-100    	; 0x1e00 <LCD_voidPrintNum+0x42>
    1e64:	3c c0       	rjmp	.+120    	; 0x1ede <LCD_voidPrintNum+0x120>
	}
	//PRINT THE WANTED NUMBER FROM THE HIGHER ORDER NUMBERS TO THE LOWER ORDER ONE 
	while(u8_PrintCounter>u8_LCD_INTIALIZING_VAR)
	{
		
		u8_TempPrintVal = u32_WantedNumPrint /u32_u32WeightOfPrnitedNum ; //GET THE HIGHEST ORDER NUMBER TO PRINT 
    1e66:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e68:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e6a:	ad 85       	ldd	r26, Y+13	; 0x0d
    1e6c:	be 85       	ldd	r27, Y+14	; 0x0e
    1e6e:	29 81       	ldd	r18, Y+1	; 0x01
    1e70:	3a 81       	ldd	r19, Y+2	; 0x02
    1e72:	4b 81       	ldd	r20, Y+3	; 0x03
    1e74:	5c 81       	ldd	r21, Y+4	; 0x04
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 88 10 	call	0x2110	; 0x2110 <__udivmodsi4>
    1e7e:	da 01       	movw	r26, r20
    1e80:	c9 01       	movw	r24, r18
    1e82:	89 87       	std	Y+9, r24	; 0x09
		u32_WantedNumPrint = u32_WantedNumPrint - (u32_WantedNumPrint/u32_u32WeightOfPrnitedNum)*u32_u32WeightOfPrnitedNum ; //UPDATE THE PRINTED VAR BY DECREMENT THE PRINTED DIGIT
    1e84:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e86:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e88:	ad 85       	ldd	r26, Y+13	; 0x0d
    1e8a:	be 85       	ldd	r27, Y+14	; 0x0e
    1e8c:	29 81       	ldd	r18, Y+1	; 0x01
    1e8e:	3a 81       	ldd	r19, Y+2	; 0x02
    1e90:	4b 81       	ldd	r20, Y+3	; 0x03
    1e92:	5c 81       	ldd	r21, Y+4	; 0x04
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 88 10 	call	0x2110	; 0x2110 <__udivmodsi4>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	8b 87       	std	Y+11, r24	; 0x0b
    1ea2:	9c 87       	std	Y+12, r25	; 0x0c
    1ea4:	ad 87       	std	Y+13, r26	; 0x0d
    1ea6:	be 87       	std	Y+14, r27	; 0x0e
		u32_u32WeightOfPrnitedNum = u32_u32WeightOfPrnitedNum / 10 ; // UPDATE THE WEGHT OG THE VALUE REMAINNING 
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
    1eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1eac:	ab 81       	ldd	r26, Y+3	; 0x03
    1eae:	bc 81       	ldd	r27, Y+4	; 0x04
    1eb0:	2a e0       	ldi	r18, 0x0A	; 10
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	50 e0       	ldi	r21, 0x00	; 0
    1eb8:	bc 01       	movw	r22, r24
    1eba:	cd 01       	movw	r24, r26
    1ebc:	0e 94 88 10 	call	0x2110	; 0x2110 <__udivmodsi4>
    1ec0:	da 01       	movw	r26, r20
    1ec2:	c9 01       	movw	r24, r18
    1ec4:	89 83       	std	Y+1, r24	; 0x01
    1ec6:	9a 83       	std	Y+2, r25	; 0x02
    1ec8:	ab 83       	std	Y+3, r26	; 0x03
    1eca:	bc 83       	std	Y+4, r27	; 0x04
		u8_TempPrintVal = u8_TempPrintVal + u8_CONVERT_NUM_TO_ASCII ; // CONVERT VALUE OF THE PRINTED NUMBER TO ASCII
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	80 5d       	subi	r24, 0xD0	; 208
    1ed0:	89 87       	std	Y+9, r24	; 0x09
		LCD_voidPrintChar(u8_TempPrintVal) ; //PRINT THE NUMBER 
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <LCD_voidPrintChar>
		u8_PrintCounter-- ; //DECREMENT BY 1 
    1ed8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1eda:	81 50       	subi	r24, 0x01	; 1
    1edc:	8a 87       	std	Y+10, r24	; 0x0a
		if(u8_PrintCounter>u8_INTIALIZING_WEIGHT_VAR)
			u32_u32WeightOfPrnitedNum*= 10 ;  
		u32_CopyNumPrint = u32_CopyNumPrint/10 ; 
	}
	//PRINT THE WANTED NUMBER FROM THE HIGHER ORDER NUMBERS TO THE LOWER ORDER ONE 
	while(u8_PrintCounter>u8_LCD_INTIALIZING_VAR)
    1ede:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ee0:	88 23       	and	r24, r24
    1ee2:	09 f6       	brne	.-126    	; 0x1e66 <LCD_voidPrintNum+0xa8>
		u32_u32WeightOfPrnitedNum = u32_u32WeightOfPrnitedNum / 10 ; // UPDATE THE WEGHT OG THE VALUE REMAINNING 
		u8_TempPrintVal = u8_TempPrintVal + u8_CONVERT_NUM_TO_ASCII ; // CONVERT VALUE OF THE PRINTED NUMBER TO ASCII
		LCD_voidPrintChar(u8_TempPrintVal) ; //PRINT THE NUMBER 
		u8_PrintCounter-- ; //DECREMENT BY 1 
	}
}
    1ee4:	2e 96       	adiw	r28, 0x0e	; 14
    1ee6:	0f b6       	in	r0, 0x3f	; 63
    1ee8:	f8 94       	cli
    1eea:	de bf       	out	0x3e, r29	; 62
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	cd bf       	out	0x3d, r28	; 61
    1ef0:	cf 91       	pop	r28
    1ef2:	df 91       	pop	r29
    1ef4:	08 95       	ret

00001ef6 <LCD_voidMoveCursor>:

/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////
//MOVING THE CURSOR TO THE LEFT OR RIGHT BY SENDING COMMAND TO LCD_voidsendCommandData
void LCD_voidMoveCursor(uint8_t u8_WantedDir) 
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	0f 92       	push	r0
    1efc:	cd b7       	in	r28, 0x3d	; 61
    1efe:	de b7       	in	r29, 0x3e	; 62
    1f00:	89 83       	std	Y+1, r24	; 0x01
	if(u8_WantedDir==u8_LCD_RIGHT)
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	84 31       	cpi	r24, 0x14	; 20
    1f06:	31 f4       	brne	.+12     	; 0x1f14 <LCD_voidMoveCursor+0x1e>
	{
		LCD_voidsendCommandData(u8_LCD_RIGHT,0,0) ;
    1f08:	84 e1       	ldi	r24, 0x14	; 20
    1f0a:	60 e0       	ldi	r22, 0x00	; 0
    1f0c:	40 e0       	ldi	r20, 0x00	; 0
    1f0e:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
    1f12:	05 c0       	rjmp	.+10     	; 0x1f1e <LCD_voidMoveCursor+0x28>
	}
	else 
	{
		LCD_voidsendCommandData(u8_LCD_LEFT,0,0) ;
    1f14:	80 e1       	ldi	r24, 0x10	; 16
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	40 e0       	ldi	r20, 0x00	; 0
    1f1a:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <LCD_voidsendCommandData>
	}
	TIMER0_u8BusyWaitMS(10) ;
    1f1e:	6a e0       	ldi	r22, 0x0A	; 10
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0e 94 a3 09 	call	0x1346	; 0x1346 <TIMER0_u8BusyWaitMS>

}
    1f2a:	0f 90       	pop	r0
    1f2c:	cf 91       	pop	r28
    1f2e:	df 91       	pop	r29
    1f30:	08 95       	ret

00001f32 <LM35_voidInit>:




void LM35_voidInit(void) 
{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDir(u8_DIO_PORTA,u8_DIO_PIN0,u8_DIO_INPUT_PIN); // INTIALIZING THE PIN OF SENSOR AS INPUT PIN 
    1f3a:	88 e0       	ldi	r24, 0x08	; 8
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 93 03 	call	0x726	; 0x726 <DIO_u8SetPinDir>
	DIO_u8SetPinVal(u8_DIO_PORTA,u8_DIO_PIN0,u8_DIO_PIN_LOW); // MAKE THE PULL UP OFF 
    1f44:	88 e0       	ldi	r24, 0x08	; 8
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	0e 94 89 02 	call	0x512	; 0x512 <DIO_u8SetPinVal>
	ADC_voidInit(); //INTIALIZING ADC 
    1f4e:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	ADC_voidStartConversion();//MAKE THE CONVERSION START 
    1f52:	0e 94 c0 00 	call	0x180	; 0x180 <ADC_voidStartConversion>
} 
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <LM35_u8GetTempInC>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//FUNCTION THAT TAKE ARGUMENT (POINTER TO UINT8_T) TO RETURN AVERAGE TEMP VALUE OF LAST 4 READS AND RETURN ERROR FLAG IG POINTER = NULL_POINTER
uint8_t LM35_u8GetTempInC(uint8_t* pu8_ReturnAvgTemp) 
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	28 97       	sbiw	r28, 0x08	; 8
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
	static uint8_t su8_Temp1= u8_LM35_INTIALIZE_VAR, su8_Temp2=u8_LM35_INTIALIZE_VAR, su8_NewTemp3 = u8_LM35_INTIALIZE_VAR, su8_Temp4 = u8_LM35_INTIALIZE_VAR; 
	uint8_t u8_AdcIntFlag = u8_LM35_INTIALIZE_VAR, u8_ErrorState = u8_LM35_OK ; 
    1f74:	1a 82       	std	Y+2, r1	; 0x02
    1f76:	8c e3       	ldi	r24, 0x3C	; 60
    1f78:	89 83       	std	Y+1, r24	; 0x01
	uint16_t u16_AdcResult = u8_LM35_INTIALIZE_VAR ;
    1f7a:	1c 82       	std	Y+4, r1	; 0x04
    1f7c:	1b 82       	std	Y+3, r1	; 0x03
	if(pu8_ReturnAvgTemp!=NULL_POINTER)
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	9e 81       	ldd	r25, Y+6	; 0x06
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <LM35_u8GetTempInC+0x2c>
    1f86:	77 c0       	rjmp	.+238    	; 0x2076 <LM35_u8GetTempInC+0x11a>
	{
		ADC_u8GetFlagInt(&u8_AdcIntFlag); 
    1f88:	ce 01       	movw	r24, r28
    1f8a:	02 96       	adiw	r24, 0x02	; 2
    1f8c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <ADC_u8GetFlagInt>
		if(u8_AdcIntFlag==u8_ADC_FLAG_RISE )
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	81 30       	cpi	r24, 0x01	; 1
    1f94:	09 f5       	brne	.+66     	; 0x1fd8 <LM35_u8GetTempInC+0x7c>
		{
			ADC_u8GetResult(&u16_AdcResult) ;
    1f96:	ce 01       	movw	r24, r28
    1f98:	03 96       	adiw	r24, 0x03	; 3
    1f9a:	0e 94 12 02 	call	0x424	; 0x424 <ADC_u8GetResult>
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
			}
			else if(u8_ADC_VREF== u8_ADC_2560mV_INTERNAL_REF)
			{
				//CALC. THE NEW TEMP IN CASE OF VCC VREf/2
				su8_NewTemp3 = (uint8_t)((uint32_t)(u8_ADC_STEP_SIZE_IN_HALF_VCC_UV*(uint32_t)(u16_AdcResult))/(uint32_t)(u16_LM35_CONVERT_UV_TO_MV*u8_LM35_SCALE_FACTOR)) ; 
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	cc 01       	movw	r24, r24
    1fa4:	a0 e0       	ldi	r26, 0x00	; 0
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	24 ec       	ldi	r18, 0xC4	; 196
    1faa:	39 e0       	ldi	r19, 0x09	; 9
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	50 e0       	ldi	r21, 0x00	; 0
    1fb0:	bc 01       	movw	r22, r24
    1fb2:	cd 01       	movw	r24, r26
    1fb4:	0e 94 69 10 	call	0x20d2	; 0x20d2 <__mulsi3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	20 e1       	ldi	r18, 0x10	; 16
    1fbe:	37 e2       	ldi	r19, 0x27	; 39
    1fc0:	40 e0       	ldi	r20, 0x00	; 0
    1fc2:	50 e0       	ldi	r21, 0x00	; 0
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	cd 01       	movw	r24, r26
    1fc8:	0e 94 88 10 	call	0x2110	; 0x2110 <__udivmodsi4>
    1fcc:	da 01       	movw	r26, r20
    1fce:	c9 01       	movw	r24, r18
    1fd0:	80 93 7f 00 	sts	0x007F, r24
			}
			u8_ErrorState = u8_LM35_NEW_TEMP_OK ; 
    1fd4:	8d e3       	ldi	r24, 0x3D	; 61
    1fd6:	89 83       	std	Y+1, r24	; 0x01
		}
		//update 3 temp readings to the current reading if this is the first read 
		if(su8_Temp2==0)
    1fd8:	80 91 80 00 	lds	r24, 0x0080
    1fdc:	88 23       	and	r24, r24
    1fde:	21 f4       	brne	.+8      	; 0x1fe8 <LM35_u8GetTempInC+0x8c>
		{
			su8_Temp2 = su8_NewTemp3 ; 
    1fe0:	80 91 7f 00 	lds	r24, 0x007F
    1fe4:	80 93 80 00 	sts	0x0080, r24
		}
		if(su8_Temp1==0)
    1fe8:	80 91 81 00 	lds	r24, 0x0081
    1fec:	88 23       	and	r24, r24
    1fee:	21 f4       	brne	.+8      	; 0x1ff8 <LM35_u8GetTempInC+0x9c>
		{
			su8_Temp1 = su8_Temp2 ; 
    1ff0:	80 91 80 00 	lds	r24, 0x0080
    1ff4:	80 93 81 00 	sts	0x0081, r24
		}
		if(su8_Temp4==0)
    1ff8:	80 91 7e 00 	lds	r24, 0x007E
    1ffc:	88 23       	and	r24, r24
    1ffe:	21 f4       	brne	.+8      	; 0x2008 <LM35_u8GetTempInC+0xac>
		{
			su8_Temp4 = su8_Temp1;
    2000:	80 91 81 00 	lds	r24, 0x0081
    2004:	80 93 7e 00 	sts	0x007E, r24
		}
		//put the average of last 4 readings in the pointer that return the value 
		*pu8_ReturnAvgTemp = (su8_Temp1 + su8_Temp2 + su8_Temp4 + su8_NewTemp3) / u8_LM35_NUM_OF_READINGS ; 
    2008:	80 91 81 00 	lds	r24, 0x0081
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	80 91 80 00 	lds	r24, 0x0080
    2014:	88 2f       	mov	r24, r24
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	28 0f       	add	r18, r24
    201a:	39 1f       	adc	r19, r25
    201c:	80 91 7e 00 	lds	r24, 0x007E
    2020:	88 2f       	mov	r24, r24
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	28 0f       	add	r18, r24
    2026:	39 1f       	adc	r19, r25
    2028:	80 91 7f 00 	lds	r24, 0x007F
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	82 0f       	add	r24, r18
    2032:	93 1f       	adc	r25, r19
    2034:	98 87       	std	Y+8, r25	; 0x08
    2036:	8f 83       	std	Y+7, r24	; 0x07
    2038:	8f 81       	ldd	r24, Y+7	; 0x07
    203a:	98 85       	ldd	r25, Y+8	; 0x08
    203c:	99 23       	and	r25, r25
    203e:	2c f4       	brge	.+10     	; 0x204a <LM35_u8GetTempInC+0xee>
    2040:	8f 81       	ldd	r24, Y+7	; 0x07
    2042:	98 85       	ldd	r25, Y+8	; 0x08
    2044:	03 96       	adiw	r24, 0x03	; 3
    2046:	98 87       	std	Y+8, r25	; 0x08
    2048:	8f 83       	std	Y+7, r24	; 0x07
    204a:	8f 81       	ldd	r24, Y+7	; 0x07
    204c:	98 85       	ldd	r25, Y+8	; 0x08
    204e:	95 95       	asr	r25
    2050:	87 95       	ror	r24
    2052:	95 95       	asr	r25
    2054:	87 95       	ror	r24
    2056:	ed 81       	ldd	r30, Y+5	; 0x05
    2058:	fe 81       	ldd	r31, Y+6	; 0x06
    205a:	80 83       	st	Z, r24
		//update remaning 3 temp readings 
		su8_Temp4 = su8_Temp1 ; 
    205c:	80 91 81 00 	lds	r24, 0x0081
    2060:	80 93 7e 00 	sts	0x007E, r24
		su8_Temp1 = su8_Temp2 ;
    2064:	80 91 80 00 	lds	r24, 0x0080
    2068:	80 93 81 00 	sts	0x0081, r24
		su8_Temp2 = su8_NewTemp3; 
    206c:	80 91 7f 00 	lds	r24, 0x007F
    2070:	80 93 80 00 	sts	0x0080, r24
    2074:	02 c0       	rjmp	.+4      	; 0x207a <LM35_u8GetTempInC+0x11e>
	}
	else //return error state if the pointer = NULL_POINTER
	{
		u8_ErrorState = u8_LM35_NOK ;
    2076:	8e e3       	ldi	r24, 0x3E	; 62
    2078:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8_ErrorState ; 
    207a:	89 81       	ldd	r24, Y+1	; 0x01
}
    207c:	28 96       	adiw	r28, 0x08	; 8
    207e:	0f b6       	in	r0, 0x3f	; 63
    2080:	f8 94       	cli
    2082:	de bf       	out	0x3e, r29	; 62
    2084:	0f be       	out	0x3f, r0	; 63
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <main>:
#include "../ECUAL/lcd_interface.h"
#include "../ECUAL/temp_sensor_lm35_interface.h"
//#include <util/delay.h>

int main()
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	0f 92       	push	r0
    2094:	cd b7       	in	r28, 0x3d	; 61
    2096:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_TempSensorDegree = 0 ;
    2098:	19 82       	std	Y+1, r1	; 0x01
	LCD_voidInit();
    209a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <LCD_voidInit>
	LM35_voidInit() ;
    209e:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <LM35_voidInit>
	LCD_voidPrintStr("Temp now is ");
    20a2:	80 e6       	ldi	r24, 0x60	; 96
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <LCD_voidPrintStr>
	while(1)
	{
		LM35_u8GetTempInC(&u8_TempSensorDegree)  ;
    20aa:	ce 01       	movw	r24, r28
    20ac:	01 96       	adiw	r24, 0x01	; 1
    20ae:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <LM35_u8GetTempInC>
		LCD_voidPrintNum(u8_TempSensorDegree) ;
    20b2:	89 81       	ldd	r24, Y+1	; 0x01
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	a0 e0       	ldi	r26, 0x00	; 0
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	bc 01       	movw	r22, r24
    20be:	cd 01       	movw	r24, r26
    20c0:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <LCD_voidPrintNum>
		LCD_voidMoveCursor(u8_LCD_LEFT) ;
    20c4:	80 e1       	ldi	r24, 0x10	; 16
    20c6:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_voidMoveCursor>
		LCD_voidMoveCursor(u8_LCD_LEFT) ;
    20ca:	80 e1       	ldi	r24, 0x10	; 16
    20cc:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <LCD_voidMoveCursor>
    20d0:	ec cf       	rjmp	.-40     	; 0x20aa <main+0x1c>

000020d2 <__mulsi3>:
    20d2:	62 9f       	mul	r22, r18
    20d4:	d0 01       	movw	r26, r0
    20d6:	73 9f       	mul	r23, r19
    20d8:	f0 01       	movw	r30, r0
    20da:	82 9f       	mul	r24, r18
    20dc:	e0 0d       	add	r30, r0
    20de:	f1 1d       	adc	r31, r1
    20e0:	64 9f       	mul	r22, r20
    20e2:	e0 0d       	add	r30, r0
    20e4:	f1 1d       	adc	r31, r1
    20e6:	92 9f       	mul	r25, r18
    20e8:	f0 0d       	add	r31, r0
    20ea:	83 9f       	mul	r24, r19
    20ec:	f0 0d       	add	r31, r0
    20ee:	74 9f       	mul	r23, r20
    20f0:	f0 0d       	add	r31, r0
    20f2:	65 9f       	mul	r22, r21
    20f4:	f0 0d       	add	r31, r0
    20f6:	99 27       	eor	r25, r25
    20f8:	72 9f       	mul	r23, r18
    20fa:	b0 0d       	add	r27, r0
    20fc:	e1 1d       	adc	r30, r1
    20fe:	f9 1f       	adc	r31, r25
    2100:	63 9f       	mul	r22, r19
    2102:	b0 0d       	add	r27, r0
    2104:	e1 1d       	adc	r30, r1
    2106:	f9 1f       	adc	r31, r25
    2108:	bd 01       	movw	r22, r26
    210a:	cf 01       	movw	r24, r30
    210c:	11 24       	eor	r1, r1
    210e:	08 95       	ret

00002110 <__udivmodsi4>:
    2110:	a1 e2       	ldi	r26, 0x21	; 33
    2112:	1a 2e       	mov	r1, r26
    2114:	aa 1b       	sub	r26, r26
    2116:	bb 1b       	sub	r27, r27
    2118:	fd 01       	movw	r30, r26
    211a:	0d c0       	rjmp	.+26     	; 0x2136 <__udivmodsi4_ep>

0000211c <__udivmodsi4_loop>:
    211c:	aa 1f       	adc	r26, r26
    211e:	bb 1f       	adc	r27, r27
    2120:	ee 1f       	adc	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	a2 17       	cp	r26, r18
    2126:	b3 07       	cpc	r27, r19
    2128:	e4 07       	cpc	r30, r20
    212a:	f5 07       	cpc	r31, r21
    212c:	20 f0       	brcs	.+8      	; 0x2136 <__udivmodsi4_ep>
    212e:	a2 1b       	sub	r26, r18
    2130:	b3 0b       	sbc	r27, r19
    2132:	e4 0b       	sbc	r30, r20
    2134:	f5 0b       	sbc	r31, r21

00002136 <__udivmodsi4_ep>:
    2136:	66 1f       	adc	r22, r22
    2138:	77 1f       	adc	r23, r23
    213a:	88 1f       	adc	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	1a 94       	dec	r1
    2140:	69 f7       	brne	.-38     	; 0x211c <__udivmodsi4_loop>
    2142:	60 95       	com	r22
    2144:	70 95       	com	r23
    2146:	80 95       	com	r24
    2148:	90 95       	com	r25
    214a:	9b 01       	movw	r18, r22
    214c:	ac 01       	movw	r20, r24
    214e:	bd 01       	movw	r22, r26
    2150:	cf 01       	movw	r24, r30
    2152:	08 95       	ret

00002154 <_exit>:
    2154:	f8 94       	cli

00002156 <__stop_program>:
    2156:	ff cf       	rjmp	.-2      	; 0x2156 <__stop_program>
